
CV08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c84  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003e34  08003e34  00004e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f08  08003f08  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f08  08003f08  00004f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f10  08003f10  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f10  08003f10  00004f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f14  08003f14  00004f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003f18  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005070  2**0
                  CONTENTS
 10 .bss          0000020c  20000070  20000070  00005070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00005070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ccf7  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c73  00000000  00000000  00011d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00013a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  00014680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024352  00000000  00000000  00015037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e00e  00000000  00000000  00039389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc1dd  00000000  00000000  00047397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123574  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c18  00000000  00000000  001235b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001271d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003e1c 	.word	0x08003e1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003e1c 	.word	0x08003e1c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffd1 	bl	8000580 <ITM_SendChar>
	return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ec:	f000 fd30 	bl	8001050 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f0:	f000 f896 	bl	8000720 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005f4:	f000 f976 	bl	80008e4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80005f8:	f000 f94a 	bl	8000890 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80005fc:	f000 f8fa 	bl	80007f4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000600:	483b      	ldr	r0, [pc, #236]	@ (80006f0 <main+0x108>)
 8000602:	f001 fd93 	bl	800212c <HAL_TIM_Base_Start_IT>
	printf("rReady for password\n");
 8000606:	483b      	ldr	r0, [pc, #236]	@ (80006f4 <main+0x10c>)
 8000608:	f002 fda4 	bl	8003154 <puts>

		static uint8_t pass_pos;
		static uint8_t entries;
		static uint32_t delay = 0;

		if (key != 0)
 800060c:	4b3a      	ldr	r3, [pc, #232]	@ (80006f8 <main+0x110>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d055      	beq.n	80006c2 <main+0xda>
		{
			entries++;
 8000616:	4b39      	ldr	r3, [pc, #228]	@ (80006fc <main+0x114>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b37      	ldr	r3, [pc, #220]	@ (80006fc <main+0x114>)
 8000620:	701a      	strb	r2, [r3, #0]
			printf("Pressed '%c'\n", key);
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <main+0x110>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	4619      	mov	r1, r3
 800062a:	4835      	ldr	r0, [pc, #212]	@ (8000700 <main+0x118>)
 800062c:	f002 fd2a 	bl	8003084 <iprintf>
			HAL_Delay(250);
 8000630:	20fa      	movs	r0, #250	@ 0xfa
 8000632:	f000 fd7f 	bl	8001134 <HAL_Delay>
			delay = HAL_GetTick();
 8000636:	f000 fd71 	bl	800111c <HAL_GetTick>
 800063a:	4603      	mov	r3, r0
 800063c:	4a31      	ldr	r2, [pc, #196]	@ (8000704 <main+0x11c>)
 800063e:	6013      	str	r3, [r2, #0]

			if (key == password[pass_pos])
 8000640:	4b31      	ldr	r3, [pc, #196]	@ (8000708 <main+0x120>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b31      	ldr	r3, [pc, #196]	@ (800070c <main+0x124>)
 8000648:	5c9b      	ldrb	r3, [r3, r2]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <main+0x110>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	429a      	cmp	r2, r3
 8000654:	d106      	bne.n	8000664 <main+0x7c>
			{
				pass_pos++;
 8000656:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <main+0x120>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <main+0x120>)
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	e002      	b.n	800066a <main+0x82>
			}
			else
			{
				pass_pos = 0;
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <main+0x120>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
			}

			if (entries >= sizeof(password) && pass_pos < sizeof(password)-1)
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <main+0x114>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d909      	bls.n	8000686 <main+0x9e>
 8000672:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <main+0x120>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d805      	bhi.n	8000686 <main+0x9e>
			{
				printf("Password incorrect :(  Try again.\n");
 800067a:	4825      	ldr	r0, [pc, #148]	@ (8000710 <main+0x128>)
 800067c:	f002 fd6a 	bl	8003154 <puts>
				entries = 0;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <main+0x114>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
			}

			if (pass_pos >= sizeof(password))
 8000686:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <main+0x120>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b04      	cmp	r3, #4
 800068c:	d916      	bls.n	80006bc <main+0xd4>
			{
				printf("Password correct!\n");
 800068e:	4821      	ldr	r0, [pc, #132]	@ (8000714 <main+0x12c>)
 8000690:	f002 fd60 	bl	8003154 <puts>
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	2101      	movs	r1, #1
 8000698:	481f      	ldr	r0, [pc, #124]	@ (8000718 <main+0x130>)
 800069a:	f001 f845 	bl	8001728 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 800069e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a2:	f000 fd47 	bl	8001134 <HAL_Delay>
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	481b      	ldr	r0, [pc, #108]	@ (8000718 <main+0x130>)
 80006ac:	f001 f83c 	bl	8001728 <HAL_GPIO_WritePin>
				pass_pos = 0;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <main+0x120>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
				entries = 0;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <main+0x114>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
			}
			key = 0;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <main+0x110>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
		}

		if ((HAL_GetTick() > delay + 3000) && (entries != 0))
 80006c2:	f000 fd2b 	bl	800111c <HAL_GetTick>
 80006c6:	4602      	mov	r2, r0
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <main+0x11c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d99b      	bls.n	800060c <main+0x24>
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <main+0x114>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d097      	beq.n	800060c <main+0x24>
		{
			printf("Timeout - Password reseted\n");
 80006dc:	480f      	ldr	r0, [pc, #60]	@ (800071c <main+0x134>)
 80006de:	f002 fd39 	bl	8003154 <puts>
			pass_pos = 0;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <main+0x120>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
			entries = 0;
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <main+0x114>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	{
 80006ee:	e78d      	b.n	800060c <main+0x24>
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	08003e34 	.word	0x08003e34
 80006f8:	2000011c 	.word	0x2000011c
 80006fc:	2000011d 	.word	0x2000011d
 8000700:	08003e48 	.word	0x08003e48
 8000704:	20000120 	.word	0x20000120
 8000708:	20000124 	.word	0x20000124
 800070c:	20000000 	.word	0x20000000
 8000710:	08003e58 	.word	0x08003e58
 8000714:	08003e7c 	.word	0x08003e7c
 8000718:	40020400 	.word	0x40020400
 800071c:	08003e90 	.word	0x08003e90

08000720 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	@ 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fdf0 	bl	8003314 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	@ (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000780:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000794:	23a8      	movs	r3, #168	@ 0xa8
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 ffd9 	bl	800175c <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80007b0:	f000 fa96 	bl	8000ce0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ca:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2105      	movs	r1, #5
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fa3a 	bl	8001c4c <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80007de:	f000 fa7f 	bl	8000ce0 <Error_Handler>
	}
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_TIM3_Init+0x94>)
 8000812:	4a1e      	ldr	r2, [pc, #120]	@ (800088c <MX_TIM3_Init+0x98>)
 8000814:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8399;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_TIM3_Init+0x94>)
 8000818:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800081c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_TIM3_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_TIM3_Init+0x94>)
 8000826:	2263      	movs	r2, #99	@ 0x63
 8000828:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_TIM3_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_TIM3_Init+0x94>)
 8000832:	2280      	movs	r2, #128	@ 0x80
 8000834:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000836:	4814      	ldr	r0, [pc, #80]	@ (8000888 <MX_TIM3_Init+0x94>)
 8000838:	f001 fc28 	bl	800208c <HAL_TIM_Base_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 8000842:	f000 fa4d 	bl	8000ce0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4619      	mov	r1, r3
 8000852:	480d      	ldr	r0, [pc, #52]	@ (8000888 <MX_TIM3_Init+0x94>)
 8000854:	f001 fdca 	bl	80023ec <HAL_TIM_ConfigClockSource>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 800085e:	f000 fa3f 	bl	8000ce0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_TIM3_Init+0x94>)
 8000870:	f001 fff2 	bl	8002858 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 800087a:	f000 fa31 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000008c 	.word	0x2000008c
 800088c:	40000400 	.word	0x40000400

08000890 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_USART3_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART3_UART_Init+0x4c>)
 80008c8:	f002 f856 	bl	8002978 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80008d2:	f000 fa05 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000d4 	.word	0x200000d4
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	@ 0x38
 80008e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
 80008fe:	4ba1      	ldr	r3, [pc, #644]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4aa0      	ldr	r2, [pc, #640]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b9e      	ldr	r3, [pc, #632]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	623b      	str	r3, [r7, #32]
 8000914:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
 800091a:	4b9a      	ldr	r3, [pc, #616]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a99      	ldr	r2, [pc, #612]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b97      	ldr	r3, [pc, #604]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	61fb      	str	r3, [r7, #28]
 8000930:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	4b93      	ldr	r3, [pc, #588]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a92      	ldr	r2, [pc, #584]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b90      	ldr	r3, [pc, #576]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b8c      	ldr	r3, [pc, #560]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a8b      	ldr	r2, [pc, #556]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b89      	ldr	r3, [pc, #548]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b85      	ldr	r3, [pc, #532]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a84      	ldr	r2, [pc, #528]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b82      	ldr	r3, [pc, #520]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b7e      	ldr	r3, [pc, #504]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a7d      	ldr	r2, [pc, #500]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b7b      	ldr	r3, [pc, #492]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b77      	ldr	r3, [pc, #476]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a76      	ldr	r2, [pc, #472]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b74      	ldr	r3, [pc, #464]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b70      	ldr	r3, [pc, #448]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a6f      	ldr	r2, [pc, #444]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b6d      	ldr	r3, [pc, #436]	@ (8000b84 <MX_GPIO_Init+0x2a0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80009e0:	4869      	ldr	r0, [pc, #420]	@ (8000b88 <MX_GPIO_Init+0x2a4>)
 80009e2:	f000 fea1 	bl	8001728 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009ec:	4867      	ldr	r0, [pc, #412]	@ (8000b8c <MX_GPIO_Init+0x2a8>)
 80009ee:	f000 fe9b 	bl	8001728 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2142      	movs	r1, #66	@ 0x42
 80009f6:	4866      	ldr	r0, [pc, #408]	@ (8000b90 <MX_GPIO_Init+0x2ac>)
 80009f8:	f000 fe96 	bl	8001728 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
	GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 80009fc:	2378      	movs	r3, #120	@ 0x78
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4861      	ldr	r0, [pc, #388]	@ (8000b94 <MX_GPIO_Init+0x2b0>)
 8000a10:	f000 fcc6 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	485b      	ldr	r0, [pc, #364]	@ (8000b98 <MX_GPIO_Init+0x2b4>)
 8000a2c:	f000 fcb8 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
	GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 8000a30:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a36:	2311      	movs	r3, #17
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	484f      	ldr	r0, [pc, #316]	@ (8000b88 <MX_GPIO_Init+0x2a4>)
 8000a4a:	f000 fca9 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a4e:	2332      	movs	r3, #50	@ 0x32
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5e:	230b      	movs	r3, #11
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	484b      	ldr	r0, [pc, #300]	@ (8000b98 <MX_GPIO_Init+0x2b4>)
 8000a6a:	f000 fc99 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a6e:	2386      	movs	r3, #134	@ 0x86
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7e:	230b      	movs	r3, #11
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	4844      	ldr	r0, [pc, #272]	@ (8000b9c <MX_GPIO_Init+0x2b8>)
 8000a8a:	f000 fc89 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a8e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4839      	ldr	r0, [pc, #228]	@ (8000b8c <MX_GPIO_Init+0x2a8>)
 8000aa8:	f000 fc7a 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Row1_Pin */
	GPIO_InitStruct.Pin = Row1_Pin;
 8000aac:	2302      	movs	r3, #2
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ab0:	2311      	movs	r3, #17
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4833      	ldr	r0, [pc, #204]	@ (8000b90 <MX_GPIO_Init+0x2ac>)
 8000ac4:	f000 fc6c 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ada:	230b      	movs	r3, #11
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4829      	ldr	r0, [pc, #164]	@ (8000b8c <MX_GPIO_Init+0x2a8>)
 8000ae6:	f000 fc5b 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aea:	2340      	movs	r3, #64	@ 0x40
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4823      	ldr	r0, [pc, #140]	@ (8000b90 <MX_GPIO_Init+0x2ac>)
 8000b02:	f000 fc4d 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	481d      	ldr	r0, [pc, #116]	@ (8000b90 <MX_GPIO_Init+0x2ac>)
 8000b1a:	f000 fc41 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b1e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b30:	230a      	movs	r3, #10
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	@ (8000b9c <MX_GPIO_Init+0x2b8>)
 8000b3c:	f000 fc30 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <MX_GPIO_Init+0x2b8>)
 8000b56:	f000 fc23 	bl	80013a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <MX_GPIO_Init+0x2ac>)
 8000b78:	f000 fc12 	bl	80013a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3738      	adds	r7, #56	@ 0x38
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40021400 	.word	0x40021400
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40021800 	.word	0x40021800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
			{ '4', '5', '6', 'B' },
			{ '7', '8', '9', 'C' },
			{ '*', '0', '#', 'D' },
	};

	if (key == 0) {
 8000ba8:	4b47      	ldr	r3, [pc, #284]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d13b      	bne.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0x8a>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET) {
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	4845      	ldr	r0, [pc, #276]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000bb6:	f000 fd9f 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d107      	bne.n	8000bd0 <HAL_TIM_PeriodElapsedCallback+0x30>
			key = keyboard[row][0];
 8000bc0:	4b43      	ldr	r3, [pc, #268]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b43      	ldr	r3, [pc, #268]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000bc8:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000bce:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET) {
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	483e      	ldr	r0, [pc, #248]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000bd4:	f000 fd90 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d107      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x4e>
			key = keyboard[row][1];
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4a3c      	ldr	r2, [pc, #240]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	785a      	ldrb	r2, [r3, #1]
 8000bea:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000bec:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET) {
 8000bee:	2120      	movs	r1, #32
 8000bf0:	4836      	ldr	r0, [pc, #216]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000bf2:	f000 fd81 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d107      	bne.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x6c>
			key = keyboard[row][2];
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	789a      	ldrb	r2, [r3, #2]
 8000c08:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c0a:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET) {
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	482f      	ldr	r0, [pc, #188]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000c10:	f000 fd72 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d107      	bne.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0x8a>
			key = keyboard[row][3];
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	78da      	ldrb	r2, [r3, #3]
 8000c26:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c28:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	482a      	ldr	r0, [pc, #168]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c30:	f000 fd7a 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3a:	4828      	ldr	r0, [pc, #160]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c3c:	f000 fd74 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c46:	f000 fd6f 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c50:	4822      	ldr	r0, [pc, #136]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c52:	f000 fd69 	bl	8001728 <HAL_GPIO_WritePin>
	switch (row)
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d830      	bhi.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c64 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c75 	.word	0x08000c75
 8000c68:	08000c89 	.word	0x08000c89
 8000c6c:	08000c9b 	.word	0x08000c9b
 8000c70:	08000caf 	.word	0x08000caf
	{
	case 0:
		row = 1;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c80:	4816      	ldr	r0, [pc, #88]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c82:	f000 fd51 	bl	8001728 <HAL_GPIO_WritePin>
		break;
 8000c86:	e01b      	b.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x120>
	case 1:
		row = 2;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	4812      	ldr	r0, [pc, #72]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c94:	f000 fd48 	bl	8001728 <HAL_GPIO_WritePin>
		break;
 8000c98:	e012      	b.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x120>
	case 2:
		row = 3;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000ca8:	f000 fd3e 	bl	8001728 <HAL_GPIO_WritePin>
		break;
 8000cac:	e008      	b.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x120>
	case 3:
		row = 0;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000cba:	f000 fd35 	bl	8001728 <HAL_GPIO_WritePin>
		break;
 8000cbe:	bf00      	nop
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000011c 	.word	0x2000011c
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	20000125 	.word	0x20000125
 8000cd4:	08003eac 	.word	0x08003eac
 8000cd8:	40021800 	.word	0x40021800
 8000cdc:	40021400 	.word	0x40021400

08000ce0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <Error_Handler+0x8>

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_TIM_Base_MspInit+0x48>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d115      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_TIM_Base_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <HAL_TIM_Base_MspInit+0x4c>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_TIM_Base_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	201d      	movs	r0, #29
 8000d70:	f000 fadf 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d74:	201d      	movs	r0, #29
 8000d76:	f000 faf8 	bl	800136a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40000400 	.word	0x40000400
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	@ (8000e10 <HAL_UART_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a17      	ldr	r2, [pc, #92]	@ (8000e14 <HAL_UART_MspInit+0x88>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_UART_MspInit+0x88>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	@ (8000e14 <HAL_UART_MspInit+0x88>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_UART_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000de6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <HAL_UART_MspInit+0x8c>)
 8000e04:	f000 facc 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	@ 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004800 	.word	0x40004800
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020c00 	.word	0x40020c00

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f93f 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <TIM3_IRQHandler+0x10>)
 8000e82:	f001 f9c3 	bl	800220c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
  }

  return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb72 	bl	80005ce <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
  }
  return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_isatty>:

int _isatty(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	@ (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f002 fa08 	bl	80033b0 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20030000 	.word	0x20030000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	20000128 	.word	0x20000128
 8000fd4:	20000280 	.word	0x20000280

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001000:	f7ff ffea 	bl	8000fd8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800102a:	f002 f9c7 	bl	80033bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fadb 	bl	80005e8 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001034:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001040:	08003f18 	.word	0x08003f18
  ldr r2, =_sbss
 8001044:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001048:	2000027c 	.word	0x2000027c

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f94f 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe32 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f967 	bl	8001386 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f92f 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000010 	.word	0x20000010
 80010f0:	2000000c 	.word	0x2000000c

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000010 	.word	0x20000010
 8001118:	2000012c 	.word	0x2000012c

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000012c 	.word	0x2000012c

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000010 	.word	0x20000010

0800117c <__NVIC_SetPriorityGrouping>:
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	@ (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e177      	b.n	80016ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8166 	bne.w	80016a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80c0 	beq.w	80016a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b66      	ldr	r3, [pc, #408]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a65      	ldr	r2, [pc, #404]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b63      	ldr	r3, [pc, #396]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a61      	ldr	r2, [pc, #388]	@ (80016c8 <HAL_GPIO_Init+0x328>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a58      	ldr	r2, [pc, #352]	@ (80016cc <HAL_GPIO_Init+0x32c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d037      	beq.n	80015de <HAL_GPIO_Init+0x23e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a57      	ldr	r2, [pc, #348]	@ (80016d0 <HAL_GPIO_Init+0x330>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d031      	beq.n	80015da <HAL_GPIO_Init+0x23a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a56      	ldr	r2, [pc, #344]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d02b      	beq.n	80015d6 <HAL_GPIO_Init+0x236>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a55      	ldr	r2, [pc, #340]	@ (80016d8 <HAL_GPIO_Init+0x338>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d025      	beq.n	80015d2 <HAL_GPIO_Init+0x232>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a54      	ldr	r2, [pc, #336]	@ (80016dc <HAL_GPIO_Init+0x33c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01f      	beq.n	80015ce <HAL_GPIO_Init+0x22e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a53      	ldr	r2, [pc, #332]	@ (80016e0 <HAL_GPIO_Init+0x340>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x22a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a52      	ldr	r2, [pc, #328]	@ (80016e4 <HAL_GPIO_Init+0x344>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x226>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a51      	ldr	r2, [pc, #324]	@ (80016e8 <HAL_GPIO_Init+0x348>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x222>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a50      	ldr	r2, [pc, #320]	@ (80016ec <HAL_GPIO_Init+0x34c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x21e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4f      	ldr	r2, [pc, #316]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x21a>
 80015b6:	2309      	movs	r3, #9
 80015b8:	e012      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015ba:	230a      	movs	r3, #10
 80015bc:	e010      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015be:	2308      	movs	r3, #8
 80015c0:	e00e      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015c2:	2307      	movs	r3, #7
 80015c4:	e00c      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00a      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015ca:	2305      	movs	r3, #5
 80015cc:	e008      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x240>
 80015de:	2300      	movs	r3, #0
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f0:	4935      	ldr	r1, [pc, #212]	@ (80016c8 <HAL_GPIO_Init+0x328>)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b3d      	ldr	r3, [pc, #244]	@ (80016f4 <HAL_GPIO_Init+0x354>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a34      	ldr	r2, [pc, #208]	@ (80016f4 <HAL_GPIO_Init+0x354>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <HAL_GPIO_Init+0x354>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a29      	ldr	r2, [pc, #164]	@ (80016f4 <HAL_GPIO_Init+0x354>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001652:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <HAL_GPIO_Init+0x354>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001676:	4a1f      	ldr	r2, [pc, #124]	@ (80016f4 <HAL_GPIO_Init+0x354>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_GPIO_Init+0x354>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <HAL_GPIO_Init+0x354>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	f67f ae84 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3724      	adds	r7, #36	@ 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40021400 	.word	0x40021400
 80016e4:	40021800 	.word	0x40021800
 80016e8:	40021c00 	.word	0x40021c00
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40022400 	.word	0x40022400
 80016f4:	40013c00 	.word	0x40013c00

080016f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e001      	b.n	800171a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001744:	e003      	b.n	800174e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e267      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d075      	beq.n	8001866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800177a:	4b88      	ldr	r3, [pc, #544]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b04      	cmp	r3, #4
 8001784:	d00c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001786:	4b85      	ldr	r3, [pc, #532]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800178e:	2b08      	cmp	r3, #8
 8001790:	d112      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001792:	4b82      	ldr	r3, [pc, #520]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800179e:	d10b      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	4b7e      	ldr	r3, [pc, #504]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d05b      	beq.n	8001864 <HAL_RCC_OscConfig+0x108>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d157      	bne.n	8001864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e242      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c0:	d106      	bne.n	80017d0 <HAL_RCC_OscConfig+0x74>
 80017c2:	4b76      	ldr	r3, [pc, #472]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a75      	ldr	r2, [pc, #468]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e01d      	b.n	800180c <HAL_RCC_OscConfig+0xb0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x98>
 80017da:	4b70      	ldr	r3, [pc, #448]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6f      	ldr	r2, [pc, #444]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b6d      	ldr	r3, [pc, #436]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6c      	ldr	r2, [pc, #432]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0xb0>
 80017f4:	4b69      	ldr	r3, [pc, #420]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a68      	ldr	r2, [pc, #416]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b66      	ldr	r3, [pc, #408]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a65      	ldr	r2, [pc, #404]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d013      	beq.n	800183c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc82 	bl	800111c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc7e 	bl	800111c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e207      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b5b      	ldr	r3, [pc, #364]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0xc0>
 800183a:	e014      	b.n	8001866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fc6e 	bl	800111c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fc6a 	bl	800111c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1f3      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	4b51      	ldr	r3, [pc, #324]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0xe8>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d063      	beq.n	800193a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001872:	4b4a      	ldr	r3, [pc, #296]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187e:	4b47      	ldr	r3, [pc, #284]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001886:	2b08      	cmp	r3, #8
 8001888:	d11c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188a:	4b44      	ldr	r3, [pc, #272]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d116      	bne.n	80018c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x152>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e1c7      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b3b      	ldr	r3, [pc, #236]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4937      	ldr	r1, [pc, #220]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	e03a      	b.n	800193a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d020      	beq.n	800190e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018cc:	4b34      	ldr	r3, [pc, #208]	@ (80019a0 <HAL_RCC_OscConfig+0x244>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fc23 	bl	800111c <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fc1f 	bl	800111c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1a8      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b28      	ldr	r3, [pc, #160]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4925      	ldr	r1, [pc, #148]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <HAL_RCC_OscConfig+0x244>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fc02 	bl	800111c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff fbfe 	bl	800111c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e187      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d036      	beq.n	80019b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d016      	beq.n	800197c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_RCC_OscConfig+0x248>)
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fbe2 	bl	800111c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fbde 	bl	800111c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e167      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x200>
 800197a:	e01b      	b.n	80019b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_OscConfig+0x248>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff fbcb 	bl	800111c <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	e00e      	b.n	80019a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198a:	f7ff fbc7 	bl	800111c <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d907      	bls.n	80019a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e150      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
 800199c:	40023800 	.word	0x40023800
 80019a0:	42470000 	.word	0x42470000
 80019a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ea      	bne.n	800198a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8097 	beq.w	8001af0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c6:	4b81      	ldr	r3, [pc, #516]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a7c      	ldr	r2, [pc, #496]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b77      	ldr	r3, [pc, #476]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b74      	ldr	r3, [pc, #464]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a73      	ldr	r2, [pc, #460]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb87 	bl	800111c <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fb83 	bl	800111c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e10c      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2ea>
 8001a38:	4b64      	ldr	r3, [pc, #400]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a63      	ldr	r2, [pc, #396]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x324>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x30c>
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	4a5e      	ldr	r2, [pc, #376]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0x324>
 8001a68:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6c:	4a57      	ldr	r2, [pc, #348]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a74:	4b55      	ldr	r3, [pc, #340]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a54      	ldr	r2, [pc, #336]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a7a:	f023 0304 	bic.w	r3, r3, #4
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d015      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff fb48 	bl	800111c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7ff fb44 	bl	800111c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0cb      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa6:	4b49      	ldr	r3, [pc, #292]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0ee      	beq.n	8001a90 <HAL_RCC_OscConfig+0x334>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fb32 	bl	800111c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fb2e 	bl	800111c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0b5      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1ee      	bne.n	8001abc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	4a38      	ldr	r2, [pc, #224]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a1 	beq.w	8001c3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001afa:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d05c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d141      	bne.n	8001b92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fb02 	bl	800111c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff fafe 	bl	800111c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e087      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	019b      	lsls	r3, r3, #6
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b50:	085b      	lsrs	r3, r3, #1
 8001b52:	3b01      	subs	r3, #1
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	491b      	ldr	r1, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fad7 	bl	800111c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fad3 	bl	800111c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e05c      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x416>
 8001b90:	e054      	b.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fac0 	bl	800111c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fabc 	bl	800111c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e045      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x444>
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e038      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x4ec>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d028      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d121      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d11a      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d111      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	3b01      	subs	r3, #1
 8001c22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0cc      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b68      	ldr	r3, [pc, #416]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d90c      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b65      	ldr	r3, [pc, #404]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b63      	ldr	r3, [pc, #396]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0b8      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca0:	4b59      	ldr	r3, [pc, #356]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a58      	ldr	r2, [pc, #352]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb8:	4b53      	ldr	r3, [pc, #332]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a52      	ldr	r2, [pc, #328]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc4:	4b50      	ldr	r3, [pc, #320]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	494d      	ldr	r1, [pc, #308]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d044      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b47      	ldr	r3, [pc, #284]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d119      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e07f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e06f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e067      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4934      	ldr	r1, [pc, #208]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff f9ee 	bl	800111c <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff f9ea 	bl	800111c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e04f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d20c      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b22      	ldr	r3, [pc, #136]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e032      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4916      	ldr	r1, [pc, #88]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dbe:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	490e      	ldr	r1, [pc, #56]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd2:	f000 f821 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	490a      	ldr	r1, [pc, #40]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	5ccb      	ldrb	r3, [r1, r3]
 8001de6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f94e 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08003ebc 	.word	0x08003ebc
 8001e10:	20000008 	.word	0x20000008
 8001e14:	2000000c 	.word	0x2000000c

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e1c:	b094      	sub	sp, #80	@ 0x50
 8001e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e30:	4b79      	ldr	r3, [pc, #484]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d00d      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x40>
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	f200 80e1 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x34>
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e4a:	e0db      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b73      	ldr	r3, [pc, #460]	@ (800201c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e50:	e0db      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e52:	4b73      	ldr	r3, [pc, #460]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e56:	e0d8      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e58:	4b6f      	ldr	r3, [pc, #444]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e62:	4b6d      	ldr	r3, [pc, #436]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	2200      	movs	r2, #0
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	f04f 0000 	mov.w	r0, #0
 8001e92:	f04f 0100 	mov.w	r1, #0
 8001e96:	0159      	lsls	r1, r3, #5
 8001e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e9c:	0150      	lsls	r0, r2, #5
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	1a51      	subs	r1, r2, r1
 8001ea6:	6139      	str	r1, [r7, #16]
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	018b      	lsls	r3, r1, #6
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	018a      	lsls	r2, r1, #6
 8001eca:	4651      	mov	r1, sl
 8001ecc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ed0:	4659      	mov	r1, fp
 8001ed2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eea:	4690      	mov	r8, r2
 8001eec:	4699      	mov	r9, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	eb18 0303 	adds.w	r3, r8, r3
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	462b      	mov	r3, r5
 8001ef8:	eb49 0303 	adc.w	r3, r9, r3
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	024b      	lsls	r3, r1, #9
 8001f0e:	4621      	mov	r1, r4
 8001f10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f14:	4621      	mov	r1, r4
 8001f16:	024a      	lsls	r2, r1, #9
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f28:	f7fe f9b2 	bl	8000290 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f34:	e058      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f36:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	099b      	lsrs	r3, r3, #6
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4611      	mov	r1, r2
 8001f42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f50:	4642      	mov	r2, r8
 8001f52:	464b      	mov	r3, r9
 8001f54:	f04f 0000 	mov.w	r0, #0
 8001f58:	f04f 0100 	mov.w	r1, #0
 8001f5c:	0159      	lsls	r1, r3, #5
 8001f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f62:	0150      	lsls	r0, r2, #5
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f6e:	4649      	mov	r1, r9
 8001f70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f88:	ebb2 040a 	subs.w	r4, r2, sl
 8001f8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	00eb      	lsls	r3, r5, #3
 8001f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f9e:	00e2      	lsls	r2, r4, #3
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	461d      	mov	r5, r3
 8001fa4:	4643      	mov	r3, r8
 8001fa6:	18e3      	adds	r3, r4, r3
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	464b      	mov	r3, r9
 8001fac:	eb45 0303 	adc.w	r3, r5, r3
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	028b      	lsls	r3, r1, #10
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc8:	4621      	mov	r1, r4
 8001fca:	028a      	lsls	r2, r1, #10
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	61fa      	str	r2, [r7, #28]
 8001fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fdc:	f7fe f958 	bl	8000290 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_GetSysClockFreq+0x204>)
 8002006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800200c:	4618      	mov	r0, r3
 800200e:	3750      	adds	r7, #80	@ 0x50
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	00f42400 	.word	0x00f42400
 8002020:	007a1200 	.word	0x007a1200

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000008 	.word	0x20000008

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	@ (8002060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	08003ecc 	.word	0x08003ecc

08002064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002068:	f7ff ffdc 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0b5b      	lsrs	r3, r3, #13
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	@ (8002088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	08003ecc 	.word	0x08003ecc

0800208c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e041      	b.n	8002122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fe42 	bl	8000d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3304      	adds	r3, #4
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f000 fa7e 	bl	80025cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d001      	beq.n	8002144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e04e      	b.n	80021e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a23      	ldr	r2, [pc, #140]	@ (80021f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d022      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216e:	d01d      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1f      	ldr	r2, [pc, #124]	@ (80021f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d018      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <HAL_TIM_Base_Start_IT+0xd0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00e      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <HAL_TIM_Base_Start_IT+0xd4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d009      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_TIM_Base_Start_IT+0xd8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d004      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_TIM_Base_Start_IT+0xdc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d111      	bne.n	80021d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d010      	beq.n	80021e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ce:	e007      	b.n	80021e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000c00 	.word	0x40000c00
 8002200:	40010400 	.word	0x40010400
 8002204:	40014000 	.word	0x40014000
 8002208:	40001800 	.word	0x40001800

0800220c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d020      	beq.n	8002270 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0202 	mvn.w	r2, #2
 8002240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f999 	bl	800258e <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f98b 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f99c 	bl	80025a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d020      	beq.n	80022bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0204 	mvn.w	r2, #4
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f973 	bl	800258e <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f965 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f976 	bl	80025a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d020      	beq.n	8002308 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01b      	beq.n	8002308 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0208 	mvn.w	r2, #8
 80022d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2204      	movs	r2, #4
 80022de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f94d 	bl	800258e <HAL_TIM_IC_CaptureCallback>
 80022f4:	e005      	b.n	8002302 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f93f 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f950 	bl	80025a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d020      	beq.n	8002354 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01b      	beq.n	8002354 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0210 	mvn.w	r2, #16
 8002324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2208      	movs	r2, #8
 800232a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f927 	bl	800258e <HAL_TIM_IC_CaptureCallback>
 8002340:	e005      	b.n	800234e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f919 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f92a 	bl	80025a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00c      	beq.n	8002378 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fc14 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fae4 	bl	8002964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00c      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8fb 	bl	80025b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0220 	mvn.w	r2, #32
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fab6 	bl	8002950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_TIM_ConfigClockSource+0x1c>
 8002404:	2302      	movs	r3, #2
 8002406:	e0b4      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x186>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800242e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002440:	d03e      	beq.n	80024c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002446:	f200 8087 	bhi.w	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800244e:	f000 8086 	beq.w	800255e <HAL_TIM_ConfigClockSource+0x172>
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002456:	d87f      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b70      	cmp	r3, #112	@ 0x70
 800245a:	d01a      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0xa6>
 800245c:	2b70      	cmp	r3, #112	@ 0x70
 800245e:	d87b      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b60      	cmp	r3, #96	@ 0x60
 8002462:	d050      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x11a>
 8002464:	2b60      	cmp	r3, #96	@ 0x60
 8002466:	d877      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b50      	cmp	r3, #80	@ 0x50
 800246a:	d03c      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0xfa>
 800246c:	2b50      	cmp	r3, #80	@ 0x50
 800246e:	d873      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b40      	cmp	r3, #64	@ 0x40
 8002472:	d058      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x13a>
 8002474:	2b40      	cmp	r3, #64	@ 0x40
 8002476:	d86f      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b30      	cmp	r3, #48	@ 0x30
 800247a:	d064      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b30      	cmp	r3, #48	@ 0x30
 800247e:	d86b      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d060      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15a>
 8002484:	2b20      	cmp	r3, #32
 8002486:	d867      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d05c      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15a>
 800248c:	2b10      	cmp	r3, #16
 800248e:	d05a      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15a>
 8002490:	e062      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024a2:	f000 f9b9 	bl	8002818 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	609a      	str	r2, [r3, #8]
      break;
 80024be:	e04f      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024d0:	f000 f9a2 	bl	8002818 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024e2:	609a      	str	r2, [r3, #8]
      break;
 80024e4:	e03c      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f2:	461a      	mov	r2, r3
 80024f4:	f000 f916 	bl	8002724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2150      	movs	r1, #80	@ 0x50
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f96f 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 8002504:	e02c      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002512:	461a      	mov	r2, r3
 8002514:	f000 f935 	bl	8002782 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2160      	movs	r1, #96	@ 0x60
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f95f 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 8002524:	e01c      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002532:	461a      	mov	r2, r3
 8002534:	f000 f8f6 	bl	8002724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2140      	movs	r1, #64	@ 0x40
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f94f 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 8002544:	e00c      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f000 f946 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 8002556:	e003      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e000      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800255e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a46      	ldr	r2, [pc, #280]	@ (80026f8 <TIM_Base_SetConfig+0x12c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d013      	beq.n	800260c <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ea:	d00f      	beq.n	800260c <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a43      	ldr	r2, [pc, #268]	@ (80026fc <TIM_Base_SetConfig+0x130>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00b      	beq.n	800260c <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a42      	ldr	r2, [pc, #264]	@ (8002700 <TIM_Base_SetConfig+0x134>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <TIM_Base_SetConfig+0x40>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a41      	ldr	r2, [pc, #260]	@ (8002704 <TIM_Base_SetConfig+0x138>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <TIM_Base_SetConfig+0x40>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a40      	ldr	r2, [pc, #256]	@ (8002708 <TIM_Base_SetConfig+0x13c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d108      	bne.n	800261e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a35      	ldr	r2, [pc, #212]	@ (80026f8 <TIM_Base_SetConfig+0x12c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02b      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800262c:	d027      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a32      	ldr	r2, [pc, #200]	@ (80026fc <TIM_Base_SetConfig+0x130>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d023      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a31      	ldr	r2, [pc, #196]	@ (8002700 <TIM_Base_SetConfig+0x134>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d01f      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a30      	ldr	r2, [pc, #192]	@ (8002704 <TIM_Base_SetConfig+0x138>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01b      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <TIM_Base_SetConfig+0x13c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d017      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2e      	ldr	r2, [pc, #184]	@ (800270c <TIM_Base_SetConfig+0x140>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a2d      	ldr	r2, [pc, #180]	@ (8002710 <TIM_Base_SetConfig+0x144>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00f      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a2c      	ldr	r2, [pc, #176]	@ (8002714 <TIM_Base_SetConfig+0x148>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00b      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a2b      	ldr	r2, [pc, #172]	@ (8002718 <TIM_Base_SetConfig+0x14c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a2a      	ldr	r2, [pc, #168]	@ (800271c <TIM_Base_SetConfig+0x150>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0xb2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a29      	ldr	r2, [pc, #164]	@ (8002720 <TIM_Base_SetConfig+0x154>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a10      	ldr	r2, [pc, #64]	@ (80026f8 <TIM_Base_SetConfig+0x12c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <TIM_Base_SetConfig+0xf8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <TIM_Base_SetConfig+0x13c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d103      	bne.n	80026cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d105      	bne.n	80026ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f023 0201 	bic.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
  }
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	40000c00 	.word	0x40000c00
 8002708:	40010400 	.word	0x40010400
 800270c:	40014000 	.word	0x40014000
 8002710:	40014400 	.word	0x40014400
 8002714:	40014800 	.word	0x40014800
 8002718:	40001800 	.word	0x40001800
 800271c:	40001c00 	.word	0x40001c00
 8002720:	40002000 	.word	0x40002000

08002724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f023 0201 	bic.w	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800274e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f023 030a 	bic.w	r3, r3, #10
 8002760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002782:	b480      	push	{r7}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 0210 	bic.w	r2, r3, #16
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	031b      	lsls	r3, r3, #12
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f043 0307 	orr.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	431a      	orrs	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	609a      	str	r2, [r3, #8]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e05a      	b.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d022      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028bc:	d01d      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d018      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1b      	ldr	r2, [pc, #108]	@ (800293c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a18      	ldr	r2, [pc, #96]	@ (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a15      	ldr	r2, [pc, #84]	@ (800294c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40010400 	.word	0x40010400
 8002948:	40014000 	.word	0x40014000
 800294c:	40001800 	.word	0x40001800

08002950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e042      	b.n	8002a10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe f9f4 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	@ 0x24
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f82b 	bl	8002a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b0c0      	sub	sp, #256	@ 0x100
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a34:	68d9      	ldr	r1, [r3, #12]
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	ea40 0301 	orr.w	r3, r0, r1
 8002a40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a70:	f021 010c 	bic.w	r1, r1, #12
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a92:	6999      	ldr	r1, [r3, #24]
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	ea40 0301 	orr.w	r3, r0, r1
 8002a9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce4 <UART_SetConfig+0x2cc>)
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d005      	beq.n	8002ab8 <UART_SetConfig+0xa0>
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8002ce8 <UART_SetConfig+0x2d0>)
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d104      	bne.n	8002ac2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ab8:	f7ff fad4 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 8002abc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ac0:	e003      	b.n	8002aca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ac2:	f7ff fabb 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8002ac6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad4:	f040 810c 	bne.w	8002cf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ae2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ae6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002aea:	4622      	mov	r2, r4
 8002aec:	462b      	mov	r3, r5
 8002aee:	1891      	adds	r1, r2, r2
 8002af0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002af2:	415b      	adcs	r3, r3
 8002af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002af6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002afa:	4621      	mov	r1, r4
 8002afc:	eb12 0801 	adds.w	r8, r2, r1
 8002b00:	4629      	mov	r1, r5
 8002b02:	eb43 0901 	adc.w	r9, r3, r1
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	eb18 0303 	adds.w	r3, r8, r3
 8002b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b28:	462b      	mov	r3, r5
 8002b2a:	eb49 0303 	adc.w	r3, r9, r3
 8002b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b46:	460b      	mov	r3, r1
 8002b48:	18db      	adds	r3, r3, r3
 8002b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	eb42 0303 	adc.w	r3, r2, r3
 8002b52:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b5c:	f7fd fb98 	bl	8000290 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4b61      	ldr	r3, [pc, #388]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002b66:	fba3 2302 	umull	r2, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	011c      	lsls	r4, r3, #4
 8002b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	1891      	adds	r1, r2, r2
 8002b86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b88:	415b      	adcs	r3, r3
 8002b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b90:	4641      	mov	r1, r8
 8002b92:	eb12 0a01 	adds.w	sl, r2, r1
 8002b96:	4649      	mov	r1, r9
 8002b98:	eb43 0b01 	adc.w	fp, r3, r1
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ba8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb0:	4692      	mov	sl, r2
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4643      	mov	r3, r8
 8002bb6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	18db      	adds	r3, r3, r3
 8002be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002be2:	4613      	mov	r3, r2
 8002be4:	eb42 0303 	adc.w	r3, r2, r3
 8002be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bf2:	f7fd fb4d 	bl	8000290 <__aeabi_uldivmod>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2264      	movs	r2, #100	@ 0x64
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	1acb      	subs	r3, r1, r3
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c12:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002c14:	fba3 2302 	umull	r2, r3, r3, r2
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c20:	441c      	add	r4, r3
 8002c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	1891      	adds	r1, r2, r2
 8002c3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c3c:	415b      	adcs	r3, r3
 8002c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c44:	4641      	mov	r1, r8
 8002c46:	1851      	adds	r1, r2, r1
 8002c48:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	414b      	adcs	r3, r1
 8002c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	00cb      	lsls	r3, r1, #3
 8002c60:	4651      	mov	r1, sl
 8002c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c66:	4651      	mov	r1, sl
 8002c68:	00ca      	lsls	r2, r1, #3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4642      	mov	r2, r8
 8002c72:	189b      	adds	r3, r3, r2
 8002c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c78:	464b      	mov	r3, r9
 8002c7a:	460a      	mov	r2, r1
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c98:	460b      	mov	r3, r1
 8002c9a:	18db      	adds	r3, r3, r3
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	eb42 0303 	adc.w	r3, r2, r3
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002caa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cae:	f7fd faef 	bl	8000290 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	2164      	movs	r1, #100	@ 0x64
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3332      	adds	r3, #50	@ 0x32
 8002cca:	4a08      	ldr	r2, [pc, #32]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	f003 0207 	and.w	r2, r3, #7
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4422      	add	r2, r4
 8002cde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ce0:	e106      	b.n	8002ef0 <UART_SetConfig+0x4d8>
 8002ce2:	bf00      	nop
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40011400 	.word	0x40011400
 8002cec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d02:	4642      	mov	r2, r8
 8002d04:	464b      	mov	r3, r9
 8002d06:	1891      	adds	r1, r2, r2
 8002d08:	6239      	str	r1, [r7, #32]
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d12:	4641      	mov	r1, r8
 8002d14:	1854      	adds	r4, r2, r1
 8002d16:	4649      	mov	r1, r9
 8002d18:	eb43 0501 	adc.w	r5, r3, r1
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	00eb      	lsls	r3, r5, #3
 8002d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2a:	00e2      	lsls	r2, r4, #3
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	461d      	mov	r5, r3
 8002d30:	4643      	mov	r3, r8
 8002d32:	18e3      	adds	r3, r4, r3
 8002d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d38:	464b      	mov	r3, r9
 8002d3a:	eb45 0303 	adc.w	r3, r5, r3
 8002d3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d5e:	4629      	mov	r1, r5
 8002d60:	008b      	lsls	r3, r1, #2
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d68:	4621      	mov	r1, r4
 8002d6a:	008a      	lsls	r2, r1, #2
 8002d6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d70:	f7fd fa8e 	bl	8000290 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4b60      	ldr	r3, [pc, #384]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	011c      	lsls	r4, r3, #4
 8002d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d94:	4642      	mov	r2, r8
 8002d96:	464b      	mov	r3, r9
 8002d98:	1891      	adds	r1, r2, r2
 8002d9a:	61b9      	str	r1, [r7, #24]
 8002d9c:	415b      	adcs	r3, r3
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da4:	4641      	mov	r1, r8
 8002da6:	1851      	adds	r1, r2, r1
 8002da8:	6139      	str	r1, [r7, #16]
 8002daa:	4649      	mov	r1, r9
 8002dac:	414b      	adcs	r3, r1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	00cb      	lsls	r3, r1, #3
 8002dc0:	4651      	mov	r1, sl
 8002dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	00ca      	lsls	r2, r1, #3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dd8:	464b      	mov	r3, r9
 8002dda:	460a      	mov	r2, r1
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	008b      	lsls	r3, r1, #2
 8002e00:	4641      	mov	r1, r8
 8002e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e06:	4641      	mov	r1, r8
 8002e08:	008a      	lsls	r2, r1, #2
 8002e0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e0e:	f7fd fa3f 	bl	8000290 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2264      	movs	r2, #100	@ 0x64
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	1acb      	subs	r3, r1, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	3332      	adds	r3, #50	@ 0x32
 8002e2c:	4a33      	ldr	r2, [pc, #204]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e38:	441c      	add	r4, r3
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e42:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	1891      	adds	r1, r2, r2
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	415b      	adcs	r3, r3
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e58:	4641      	mov	r1, r8
 8002e5a:	1851      	adds	r1, r2, r1
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	4649      	mov	r1, r9
 8002e60:	414b      	adcs	r3, r1
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e70:	4659      	mov	r1, fp
 8002e72:	00cb      	lsls	r3, r1, #3
 8002e74:	4651      	mov	r1, sl
 8002e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7a:	4651      	mov	r1, sl
 8002e7c:	00ca      	lsls	r2, r1, #3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	4642      	mov	r2, r8
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	eb42 0303 	adc.w	r3, r2, r3
 8002e92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002eac:	4649      	mov	r1, r9
 8002eae:	008b      	lsls	r3, r1, #2
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	008a      	lsls	r2, r1, #2
 8002eba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ebe:	f7fd f9e7 	bl	8000290 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	2164      	movs	r1, #100	@ 0x64
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	3332      	adds	r3, #50	@ 0x32
 8002eda:	4a08      	ldr	r2, [pc, #32]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	f003 020f 	and.w	r2, r3, #15
 8002ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4422      	add	r2, r4
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efc:	51eb851f 	.word	0x51eb851f

08002f00 <std>:
 8002f00:	2300      	movs	r3, #0
 8002f02:	b510      	push	{r4, lr}
 8002f04:	4604      	mov	r4, r0
 8002f06:	e9c0 3300 	strd	r3, r3, [r0]
 8002f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f0e:	6083      	str	r3, [r0, #8]
 8002f10:	8181      	strh	r1, [r0, #12]
 8002f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f14:	81c2      	strh	r2, [r0, #14]
 8002f16:	6183      	str	r3, [r0, #24]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	305c      	adds	r0, #92	@ 0x5c
 8002f1e:	f000 f9f9 	bl	8003314 <memset>
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <std+0x58>)
 8002f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f26:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <std+0x5c>)
 8002f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <std+0x60>)
 8002f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <std+0x64>)
 8002f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <std+0x68>)
 8002f34:	6224      	str	r4, [r4, #32]
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d006      	beq.n	8002f48 <std+0x48>
 8002f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f3e:	4294      	cmp	r4, r2
 8002f40:	d002      	beq.n	8002f48 <std+0x48>
 8002f42:	33d0      	adds	r3, #208	@ 0xd0
 8002f44:	429c      	cmp	r4, r3
 8002f46:	d105      	bne.n	8002f54 <std+0x54>
 8002f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	f000 ba58 	b.w	8003404 <__retarget_lock_init_recursive>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	bf00      	nop
 8002f58:	08003165 	.word	0x08003165
 8002f5c:	08003187 	.word	0x08003187
 8002f60:	080031bf 	.word	0x080031bf
 8002f64:	080031e3 	.word	0x080031e3
 8002f68:	20000130 	.word	0x20000130

08002f6c <stdio_exit_handler>:
 8002f6c:	4a02      	ldr	r2, [pc, #8]	@ (8002f78 <stdio_exit_handler+0xc>)
 8002f6e:	4903      	ldr	r1, [pc, #12]	@ (8002f7c <stdio_exit_handler+0x10>)
 8002f70:	4803      	ldr	r0, [pc, #12]	@ (8002f80 <stdio_exit_handler+0x14>)
 8002f72:	f000 b869 	b.w	8003048 <_fwalk_sglue>
 8002f76:	bf00      	nop
 8002f78:	20000014 	.word	0x20000014
 8002f7c:	08003ca5 	.word	0x08003ca5
 8002f80:	20000024 	.word	0x20000024

08002f84 <cleanup_stdio>:
 8002f84:	6841      	ldr	r1, [r0, #4]
 8002f86:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <cleanup_stdio+0x34>)
 8002f88:	4299      	cmp	r1, r3
 8002f8a:	b510      	push	{r4, lr}
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	d001      	beq.n	8002f94 <cleanup_stdio+0x10>
 8002f90:	f000 fe88 	bl	8003ca4 <_fflush_r>
 8002f94:	68a1      	ldr	r1, [r4, #8]
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <cleanup_stdio+0x38>)
 8002f98:	4299      	cmp	r1, r3
 8002f9a:	d002      	beq.n	8002fa2 <cleanup_stdio+0x1e>
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f000 fe81 	bl	8003ca4 <_fflush_r>
 8002fa2:	68e1      	ldr	r1, [r4, #12]
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <cleanup_stdio+0x3c>)
 8002fa6:	4299      	cmp	r1, r3
 8002fa8:	d004      	beq.n	8002fb4 <cleanup_stdio+0x30>
 8002faa:	4620      	mov	r0, r4
 8002fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb0:	f000 be78 	b.w	8003ca4 <_fflush_r>
 8002fb4:	bd10      	pop	{r4, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000130 	.word	0x20000130
 8002fbc:	20000198 	.word	0x20000198
 8002fc0:	20000200 	.word	0x20000200

08002fc4 <global_stdio_init.part.0>:
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <global_stdio_init.part.0+0x30>)
 8002fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8002ff8 <global_stdio_init.part.0+0x34>)
 8002fca:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <global_stdio_init.part.0+0x38>)
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	4620      	mov	r0, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	f7ff ff94 	bl	8002f00 <std>
 8002fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2109      	movs	r1, #9
 8002fe0:	f7ff ff8e 	bl	8002f00 <std>
 8002fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fe8:	2202      	movs	r2, #2
 8002fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fee:	2112      	movs	r1, #18
 8002ff0:	f7ff bf86 	b.w	8002f00 <std>
 8002ff4:	20000268 	.word	0x20000268
 8002ff8:	20000130 	.word	0x20000130
 8002ffc:	08002f6d 	.word	0x08002f6d

08003000 <__sfp_lock_acquire>:
 8003000:	4801      	ldr	r0, [pc, #4]	@ (8003008 <__sfp_lock_acquire+0x8>)
 8003002:	f000 ba00 	b.w	8003406 <__retarget_lock_acquire_recursive>
 8003006:	bf00      	nop
 8003008:	20000271 	.word	0x20000271

0800300c <__sfp_lock_release>:
 800300c:	4801      	ldr	r0, [pc, #4]	@ (8003014 <__sfp_lock_release+0x8>)
 800300e:	f000 b9fb 	b.w	8003408 <__retarget_lock_release_recursive>
 8003012:	bf00      	nop
 8003014:	20000271 	.word	0x20000271

08003018 <__sinit>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	f7ff fff0 	bl	8003000 <__sfp_lock_acquire>
 8003020:	6a23      	ldr	r3, [r4, #32]
 8003022:	b11b      	cbz	r3, 800302c <__sinit+0x14>
 8003024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003028:	f7ff bff0 	b.w	800300c <__sfp_lock_release>
 800302c:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <__sinit+0x28>)
 800302e:	6223      	str	r3, [r4, #32]
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <__sinit+0x2c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f5      	bne.n	8003024 <__sinit+0xc>
 8003038:	f7ff ffc4 	bl	8002fc4 <global_stdio_init.part.0>
 800303c:	e7f2      	b.n	8003024 <__sinit+0xc>
 800303e:	bf00      	nop
 8003040:	08002f85 	.word	0x08002f85
 8003044:	20000268 	.word	0x20000268

08003048 <_fwalk_sglue>:
 8003048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800304c:	4607      	mov	r7, r0
 800304e:	4688      	mov	r8, r1
 8003050:	4614      	mov	r4, r2
 8003052:	2600      	movs	r6, #0
 8003054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003058:	f1b9 0901 	subs.w	r9, r9, #1
 800305c:	d505      	bpl.n	800306a <_fwalk_sglue+0x22>
 800305e:	6824      	ldr	r4, [r4, #0]
 8003060:	2c00      	cmp	r4, #0
 8003062:	d1f7      	bne.n	8003054 <_fwalk_sglue+0xc>
 8003064:	4630      	mov	r0, r6
 8003066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800306a:	89ab      	ldrh	r3, [r5, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d907      	bls.n	8003080 <_fwalk_sglue+0x38>
 8003070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003074:	3301      	adds	r3, #1
 8003076:	d003      	beq.n	8003080 <_fwalk_sglue+0x38>
 8003078:	4629      	mov	r1, r5
 800307a:	4638      	mov	r0, r7
 800307c:	47c0      	blx	r8
 800307e:	4306      	orrs	r6, r0
 8003080:	3568      	adds	r5, #104	@ 0x68
 8003082:	e7e9      	b.n	8003058 <_fwalk_sglue+0x10>

08003084 <iprintf>:
 8003084:	b40f      	push	{r0, r1, r2, r3}
 8003086:	b507      	push	{r0, r1, r2, lr}
 8003088:	4906      	ldr	r1, [pc, #24]	@ (80030a4 <iprintf+0x20>)
 800308a:	ab04      	add	r3, sp, #16
 800308c:	6808      	ldr	r0, [r1, #0]
 800308e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003092:	6881      	ldr	r1, [r0, #8]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	f000 fadb 	bl	8003650 <_vfiprintf_r>
 800309a:	b003      	add	sp, #12
 800309c:	f85d eb04 	ldr.w	lr, [sp], #4
 80030a0:	b004      	add	sp, #16
 80030a2:	4770      	bx	lr
 80030a4:	20000020 	.word	0x20000020

080030a8 <_puts_r>:
 80030a8:	6a03      	ldr	r3, [r0, #32]
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	6884      	ldr	r4, [r0, #8]
 80030ae:	4605      	mov	r5, r0
 80030b0:	460e      	mov	r6, r1
 80030b2:	b90b      	cbnz	r3, 80030b8 <_puts_r+0x10>
 80030b4:	f7ff ffb0 	bl	8003018 <__sinit>
 80030b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030ba:	07db      	lsls	r3, r3, #31
 80030bc:	d405      	bmi.n	80030ca <_puts_r+0x22>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	0598      	lsls	r0, r3, #22
 80030c2:	d402      	bmi.n	80030ca <_puts_r+0x22>
 80030c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030c6:	f000 f99e 	bl	8003406 <__retarget_lock_acquire_recursive>
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	0719      	lsls	r1, r3, #28
 80030ce:	d502      	bpl.n	80030d6 <_puts_r+0x2e>
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d135      	bne.n	8003142 <_puts_r+0x9a>
 80030d6:	4621      	mov	r1, r4
 80030d8:	4628      	mov	r0, r5
 80030da:	f000 f8c5 	bl	8003268 <__swsetup_r>
 80030de:	b380      	cbz	r0, 8003142 <_puts_r+0x9a>
 80030e0:	f04f 35ff 	mov.w	r5, #4294967295
 80030e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030e6:	07da      	lsls	r2, r3, #31
 80030e8:	d405      	bmi.n	80030f6 <_puts_r+0x4e>
 80030ea:	89a3      	ldrh	r3, [r4, #12]
 80030ec:	059b      	lsls	r3, r3, #22
 80030ee:	d402      	bmi.n	80030f6 <_puts_r+0x4e>
 80030f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030f2:	f000 f989 	bl	8003408 <__retarget_lock_release_recursive>
 80030f6:	4628      	mov	r0, r5
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da04      	bge.n	8003108 <_puts_r+0x60>
 80030fe:	69a2      	ldr	r2, [r4, #24]
 8003100:	429a      	cmp	r2, r3
 8003102:	dc17      	bgt.n	8003134 <_puts_r+0x8c>
 8003104:	290a      	cmp	r1, #10
 8003106:	d015      	beq.n	8003134 <_puts_r+0x8c>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	6022      	str	r2, [r4, #0]
 800310e:	7019      	strb	r1, [r3, #0]
 8003110:	68a3      	ldr	r3, [r4, #8]
 8003112:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003116:	3b01      	subs	r3, #1
 8003118:	60a3      	str	r3, [r4, #8]
 800311a:	2900      	cmp	r1, #0
 800311c:	d1ed      	bne.n	80030fa <_puts_r+0x52>
 800311e:	2b00      	cmp	r3, #0
 8003120:	da11      	bge.n	8003146 <_puts_r+0x9e>
 8003122:	4622      	mov	r2, r4
 8003124:	210a      	movs	r1, #10
 8003126:	4628      	mov	r0, r5
 8003128:	f000 f85f 	bl	80031ea <__swbuf_r>
 800312c:	3001      	adds	r0, #1
 800312e:	d0d7      	beq.n	80030e0 <_puts_r+0x38>
 8003130:	250a      	movs	r5, #10
 8003132:	e7d7      	b.n	80030e4 <_puts_r+0x3c>
 8003134:	4622      	mov	r2, r4
 8003136:	4628      	mov	r0, r5
 8003138:	f000 f857 	bl	80031ea <__swbuf_r>
 800313c:	3001      	adds	r0, #1
 800313e:	d1e7      	bne.n	8003110 <_puts_r+0x68>
 8003140:	e7ce      	b.n	80030e0 <_puts_r+0x38>
 8003142:	3e01      	subs	r6, #1
 8003144:	e7e4      	b.n	8003110 <_puts_r+0x68>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	6022      	str	r2, [r4, #0]
 800314c:	220a      	movs	r2, #10
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e7ee      	b.n	8003130 <_puts_r+0x88>
	...

08003154 <puts>:
 8003154:	4b02      	ldr	r3, [pc, #8]	@ (8003160 <puts+0xc>)
 8003156:	4601      	mov	r1, r0
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	f7ff bfa5 	b.w	80030a8 <_puts_r>
 800315e:	bf00      	nop
 8003160:	20000020 	.word	0x20000020

08003164 <__sread>:
 8003164:	b510      	push	{r4, lr}
 8003166:	460c      	mov	r4, r1
 8003168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800316c:	f000 f8fc 	bl	8003368 <_read_r>
 8003170:	2800      	cmp	r0, #0
 8003172:	bfab      	itete	ge
 8003174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003176:	89a3      	ldrhlt	r3, [r4, #12]
 8003178:	181b      	addge	r3, r3, r0
 800317a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800317e:	bfac      	ite	ge
 8003180:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003182:	81a3      	strhlt	r3, [r4, #12]
 8003184:	bd10      	pop	{r4, pc}

08003186 <__swrite>:
 8003186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800318a:	461f      	mov	r7, r3
 800318c:	898b      	ldrh	r3, [r1, #12]
 800318e:	05db      	lsls	r3, r3, #23
 8003190:	4605      	mov	r5, r0
 8003192:	460c      	mov	r4, r1
 8003194:	4616      	mov	r6, r2
 8003196:	d505      	bpl.n	80031a4 <__swrite+0x1e>
 8003198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800319c:	2302      	movs	r3, #2
 800319e:	2200      	movs	r2, #0
 80031a0:	f000 f8d0 	bl	8003344 <_lseek_r>
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	4632      	mov	r2, r6
 80031b2:	463b      	mov	r3, r7
 80031b4:	4628      	mov	r0, r5
 80031b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ba:	f000 b8e7 	b.w	800338c <_write_r>

080031be <__sseek>:
 80031be:	b510      	push	{r4, lr}
 80031c0:	460c      	mov	r4, r1
 80031c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031c6:	f000 f8bd 	bl	8003344 <_lseek_r>
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	bf15      	itete	ne
 80031d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031da:	81a3      	strheq	r3, [r4, #12]
 80031dc:	bf18      	it	ne
 80031de:	81a3      	strhne	r3, [r4, #12]
 80031e0:	bd10      	pop	{r4, pc}

080031e2 <__sclose>:
 80031e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e6:	f000 b89d 	b.w	8003324 <_close_r>

080031ea <__swbuf_r>:
 80031ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ec:	460e      	mov	r6, r1
 80031ee:	4614      	mov	r4, r2
 80031f0:	4605      	mov	r5, r0
 80031f2:	b118      	cbz	r0, 80031fc <__swbuf_r+0x12>
 80031f4:	6a03      	ldr	r3, [r0, #32]
 80031f6:	b90b      	cbnz	r3, 80031fc <__swbuf_r+0x12>
 80031f8:	f7ff ff0e 	bl	8003018 <__sinit>
 80031fc:	69a3      	ldr	r3, [r4, #24]
 80031fe:	60a3      	str	r3, [r4, #8]
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	071a      	lsls	r2, r3, #28
 8003204:	d501      	bpl.n	800320a <__swbuf_r+0x20>
 8003206:	6923      	ldr	r3, [r4, #16]
 8003208:	b943      	cbnz	r3, 800321c <__swbuf_r+0x32>
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	f000 f82b 	bl	8003268 <__swsetup_r>
 8003212:	b118      	cbz	r0, 800321c <__swbuf_r+0x32>
 8003214:	f04f 37ff 	mov.w	r7, #4294967295
 8003218:	4638      	mov	r0, r7
 800321a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	6922      	ldr	r2, [r4, #16]
 8003220:	1a98      	subs	r0, r3, r2
 8003222:	6963      	ldr	r3, [r4, #20]
 8003224:	b2f6      	uxtb	r6, r6
 8003226:	4283      	cmp	r3, r0
 8003228:	4637      	mov	r7, r6
 800322a:	dc05      	bgt.n	8003238 <__swbuf_r+0x4e>
 800322c:	4621      	mov	r1, r4
 800322e:	4628      	mov	r0, r5
 8003230:	f000 fd38 	bl	8003ca4 <_fflush_r>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1ed      	bne.n	8003214 <__swbuf_r+0x2a>
 8003238:	68a3      	ldr	r3, [r4, #8]
 800323a:	3b01      	subs	r3, #1
 800323c:	60a3      	str	r3, [r4, #8]
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	6022      	str	r2, [r4, #0]
 8003244:	701e      	strb	r6, [r3, #0]
 8003246:	6962      	ldr	r2, [r4, #20]
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	429a      	cmp	r2, r3
 800324c:	d004      	beq.n	8003258 <__swbuf_r+0x6e>
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	07db      	lsls	r3, r3, #31
 8003252:	d5e1      	bpl.n	8003218 <__swbuf_r+0x2e>
 8003254:	2e0a      	cmp	r6, #10
 8003256:	d1df      	bne.n	8003218 <__swbuf_r+0x2e>
 8003258:	4621      	mov	r1, r4
 800325a:	4628      	mov	r0, r5
 800325c:	f000 fd22 	bl	8003ca4 <_fflush_r>
 8003260:	2800      	cmp	r0, #0
 8003262:	d0d9      	beq.n	8003218 <__swbuf_r+0x2e>
 8003264:	e7d6      	b.n	8003214 <__swbuf_r+0x2a>
	...

08003268 <__swsetup_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	4b29      	ldr	r3, [pc, #164]	@ (8003310 <__swsetup_r+0xa8>)
 800326c:	4605      	mov	r5, r0
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	460c      	mov	r4, r1
 8003272:	b118      	cbz	r0, 800327c <__swsetup_r+0x14>
 8003274:	6a03      	ldr	r3, [r0, #32]
 8003276:	b90b      	cbnz	r3, 800327c <__swsetup_r+0x14>
 8003278:	f7ff fece 	bl	8003018 <__sinit>
 800327c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003280:	0719      	lsls	r1, r3, #28
 8003282:	d422      	bmi.n	80032ca <__swsetup_r+0x62>
 8003284:	06da      	lsls	r2, r3, #27
 8003286:	d407      	bmi.n	8003298 <__swsetup_r+0x30>
 8003288:	2209      	movs	r2, #9
 800328a:	602a      	str	r2, [r5, #0]
 800328c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003290:	81a3      	strh	r3, [r4, #12]
 8003292:	f04f 30ff 	mov.w	r0, #4294967295
 8003296:	e033      	b.n	8003300 <__swsetup_r+0x98>
 8003298:	0758      	lsls	r0, r3, #29
 800329a:	d512      	bpl.n	80032c2 <__swsetup_r+0x5a>
 800329c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800329e:	b141      	cbz	r1, 80032b2 <__swsetup_r+0x4a>
 80032a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032a4:	4299      	cmp	r1, r3
 80032a6:	d002      	beq.n	80032ae <__swsetup_r+0x46>
 80032a8:	4628      	mov	r0, r5
 80032aa:	f000 f8af 	bl	800340c <_free_r>
 80032ae:	2300      	movs	r3, #0
 80032b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032b8:	81a3      	strh	r3, [r4, #12]
 80032ba:	2300      	movs	r3, #0
 80032bc:	6063      	str	r3, [r4, #4]
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	b94b      	cbnz	r3, 80032e2 <__swsetup_r+0x7a>
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032d8:	d003      	beq.n	80032e2 <__swsetup_r+0x7a>
 80032da:	4621      	mov	r1, r4
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 fd2f 	bl	8003d40 <__smakebuf_r>
 80032e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032e6:	f013 0201 	ands.w	r2, r3, #1
 80032ea:	d00a      	beq.n	8003302 <__swsetup_r+0x9a>
 80032ec:	2200      	movs	r2, #0
 80032ee:	60a2      	str	r2, [r4, #8]
 80032f0:	6962      	ldr	r2, [r4, #20]
 80032f2:	4252      	negs	r2, r2
 80032f4:	61a2      	str	r2, [r4, #24]
 80032f6:	6922      	ldr	r2, [r4, #16]
 80032f8:	b942      	cbnz	r2, 800330c <__swsetup_r+0xa4>
 80032fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032fe:	d1c5      	bne.n	800328c <__swsetup_r+0x24>
 8003300:	bd38      	pop	{r3, r4, r5, pc}
 8003302:	0799      	lsls	r1, r3, #30
 8003304:	bf58      	it	pl
 8003306:	6962      	ldrpl	r2, [r4, #20]
 8003308:	60a2      	str	r2, [r4, #8]
 800330a:	e7f4      	b.n	80032f6 <__swsetup_r+0x8e>
 800330c:	2000      	movs	r0, #0
 800330e:	e7f7      	b.n	8003300 <__swsetup_r+0x98>
 8003310:	20000020 	.word	0x20000020

08003314 <memset>:
 8003314:	4402      	add	r2, r0
 8003316:	4603      	mov	r3, r0
 8003318:	4293      	cmp	r3, r2
 800331a:	d100      	bne.n	800331e <memset+0xa>
 800331c:	4770      	bx	lr
 800331e:	f803 1b01 	strb.w	r1, [r3], #1
 8003322:	e7f9      	b.n	8003318 <memset+0x4>

08003324 <_close_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4d06      	ldr	r5, [pc, #24]	@ (8003340 <_close_r+0x1c>)
 8003328:	2300      	movs	r3, #0
 800332a:	4604      	mov	r4, r0
 800332c:	4608      	mov	r0, r1
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	f7fd fde7 	bl	8000f02 <_close>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d102      	bne.n	800333e <_close_r+0x1a>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	b103      	cbz	r3, 800333e <_close_r+0x1a>
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	2000026c 	.word	0x2000026c

08003344 <_lseek_r>:
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	4d07      	ldr	r5, [pc, #28]	@ (8003364 <_lseek_r+0x20>)
 8003348:	4604      	mov	r4, r0
 800334a:	4608      	mov	r0, r1
 800334c:	4611      	mov	r1, r2
 800334e:	2200      	movs	r2, #0
 8003350:	602a      	str	r2, [r5, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f7fd fdfc 	bl	8000f50 <_lseek>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d102      	bne.n	8003362 <_lseek_r+0x1e>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	b103      	cbz	r3, 8003362 <_lseek_r+0x1e>
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	2000026c 	.word	0x2000026c

08003368 <_read_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4d07      	ldr	r5, [pc, #28]	@ (8003388 <_read_r+0x20>)
 800336c:	4604      	mov	r4, r0
 800336e:	4608      	mov	r0, r1
 8003370:	4611      	mov	r1, r2
 8003372:	2200      	movs	r2, #0
 8003374:	602a      	str	r2, [r5, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	f7fd fd8a 	bl	8000e90 <_read>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	d102      	bne.n	8003386 <_read_r+0x1e>
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	b103      	cbz	r3, 8003386 <_read_r+0x1e>
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	bd38      	pop	{r3, r4, r5, pc}
 8003388:	2000026c 	.word	0x2000026c

0800338c <_write_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	4d07      	ldr	r5, [pc, #28]	@ (80033ac <_write_r+0x20>)
 8003390:	4604      	mov	r4, r0
 8003392:	4608      	mov	r0, r1
 8003394:	4611      	mov	r1, r2
 8003396:	2200      	movs	r2, #0
 8003398:	602a      	str	r2, [r5, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	f7fd fd95 	bl	8000eca <_write>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d102      	bne.n	80033aa <_write_r+0x1e>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	b103      	cbz	r3, 80033aa <_write_r+0x1e>
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	2000026c 	.word	0x2000026c

080033b0 <__errno>:
 80033b0:	4b01      	ldr	r3, [pc, #4]	@ (80033b8 <__errno+0x8>)
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000020 	.word	0x20000020

080033bc <__libc_init_array>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	4d0d      	ldr	r5, [pc, #52]	@ (80033f4 <__libc_init_array+0x38>)
 80033c0:	4c0d      	ldr	r4, [pc, #52]	@ (80033f8 <__libc_init_array+0x3c>)
 80033c2:	1b64      	subs	r4, r4, r5
 80033c4:	10a4      	asrs	r4, r4, #2
 80033c6:	2600      	movs	r6, #0
 80033c8:	42a6      	cmp	r6, r4
 80033ca:	d109      	bne.n	80033e0 <__libc_init_array+0x24>
 80033cc:	4d0b      	ldr	r5, [pc, #44]	@ (80033fc <__libc_init_array+0x40>)
 80033ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003400 <__libc_init_array+0x44>)
 80033d0:	f000 fd24 	bl	8003e1c <_init>
 80033d4:	1b64      	subs	r4, r4, r5
 80033d6:	10a4      	asrs	r4, r4, #2
 80033d8:	2600      	movs	r6, #0
 80033da:	42a6      	cmp	r6, r4
 80033dc:	d105      	bne.n	80033ea <__libc_init_array+0x2e>
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e4:	4798      	blx	r3
 80033e6:	3601      	adds	r6, #1
 80033e8:	e7ee      	b.n	80033c8 <__libc_init_array+0xc>
 80033ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ee:	4798      	blx	r3
 80033f0:	3601      	adds	r6, #1
 80033f2:	e7f2      	b.n	80033da <__libc_init_array+0x1e>
 80033f4:	08003f10 	.word	0x08003f10
 80033f8:	08003f10 	.word	0x08003f10
 80033fc:	08003f10 	.word	0x08003f10
 8003400:	08003f14 	.word	0x08003f14

08003404 <__retarget_lock_init_recursive>:
 8003404:	4770      	bx	lr

08003406 <__retarget_lock_acquire_recursive>:
 8003406:	4770      	bx	lr

08003408 <__retarget_lock_release_recursive>:
 8003408:	4770      	bx	lr
	...

0800340c <_free_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4605      	mov	r5, r0
 8003410:	2900      	cmp	r1, #0
 8003412:	d041      	beq.n	8003498 <_free_r+0x8c>
 8003414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003418:	1f0c      	subs	r4, r1, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfb8      	it	lt
 800341e:	18e4      	addlt	r4, r4, r3
 8003420:	f000 f8e0 	bl	80035e4 <__malloc_lock>
 8003424:	4a1d      	ldr	r2, [pc, #116]	@ (800349c <_free_r+0x90>)
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	b933      	cbnz	r3, 8003438 <_free_r+0x2c>
 800342a:	6063      	str	r3, [r4, #4]
 800342c:	6014      	str	r4, [r2, #0]
 800342e:	4628      	mov	r0, r5
 8003430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003434:	f000 b8dc 	b.w	80035f0 <__malloc_unlock>
 8003438:	42a3      	cmp	r3, r4
 800343a:	d908      	bls.n	800344e <_free_r+0x42>
 800343c:	6820      	ldr	r0, [r4, #0]
 800343e:	1821      	adds	r1, r4, r0
 8003440:	428b      	cmp	r3, r1
 8003442:	bf01      	itttt	eq
 8003444:	6819      	ldreq	r1, [r3, #0]
 8003446:	685b      	ldreq	r3, [r3, #4]
 8003448:	1809      	addeq	r1, r1, r0
 800344a:	6021      	streq	r1, [r4, #0]
 800344c:	e7ed      	b.n	800342a <_free_r+0x1e>
 800344e:	461a      	mov	r2, r3
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	b10b      	cbz	r3, 8003458 <_free_r+0x4c>
 8003454:	42a3      	cmp	r3, r4
 8003456:	d9fa      	bls.n	800344e <_free_r+0x42>
 8003458:	6811      	ldr	r1, [r2, #0]
 800345a:	1850      	adds	r0, r2, r1
 800345c:	42a0      	cmp	r0, r4
 800345e:	d10b      	bne.n	8003478 <_free_r+0x6c>
 8003460:	6820      	ldr	r0, [r4, #0]
 8003462:	4401      	add	r1, r0
 8003464:	1850      	adds	r0, r2, r1
 8003466:	4283      	cmp	r3, r0
 8003468:	6011      	str	r1, [r2, #0]
 800346a:	d1e0      	bne.n	800342e <_free_r+0x22>
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	6053      	str	r3, [r2, #4]
 8003472:	4408      	add	r0, r1
 8003474:	6010      	str	r0, [r2, #0]
 8003476:	e7da      	b.n	800342e <_free_r+0x22>
 8003478:	d902      	bls.n	8003480 <_free_r+0x74>
 800347a:	230c      	movs	r3, #12
 800347c:	602b      	str	r3, [r5, #0]
 800347e:	e7d6      	b.n	800342e <_free_r+0x22>
 8003480:	6820      	ldr	r0, [r4, #0]
 8003482:	1821      	adds	r1, r4, r0
 8003484:	428b      	cmp	r3, r1
 8003486:	bf04      	itt	eq
 8003488:	6819      	ldreq	r1, [r3, #0]
 800348a:	685b      	ldreq	r3, [r3, #4]
 800348c:	6063      	str	r3, [r4, #4]
 800348e:	bf04      	itt	eq
 8003490:	1809      	addeq	r1, r1, r0
 8003492:	6021      	streq	r1, [r4, #0]
 8003494:	6054      	str	r4, [r2, #4]
 8003496:	e7ca      	b.n	800342e <_free_r+0x22>
 8003498:	bd38      	pop	{r3, r4, r5, pc}
 800349a:	bf00      	nop
 800349c:	20000278 	.word	0x20000278

080034a0 <sbrk_aligned>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4e0f      	ldr	r6, [pc, #60]	@ (80034e0 <sbrk_aligned+0x40>)
 80034a4:	460c      	mov	r4, r1
 80034a6:	6831      	ldr	r1, [r6, #0]
 80034a8:	4605      	mov	r5, r0
 80034aa:	b911      	cbnz	r1, 80034b2 <sbrk_aligned+0x12>
 80034ac:	f000 fca6 	bl	8003dfc <_sbrk_r>
 80034b0:	6030      	str	r0, [r6, #0]
 80034b2:	4621      	mov	r1, r4
 80034b4:	4628      	mov	r0, r5
 80034b6:	f000 fca1 	bl	8003dfc <_sbrk_r>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	d103      	bne.n	80034c6 <sbrk_aligned+0x26>
 80034be:	f04f 34ff 	mov.w	r4, #4294967295
 80034c2:	4620      	mov	r0, r4
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	1cc4      	adds	r4, r0, #3
 80034c8:	f024 0403 	bic.w	r4, r4, #3
 80034cc:	42a0      	cmp	r0, r4
 80034ce:	d0f8      	beq.n	80034c2 <sbrk_aligned+0x22>
 80034d0:	1a21      	subs	r1, r4, r0
 80034d2:	4628      	mov	r0, r5
 80034d4:	f000 fc92 	bl	8003dfc <_sbrk_r>
 80034d8:	3001      	adds	r0, #1
 80034da:	d1f2      	bne.n	80034c2 <sbrk_aligned+0x22>
 80034dc:	e7ef      	b.n	80034be <sbrk_aligned+0x1e>
 80034de:	bf00      	nop
 80034e0:	20000274 	.word	0x20000274

080034e4 <_malloc_r>:
 80034e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034e8:	1ccd      	adds	r5, r1, #3
 80034ea:	f025 0503 	bic.w	r5, r5, #3
 80034ee:	3508      	adds	r5, #8
 80034f0:	2d0c      	cmp	r5, #12
 80034f2:	bf38      	it	cc
 80034f4:	250c      	movcc	r5, #12
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	4606      	mov	r6, r0
 80034fa:	db01      	blt.n	8003500 <_malloc_r+0x1c>
 80034fc:	42a9      	cmp	r1, r5
 80034fe:	d904      	bls.n	800350a <_malloc_r+0x26>
 8003500:	230c      	movs	r3, #12
 8003502:	6033      	str	r3, [r6, #0]
 8003504:	2000      	movs	r0, #0
 8003506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800350a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035e0 <_malloc_r+0xfc>
 800350e:	f000 f869 	bl	80035e4 <__malloc_lock>
 8003512:	f8d8 3000 	ldr.w	r3, [r8]
 8003516:	461c      	mov	r4, r3
 8003518:	bb44      	cbnz	r4, 800356c <_malloc_r+0x88>
 800351a:	4629      	mov	r1, r5
 800351c:	4630      	mov	r0, r6
 800351e:	f7ff ffbf 	bl	80034a0 <sbrk_aligned>
 8003522:	1c43      	adds	r3, r0, #1
 8003524:	4604      	mov	r4, r0
 8003526:	d158      	bne.n	80035da <_malloc_r+0xf6>
 8003528:	f8d8 4000 	ldr.w	r4, [r8]
 800352c:	4627      	mov	r7, r4
 800352e:	2f00      	cmp	r7, #0
 8003530:	d143      	bne.n	80035ba <_malloc_r+0xd6>
 8003532:	2c00      	cmp	r4, #0
 8003534:	d04b      	beq.n	80035ce <_malloc_r+0xea>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	4639      	mov	r1, r7
 800353a:	4630      	mov	r0, r6
 800353c:	eb04 0903 	add.w	r9, r4, r3
 8003540:	f000 fc5c 	bl	8003dfc <_sbrk_r>
 8003544:	4581      	cmp	r9, r0
 8003546:	d142      	bne.n	80035ce <_malloc_r+0xea>
 8003548:	6821      	ldr	r1, [r4, #0]
 800354a:	1a6d      	subs	r5, r5, r1
 800354c:	4629      	mov	r1, r5
 800354e:	4630      	mov	r0, r6
 8003550:	f7ff ffa6 	bl	80034a0 <sbrk_aligned>
 8003554:	3001      	adds	r0, #1
 8003556:	d03a      	beq.n	80035ce <_malloc_r+0xea>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	442b      	add	r3, r5
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	f8d8 3000 	ldr.w	r3, [r8]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	bb62      	cbnz	r2, 80035c0 <_malloc_r+0xdc>
 8003566:	f8c8 7000 	str.w	r7, [r8]
 800356a:	e00f      	b.n	800358c <_malloc_r+0xa8>
 800356c:	6822      	ldr	r2, [r4, #0]
 800356e:	1b52      	subs	r2, r2, r5
 8003570:	d420      	bmi.n	80035b4 <_malloc_r+0xd0>
 8003572:	2a0b      	cmp	r2, #11
 8003574:	d917      	bls.n	80035a6 <_malloc_r+0xc2>
 8003576:	1961      	adds	r1, r4, r5
 8003578:	42a3      	cmp	r3, r4
 800357a:	6025      	str	r5, [r4, #0]
 800357c:	bf18      	it	ne
 800357e:	6059      	strne	r1, [r3, #4]
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	bf08      	it	eq
 8003584:	f8c8 1000 	streq.w	r1, [r8]
 8003588:	5162      	str	r2, [r4, r5]
 800358a:	604b      	str	r3, [r1, #4]
 800358c:	4630      	mov	r0, r6
 800358e:	f000 f82f 	bl	80035f0 <__malloc_unlock>
 8003592:	f104 000b 	add.w	r0, r4, #11
 8003596:	1d23      	adds	r3, r4, #4
 8003598:	f020 0007 	bic.w	r0, r0, #7
 800359c:	1ac2      	subs	r2, r0, r3
 800359e:	bf1c      	itt	ne
 80035a0:	1a1b      	subne	r3, r3, r0
 80035a2:	50a3      	strne	r3, [r4, r2]
 80035a4:	e7af      	b.n	8003506 <_malloc_r+0x22>
 80035a6:	6862      	ldr	r2, [r4, #4]
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	bf0c      	ite	eq
 80035ac:	f8c8 2000 	streq.w	r2, [r8]
 80035b0:	605a      	strne	r2, [r3, #4]
 80035b2:	e7eb      	b.n	800358c <_malloc_r+0xa8>
 80035b4:	4623      	mov	r3, r4
 80035b6:	6864      	ldr	r4, [r4, #4]
 80035b8:	e7ae      	b.n	8003518 <_malloc_r+0x34>
 80035ba:	463c      	mov	r4, r7
 80035bc:	687f      	ldr	r7, [r7, #4]
 80035be:	e7b6      	b.n	800352e <_malloc_r+0x4a>
 80035c0:	461a      	mov	r2, r3
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	d1fb      	bne.n	80035c0 <_malloc_r+0xdc>
 80035c8:	2300      	movs	r3, #0
 80035ca:	6053      	str	r3, [r2, #4]
 80035cc:	e7de      	b.n	800358c <_malloc_r+0xa8>
 80035ce:	230c      	movs	r3, #12
 80035d0:	6033      	str	r3, [r6, #0]
 80035d2:	4630      	mov	r0, r6
 80035d4:	f000 f80c 	bl	80035f0 <__malloc_unlock>
 80035d8:	e794      	b.n	8003504 <_malloc_r+0x20>
 80035da:	6005      	str	r5, [r0, #0]
 80035dc:	e7d6      	b.n	800358c <_malloc_r+0xa8>
 80035de:	bf00      	nop
 80035e0:	20000278 	.word	0x20000278

080035e4 <__malloc_lock>:
 80035e4:	4801      	ldr	r0, [pc, #4]	@ (80035ec <__malloc_lock+0x8>)
 80035e6:	f7ff bf0e 	b.w	8003406 <__retarget_lock_acquire_recursive>
 80035ea:	bf00      	nop
 80035ec:	20000270 	.word	0x20000270

080035f0 <__malloc_unlock>:
 80035f0:	4801      	ldr	r0, [pc, #4]	@ (80035f8 <__malloc_unlock+0x8>)
 80035f2:	f7ff bf09 	b.w	8003408 <__retarget_lock_release_recursive>
 80035f6:	bf00      	nop
 80035f8:	20000270 	.word	0x20000270

080035fc <__sfputc_r>:
 80035fc:	6893      	ldr	r3, [r2, #8]
 80035fe:	3b01      	subs	r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	b410      	push	{r4}
 8003604:	6093      	str	r3, [r2, #8]
 8003606:	da08      	bge.n	800361a <__sfputc_r+0x1e>
 8003608:	6994      	ldr	r4, [r2, #24]
 800360a:	42a3      	cmp	r3, r4
 800360c:	db01      	blt.n	8003612 <__sfputc_r+0x16>
 800360e:	290a      	cmp	r1, #10
 8003610:	d103      	bne.n	800361a <__sfputc_r+0x1e>
 8003612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003616:	f7ff bde8 	b.w	80031ea <__swbuf_r>
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	1c58      	adds	r0, r3, #1
 800361e:	6010      	str	r0, [r2, #0]
 8003620:	7019      	strb	r1, [r3, #0]
 8003622:	4608      	mov	r0, r1
 8003624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003628:	4770      	bx	lr

0800362a <__sfputs_r>:
 800362a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362c:	4606      	mov	r6, r0
 800362e:	460f      	mov	r7, r1
 8003630:	4614      	mov	r4, r2
 8003632:	18d5      	adds	r5, r2, r3
 8003634:	42ac      	cmp	r4, r5
 8003636:	d101      	bne.n	800363c <__sfputs_r+0x12>
 8003638:	2000      	movs	r0, #0
 800363a:	e007      	b.n	800364c <__sfputs_r+0x22>
 800363c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003640:	463a      	mov	r2, r7
 8003642:	4630      	mov	r0, r6
 8003644:	f7ff ffda 	bl	80035fc <__sfputc_r>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d1f3      	bne.n	8003634 <__sfputs_r+0xa>
 800364c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003650 <_vfiprintf_r>:
 8003650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003654:	460d      	mov	r5, r1
 8003656:	b09d      	sub	sp, #116	@ 0x74
 8003658:	4614      	mov	r4, r2
 800365a:	4698      	mov	r8, r3
 800365c:	4606      	mov	r6, r0
 800365e:	b118      	cbz	r0, 8003668 <_vfiprintf_r+0x18>
 8003660:	6a03      	ldr	r3, [r0, #32]
 8003662:	b90b      	cbnz	r3, 8003668 <_vfiprintf_r+0x18>
 8003664:	f7ff fcd8 	bl	8003018 <__sinit>
 8003668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800366a:	07d9      	lsls	r1, r3, #31
 800366c:	d405      	bmi.n	800367a <_vfiprintf_r+0x2a>
 800366e:	89ab      	ldrh	r3, [r5, #12]
 8003670:	059a      	lsls	r2, r3, #22
 8003672:	d402      	bmi.n	800367a <_vfiprintf_r+0x2a>
 8003674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003676:	f7ff fec6 	bl	8003406 <__retarget_lock_acquire_recursive>
 800367a:	89ab      	ldrh	r3, [r5, #12]
 800367c:	071b      	lsls	r3, r3, #28
 800367e:	d501      	bpl.n	8003684 <_vfiprintf_r+0x34>
 8003680:	692b      	ldr	r3, [r5, #16]
 8003682:	b99b      	cbnz	r3, 80036ac <_vfiprintf_r+0x5c>
 8003684:	4629      	mov	r1, r5
 8003686:	4630      	mov	r0, r6
 8003688:	f7ff fdee 	bl	8003268 <__swsetup_r>
 800368c:	b170      	cbz	r0, 80036ac <_vfiprintf_r+0x5c>
 800368e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003690:	07dc      	lsls	r4, r3, #31
 8003692:	d504      	bpl.n	800369e <_vfiprintf_r+0x4e>
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	b01d      	add	sp, #116	@ 0x74
 800369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	0598      	lsls	r0, r3, #22
 80036a2:	d4f7      	bmi.n	8003694 <_vfiprintf_r+0x44>
 80036a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036a6:	f7ff feaf 	bl	8003408 <__retarget_lock_release_recursive>
 80036aa:	e7f3      	b.n	8003694 <_vfiprintf_r+0x44>
 80036ac:	2300      	movs	r3, #0
 80036ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80036b0:	2320      	movs	r3, #32
 80036b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80036ba:	2330      	movs	r3, #48	@ 0x30
 80036bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800386c <_vfiprintf_r+0x21c>
 80036c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036c4:	f04f 0901 	mov.w	r9, #1
 80036c8:	4623      	mov	r3, r4
 80036ca:	469a      	mov	sl, r3
 80036cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036d0:	b10a      	cbz	r2, 80036d6 <_vfiprintf_r+0x86>
 80036d2:	2a25      	cmp	r2, #37	@ 0x25
 80036d4:	d1f9      	bne.n	80036ca <_vfiprintf_r+0x7a>
 80036d6:	ebba 0b04 	subs.w	fp, sl, r4
 80036da:	d00b      	beq.n	80036f4 <_vfiprintf_r+0xa4>
 80036dc:	465b      	mov	r3, fp
 80036de:	4622      	mov	r2, r4
 80036e0:	4629      	mov	r1, r5
 80036e2:	4630      	mov	r0, r6
 80036e4:	f7ff ffa1 	bl	800362a <__sfputs_r>
 80036e8:	3001      	adds	r0, #1
 80036ea:	f000 80a7 	beq.w	800383c <_vfiprintf_r+0x1ec>
 80036ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036f0:	445a      	add	r2, fp
 80036f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80036f4:	f89a 3000 	ldrb.w	r3, [sl]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 809f 	beq.w	800383c <_vfiprintf_r+0x1ec>
 80036fe:	2300      	movs	r3, #0
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003708:	f10a 0a01 	add.w	sl, sl, #1
 800370c:	9304      	str	r3, [sp, #16]
 800370e:	9307      	str	r3, [sp, #28]
 8003710:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003714:	931a      	str	r3, [sp, #104]	@ 0x68
 8003716:	4654      	mov	r4, sl
 8003718:	2205      	movs	r2, #5
 800371a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800371e:	4853      	ldr	r0, [pc, #332]	@ (800386c <_vfiprintf_r+0x21c>)
 8003720:	f7fc fd66 	bl	80001f0 <memchr>
 8003724:	9a04      	ldr	r2, [sp, #16]
 8003726:	b9d8      	cbnz	r0, 8003760 <_vfiprintf_r+0x110>
 8003728:	06d1      	lsls	r1, r2, #27
 800372a:	bf44      	itt	mi
 800372c:	2320      	movmi	r3, #32
 800372e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003732:	0713      	lsls	r3, r2, #28
 8003734:	bf44      	itt	mi
 8003736:	232b      	movmi	r3, #43	@ 0x2b
 8003738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800373c:	f89a 3000 	ldrb.w	r3, [sl]
 8003740:	2b2a      	cmp	r3, #42	@ 0x2a
 8003742:	d015      	beq.n	8003770 <_vfiprintf_r+0x120>
 8003744:	9a07      	ldr	r2, [sp, #28]
 8003746:	4654      	mov	r4, sl
 8003748:	2000      	movs	r0, #0
 800374a:	f04f 0c0a 	mov.w	ip, #10
 800374e:	4621      	mov	r1, r4
 8003750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003754:	3b30      	subs	r3, #48	@ 0x30
 8003756:	2b09      	cmp	r3, #9
 8003758:	d94b      	bls.n	80037f2 <_vfiprintf_r+0x1a2>
 800375a:	b1b0      	cbz	r0, 800378a <_vfiprintf_r+0x13a>
 800375c:	9207      	str	r2, [sp, #28]
 800375e:	e014      	b.n	800378a <_vfiprintf_r+0x13a>
 8003760:	eba0 0308 	sub.w	r3, r0, r8
 8003764:	fa09 f303 	lsl.w	r3, r9, r3
 8003768:	4313      	orrs	r3, r2
 800376a:	9304      	str	r3, [sp, #16]
 800376c:	46a2      	mov	sl, r4
 800376e:	e7d2      	b.n	8003716 <_vfiprintf_r+0xc6>
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	1d19      	adds	r1, r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	9103      	str	r1, [sp, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	bfbb      	ittet	lt
 800377c:	425b      	neglt	r3, r3
 800377e:	f042 0202 	orrlt.w	r2, r2, #2
 8003782:	9307      	strge	r3, [sp, #28]
 8003784:	9307      	strlt	r3, [sp, #28]
 8003786:	bfb8      	it	lt
 8003788:	9204      	strlt	r2, [sp, #16]
 800378a:	7823      	ldrb	r3, [r4, #0]
 800378c:	2b2e      	cmp	r3, #46	@ 0x2e
 800378e:	d10a      	bne.n	80037a6 <_vfiprintf_r+0x156>
 8003790:	7863      	ldrb	r3, [r4, #1]
 8003792:	2b2a      	cmp	r3, #42	@ 0x2a
 8003794:	d132      	bne.n	80037fc <_vfiprintf_r+0x1ac>
 8003796:	9b03      	ldr	r3, [sp, #12]
 8003798:	1d1a      	adds	r2, r3, #4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	9203      	str	r2, [sp, #12]
 800379e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037a2:	3402      	adds	r4, #2
 80037a4:	9305      	str	r3, [sp, #20]
 80037a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800387c <_vfiprintf_r+0x22c>
 80037aa:	7821      	ldrb	r1, [r4, #0]
 80037ac:	2203      	movs	r2, #3
 80037ae:	4650      	mov	r0, sl
 80037b0:	f7fc fd1e 	bl	80001f0 <memchr>
 80037b4:	b138      	cbz	r0, 80037c6 <_vfiprintf_r+0x176>
 80037b6:	9b04      	ldr	r3, [sp, #16]
 80037b8:	eba0 000a 	sub.w	r0, r0, sl
 80037bc:	2240      	movs	r2, #64	@ 0x40
 80037be:	4082      	lsls	r2, r0
 80037c0:	4313      	orrs	r3, r2
 80037c2:	3401      	adds	r4, #1
 80037c4:	9304      	str	r3, [sp, #16]
 80037c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ca:	4829      	ldr	r0, [pc, #164]	@ (8003870 <_vfiprintf_r+0x220>)
 80037cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037d0:	2206      	movs	r2, #6
 80037d2:	f7fc fd0d 	bl	80001f0 <memchr>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d03f      	beq.n	800385a <_vfiprintf_r+0x20a>
 80037da:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <_vfiprintf_r+0x224>)
 80037dc:	bb1b      	cbnz	r3, 8003826 <_vfiprintf_r+0x1d6>
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	3307      	adds	r3, #7
 80037e2:	f023 0307 	bic.w	r3, r3, #7
 80037e6:	3308      	adds	r3, #8
 80037e8:	9303      	str	r3, [sp, #12]
 80037ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037ec:	443b      	add	r3, r7
 80037ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80037f0:	e76a      	b.n	80036c8 <_vfiprintf_r+0x78>
 80037f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037f6:	460c      	mov	r4, r1
 80037f8:	2001      	movs	r0, #1
 80037fa:	e7a8      	b.n	800374e <_vfiprintf_r+0xfe>
 80037fc:	2300      	movs	r3, #0
 80037fe:	3401      	adds	r4, #1
 8003800:	9305      	str	r3, [sp, #20]
 8003802:	4619      	mov	r1, r3
 8003804:	f04f 0c0a 	mov.w	ip, #10
 8003808:	4620      	mov	r0, r4
 800380a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800380e:	3a30      	subs	r2, #48	@ 0x30
 8003810:	2a09      	cmp	r2, #9
 8003812:	d903      	bls.n	800381c <_vfiprintf_r+0x1cc>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0c6      	beq.n	80037a6 <_vfiprintf_r+0x156>
 8003818:	9105      	str	r1, [sp, #20]
 800381a:	e7c4      	b.n	80037a6 <_vfiprintf_r+0x156>
 800381c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003820:	4604      	mov	r4, r0
 8003822:	2301      	movs	r3, #1
 8003824:	e7f0      	b.n	8003808 <_vfiprintf_r+0x1b8>
 8003826:	ab03      	add	r3, sp, #12
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	462a      	mov	r2, r5
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <_vfiprintf_r+0x228>)
 800382e:	a904      	add	r1, sp, #16
 8003830:	4630      	mov	r0, r6
 8003832:	f3af 8000 	nop.w
 8003836:	4607      	mov	r7, r0
 8003838:	1c78      	adds	r0, r7, #1
 800383a:	d1d6      	bne.n	80037ea <_vfiprintf_r+0x19a>
 800383c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800383e:	07d9      	lsls	r1, r3, #31
 8003840:	d405      	bmi.n	800384e <_vfiprintf_r+0x1fe>
 8003842:	89ab      	ldrh	r3, [r5, #12]
 8003844:	059a      	lsls	r2, r3, #22
 8003846:	d402      	bmi.n	800384e <_vfiprintf_r+0x1fe>
 8003848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800384a:	f7ff fddd 	bl	8003408 <__retarget_lock_release_recursive>
 800384e:	89ab      	ldrh	r3, [r5, #12]
 8003850:	065b      	lsls	r3, r3, #25
 8003852:	f53f af1f 	bmi.w	8003694 <_vfiprintf_r+0x44>
 8003856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003858:	e71e      	b.n	8003698 <_vfiprintf_r+0x48>
 800385a:	ab03      	add	r3, sp, #12
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	462a      	mov	r2, r5
 8003860:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <_vfiprintf_r+0x228>)
 8003862:	a904      	add	r1, sp, #16
 8003864:	4630      	mov	r0, r6
 8003866:	f000 f879 	bl	800395c <_printf_i>
 800386a:	e7e4      	b.n	8003836 <_vfiprintf_r+0x1e6>
 800386c:	08003ed4 	.word	0x08003ed4
 8003870:	08003ede 	.word	0x08003ede
 8003874:	00000000 	.word	0x00000000
 8003878:	0800362b 	.word	0x0800362b
 800387c:	08003eda 	.word	0x08003eda

08003880 <_printf_common>:
 8003880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003884:	4616      	mov	r6, r2
 8003886:	4698      	mov	r8, r3
 8003888:	688a      	ldr	r2, [r1, #8]
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003890:	4293      	cmp	r3, r2
 8003892:	bfb8      	it	lt
 8003894:	4613      	movlt	r3, r2
 8003896:	6033      	str	r3, [r6, #0]
 8003898:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800389c:	4607      	mov	r7, r0
 800389e:	460c      	mov	r4, r1
 80038a0:	b10a      	cbz	r2, 80038a6 <_printf_common+0x26>
 80038a2:	3301      	adds	r3, #1
 80038a4:	6033      	str	r3, [r6, #0]
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	0699      	lsls	r1, r3, #26
 80038aa:	bf42      	ittt	mi
 80038ac:	6833      	ldrmi	r3, [r6, #0]
 80038ae:	3302      	addmi	r3, #2
 80038b0:	6033      	strmi	r3, [r6, #0]
 80038b2:	6825      	ldr	r5, [r4, #0]
 80038b4:	f015 0506 	ands.w	r5, r5, #6
 80038b8:	d106      	bne.n	80038c8 <_printf_common+0x48>
 80038ba:	f104 0a19 	add.w	sl, r4, #25
 80038be:	68e3      	ldr	r3, [r4, #12]
 80038c0:	6832      	ldr	r2, [r6, #0]
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	42ab      	cmp	r3, r5
 80038c6:	dc26      	bgt.n	8003916 <_printf_common+0x96>
 80038c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	3b00      	subs	r3, #0
 80038d0:	bf18      	it	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	0692      	lsls	r2, r2, #26
 80038d6:	d42b      	bmi.n	8003930 <_printf_common+0xb0>
 80038d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038dc:	4641      	mov	r1, r8
 80038de:	4638      	mov	r0, r7
 80038e0:	47c8      	blx	r9
 80038e2:	3001      	adds	r0, #1
 80038e4:	d01e      	beq.n	8003924 <_printf_common+0xa4>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	6922      	ldr	r2, [r4, #16]
 80038ea:	f003 0306 	and.w	r3, r3, #6
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	bf02      	ittt	eq
 80038f2:	68e5      	ldreq	r5, [r4, #12]
 80038f4:	6833      	ldreq	r3, [r6, #0]
 80038f6:	1aed      	subeq	r5, r5, r3
 80038f8:	68a3      	ldr	r3, [r4, #8]
 80038fa:	bf0c      	ite	eq
 80038fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003900:	2500      	movne	r5, #0
 8003902:	4293      	cmp	r3, r2
 8003904:	bfc4      	itt	gt
 8003906:	1a9b      	subgt	r3, r3, r2
 8003908:	18ed      	addgt	r5, r5, r3
 800390a:	2600      	movs	r6, #0
 800390c:	341a      	adds	r4, #26
 800390e:	42b5      	cmp	r5, r6
 8003910:	d11a      	bne.n	8003948 <_printf_common+0xc8>
 8003912:	2000      	movs	r0, #0
 8003914:	e008      	b.n	8003928 <_printf_common+0xa8>
 8003916:	2301      	movs	r3, #1
 8003918:	4652      	mov	r2, sl
 800391a:	4641      	mov	r1, r8
 800391c:	4638      	mov	r0, r7
 800391e:	47c8      	blx	r9
 8003920:	3001      	adds	r0, #1
 8003922:	d103      	bne.n	800392c <_printf_common+0xac>
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392c:	3501      	adds	r5, #1
 800392e:	e7c6      	b.n	80038be <_printf_common+0x3e>
 8003930:	18e1      	adds	r1, r4, r3
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	2030      	movs	r0, #48	@ 0x30
 8003936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800393a:	4422      	add	r2, r4
 800393c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003944:	3302      	adds	r3, #2
 8003946:	e7c7      	b.n	80038d8 <_printf_common+0x58>
 8003948:	2301      	movs	r3, #1
 800394a:	4622      	mov	r2, r4
 800394c:	4641      	mov	r1, r8
 800394e:	4638      	mov	r0, r7
 8003950:	47c8      	blx	r9
 8003952:	3001      	adds	r0, #1
 8003954:	d0e6      	beq.n	8003924 <_printf_common+0xa4>
 8003956:	3601      	adds	r6, #1
 8003958:	e7d9      	b.n	800390e <_printf_common+0x8e>
	...

0800395c <_printf_i>:
 800395c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	7e0f      	ldrb	r7, [r1, #24]
 8003962:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003964:	2f78      	cmp	r7, #120	@ 0x78
 8003966:	4691      	mov	r9, r2
 8003968:	4680      	mov	r8, r0
 800396a:	460c      	mov	r4, r1
 800396c:	469a      	mov	sl, r3
 800396e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003972:	d807      	bhi.n	8003984 <_printf_i+0x28>
 8003974:	2f62      	cmp	r7, #98	@ 0x62
 8003976:	d80a      	bhi.n	800398e <_printf_i+0x32>
 8003978:	2f00      	cmp	r7, #0
 800397a:	f000 80d2 	beq.w	8003b22 <_printf_i+0x1c6>
 800397e:	2f58      	cmp	r7, #88	@ 0x58
 8003980:	f000 80b9 	beq.w	8003af6 <_printf_i+0x19a>
 8003984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800398c:	e03a      	b.n	8003a04 <_printf_i+0xa8>
 800398e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003992:	2b15      	cmp	r3, #21
 8003994:	d8f6      	bhi.n	8003984 <_printf_i+0x28>
 8003996:	a101      	add	r1, pc, #4	@ (adr r1, 800399c <_printf_i+0x40>)
 8003998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800399c:	080039f5 	.word	0x080039f5
 80039a0:	08003a09 	.word	0x08003a09
 80039a4:	08003985 	.word	0x08003985
 80039a8:	08003985 	.word	0x08003985
 80039ac:	08003985 	.word	0x08003985
 80039b0:	08003985 	.word	0x08003985
 80039b4:	08003a09 	.word	0x08003a09
 80039b8:	08003985 	.word	0x08003985
 80039bc:	08003985 	.word	0x08003985
 80039c0:	08003985 	.word	0x08003985
 80039c4:	08003985 	.word	0x08003985
 80039c8:	08003b09 	.word	0x08003b09
 80039cc:	08003a33 	.word	0x08003a33
 80039d0:	08003ac3 	.word	0x08003ac3
 80039d4:	08003985 	.word	0x08003985
 80039d8:	08003985 	.word	0x08003985
 80039dc:	08003b2b 	.word	0x08003b2b
 80039e0:	08003985 	.word	0x08003985
 80039e4:	08003a33 	.word	0x08003a33
 80039e8:	08003985 	.word	0x08003985
 80039ec:	08003985 	.word	0x08003985
 80039f0:	08003acb 	.word	0x08003acb
 80039f4:	6833      	ldr	r3, [r6, #0]
 80039f6:	1d1a      	adds	r2, r3, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6032      	str	r2, [r6, #0]
 80039fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a04:	2301      	movs	r3, #1
 8003a06:	e09d      	b.n	8003b44 <_printf_i+0x1e8>
 8003a08:	6833      	ldr	r3, [r6, #0]
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1d19      	adds	r1, r3, #4
 8003a0e:	6031      	str	r1, [r6, #0]
 8003a10:	0606      	lsls	r6, r0, #24
 8003a12:	d501      	bpl.n	8003a18 <_printf_i+0xbc>
 8003a14:	681d      	ldr	r5, [r3, #0]
 8003a16:	e003      	b.n	8003a20 <_printf_i+0xc4>
 8003a18:	0645      	lsls	r5, r0, #25
 8003a1a:	d5fb      	bpl.n	8003a14 <_printf_i+0xb8>
 8003a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	da03      	bge.n	8003a2c <_printf_i+0xd0>
 8003a24:	232d      	movs	r3, #45	@ 0x2d
 8003a26:	426d      	negs	r5, r5
 8003a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a2c:	4859      	ldr	r0, [pc, #356]	@ (8003b94 <_printf_i+0x238>)
 8003a2e:	230a      	movs	r3, #10
 8003a30:	e011      	b.n	8003a56 <_printf_i+0xfa>
 8003a32:	6821      	ldr	r1, [r4, #0]
 8003a34:	6833      	ldr	r3, [r6, #0]
 8003a36:	0608      	lsls	r0, r1, #24
 8003a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a3c:	d402      	bmi.n	8003a44 <_printf_i+0xe8>
 8003a3e:	0649      	lsls	r1, r1, #25
 8003a40:	bf48      	it	mi
 8003a42:	b2ad      	uxthmi	r5, r5
 8003a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a46:	4853      	ldr	r0, [pc, #332]	@ (8003b94 <_printf_i+0x238>)
 8003a48:	6033      	str	r3, [r6, #0]
 8003a4a:	bf14      	ite	ne
 8003a4c:	230a      	movne	r3, #10
 8003a4e:	2308      	moveq	r3, #8
 8003a50:	2100      	movs	r1, #0
 8003a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a56:	6866      	ldr	r6, [r4, #4]
 8003a58:	60a6      	str	r6, [r4, #8]
 8003a5a:	2e00      	cmp	r6, #0
 8003a5c:	bfa2      	ittt	ge
 8003a5e:	6821      	ldrge	r1, [r4, #0]
 8003a60:	f021 0104 	bicge.w	r1, r1, #4
 8003a64:	6021      	strge	r1, [r4, #0]
 8003a66:	b90d      	cbnz	r5, 8003a6c <_printf_i+0x110>
 8003a68:	2e00      	cmp	r6, #0
 8003a6a:	d04b      	beq.n	8003b04 <_printf_i+0x1a8>
 8003a6c:	4616      	mov	r6, r2
 8003a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a72:	fb03 5711 	mls	r7, r3, r1, r5
 8003a76:	5dc7      	ldrb	r7, [r0, r7]
 8003a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a7c:	462f      	mov	r7, r5
 8003a7e:	42bb      	cmp	r3, r7
 8003a80:	460d      	mov	r5, r1
 8003a82:	d9f4      	bls.n	8003a6e <_printf_i+0x112>
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d10b      	bne.n	8003aa0 <_printf_i+0x144>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	07df      	lsls	r7, r3, #31
 8003a8c:	d508      	bpl.n	8003aa0 <_printf_i+0x144>
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	6861      	ldr	r1, [r4, #4]
 8003a92:	4299      	cmp	r1, r3
 8003a94:	bfde      	ittt	le
 8003a96:	2330      	movle	r3, #48	@ 0x30
 8003a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003aa0:	1b92      	subs	r2, r2, r6
 8003aa2:	6122      	str	r2, [r4, #16]
 8003aa4:	f8cd a000 	str.w	sl, [sp]
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	aa03      	add	r2, sp, #12
 8003aac:	4621      	mov	r1, r4
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7ff fee6 	bl	8003880 <_printf_common>
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d14a      	bne.n	8003b4e <_printf_i+0x1f2>
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	b004      	add	sp, #16
 8003abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	4833      	ldr	r0, [pc, #204]	@ (8003b98 <_printf_i+0x23c>)
 8003acc:	2778      	movs	r7, #120	@ 0x78
 8003ace:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	6831      	ldr	r1, [r6, #0]
 8003ad6:	061f      	lsls	r7, r3, #24
 8003ad8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003adc:	d402      	bmi.n	8003ae4 <_printf_i+0x188>
 8003ade:	065f      	lsls	r7, r3, #25
 8003ae0:	bf48      	it	mi
 8003ae2:	b2ad      	uxthmi	r5, r5
 8003ae4:	6031      	str	r1, [r6, #0]
 8003ae6:	07d9      	lsls	r1, r3, #31
 8003ae8:	bf44      	itt	mi
 8003aea:	f043 0320 	orrmi.w	r3, r3, #32
 8003aee:	6023      	strmi	r3, [r4, #0]
 8003af0:	b11d      	cbz	r5, 8003afa <_printf_i+0x19e>
 8003af2:	2310      	movs	r3, #16
 8003af4:	e7ac      	b.n	8003a50 <_printf_i+0xf4>
 8003af6:	4827      	ldr	r0, [pc, #156]	@ (8003b94 <_printf_i+0x238>)
 8003af8:	e7e9      	b.n	8003ace <_printf_i+0x172>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	f023 0320 	bic.w	r3, r3, #32
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	e7f6      	b.n	8003af2 <_printf_i+0x196>
 8003b04:	4616      	mov	r6, r2
 8003b06:	e7bd      	b.n	8003a84 <_printf_i+0x128>
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	6825      	ldr	r5, [r4, #0]
 8003b0c:	6961      	ldr	r1, [r4, #20]
 8003b0e:	1d18      	adds	r0, r3, #4
 8003b10:	6030      	str	r0, [r6, #0]
 8003b12:	062e      	lsls	r6, r5, #24
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	d501      	bpl.n	8003b1c <_printf_i+0x1c0>
 8003b18:	6019      	str	r1, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <_printf_i+0x1c6>
 8003b1c:	0668      	lsls	r0, r5, #25
 8003b1e:	d5fb      	bpl.n	8003b18 <_printf_i+0x1bc>
 8003b20:	8019      	strh	r1, [r3, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	6123      	str	r3, [r4, #16]
 8003b26:	4616      	mov	r6, r2
 8003b28:	e7bc      	b.n	8003aa4 <_printf_i+0x148>
 8003b2a:	6833      	ldr	r3, [r6, #0]
 8003b2c:	1d1a      	adds	r2, r3, #4
 8003b2e:	6032      	str	r2, [r6, #0]
 8003b30:	681e      	ldr	r6, [r3, #0]
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	2100      	movs	r1, #0
 8003b36:	4630      	mov	r0, r6
 8003b38:	f7fc fb5a 	bl	80001f0 <memchr>
 8003b3c:	b108      	cbz	r0, 8003b42 <_printf_i+0x1e6>
 8003b3e:	1b80      	subs	r0, r0, r6
 8003b40:	6060      	str	r0, [r4, #4]
 8003b42:	6863      	ldr	r3, [r4, #4]
 8003b44:	6123      	str	r3, [r4, #16]
 8003b46:	2300      	movs	r3, #0
 8003b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b4c:	e7aa      	b.n	8003aa4 <_printf_i+0x148>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	4632      	mov	r2, r6
 8003b52:	4649      	mov	r1, r9
 8003b54:	4640      	mov	r0, r8
 8003b56:	47d0      	blx	sl
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d0ad      	beq.n	8003ab8 <_printf_i+0x15c>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	079b      	lsls	r3, r3, #30
 8003b60:	d413      	bmi.n	8003b8a <_printf_i+0x22e>
 8003b62:	68e0      	ldr	r0, [r4, #12]
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	4298      	cmp	r0, r3
 8003b68:	bfb8      	it	lt
 8003b6a:	4618      	movlt	r0, r3
 8003b6c:	e7a6      	b.n	8003abc <_printf_i+0x160>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4632      	mov	r2, r6
 8003b72:	4649      	mov	r1, r9
 8003b74:	4640      	mov	r0, r8
 8003b76:	47d0      	blx	sl
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d09d      	beq.n	8003ab8 <_printf_i+0x15c>
 8003b7c:	3501      	adds	r5, #1
 8003b7e:	68e3      	ldr	r3, [r4, #12]
 8003b80:	9903      	ldr	r1, [sp, #12]
 8003b82:	1a5b      	subs	r3, r3, r1
 8003b84:	42ab      	cmp	r3, r5
 8003b86:	dcf2      	bgt.n	8003b6e <_printf_i+0x212>
 8003b88:	e7eb      	b.n	8003b62 <_printf_i+0x206>
 8003b8a:	2500      	movs	r5, #0
 8003b8c:	f104 0619 	add.w	r6, r4, #25
 8003b90:	e7f5      	b.n	8003b7e <_printf_i+0x222>
 8003b92:	bf00      	nop
 8003b94:	08003ee5 	.word	0x08003ee5
 8003b98:	08003ef6 	.word	0x08003ef6

08003b9c <__sflush_r>:
 8003b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba4:	0716      	lsls	r6, r2, #28
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	d454      	bmi.n	8003c56 <__sflush_r+0xba>
 8003bac:	684b      	ldr	r3, [r1, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	dc02      	bgt.n	8003bb8 <__sflush_r+0x1c>
 8003bb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	dd48      	ble.n	8003c4a <__sflush_r+0xae>
 8003bb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bba:	2e00      	cmp	r6, #0
 8003bbc:	d045      	beq.n	8003c4a <__sflush_r+0xae>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003bc4:	682f      	ldr	r7, [r5, #0]
 8003bc6:	6a21      	ldr	r1, [r4, #32]
 8003bc8:	602b      	str	r3, [r5, #0]
 8003bca:	d030      	beq.n	8003c2e <__sflush_r+0x92>
 8003bcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	0759      	lsls	r1, r3, #29
 8003bd2:	d505      	bpl.n	8003be0 <__sflush_r+0x44>
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	1ad2      	subs	r2, r2, r3
 8003bd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bda:	b10b      	cbz	r3, 8003be0 <__sflush_r+0x44>
 8003bdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	2300      	movs	r3, #0
 8003be2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003be4:	6a21      	ldr	r1, [r4, #32]
 8003be6:	4628      	mov	r0, r5
 8003be8:	47b0      	blx	r6
 8003bea:	1c43      	adds	r3, r0, #1
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	d106      	bne.n	8003bfe <__sflush_r+0x62>
 8003bf0:	6829      	ldr	r1, [r5, #0]
 8003bf2:	291d      	cmp	r1, #29
 8003bf4:	d82b      	bhi.n	8003c4e <__sflush_r+0xb2>
 8003bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca0 <__sflush_r+0x104>)
 8003bf8:	410a      	asrs	r2, r1
 8003bfa:	07d6      	lsls	r6, r2, #31
 8003bfc:	d427      	bmi.n	8003c4e <__sflush_r+0xb2>
 8003bfe:	2200      	movs	r2, #0
 8003c00:	6062      	str	r2, [r4, #4]
 8003c02:	04d9      	lsls	r1, r3, #19
 8003c04:	6922      	ldr	r2, [r4, #16]
 8003c06:	6022      	str	r2, [r4, #0]
 8003c08:	d504      	bpl.n	8003c14 <__sflush_r+0x78>
 8003c0a:	1c42      	adds	r2, r0, #1
 8003c0c:	d101      	bne.n	8003c12 <__sflush_r+0x76>
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	b903      	cbnz	r3, 8003c14 <__sflush_r+0x78>
 8003c12:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c16:	602f      	str	r7, [r5, #0]
 8003c18:	b1b9      	cbz	r1, 8003c4a <__sflush_r+0xae>
 8003c1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c1e:	4299      	cmp	r1, r3
 8003c20:	d002      	beq.n	8003c28 <__sflush_r+0x8c>
 8003c22:	4628      	mov	r0, r5
 8003c24:	f7ff fbf2 	bl	800340c <_free_r>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c2c:	e00d      	b.n	8003c4a <__sflush_r+0xae>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4628      	mov	r0, r5
 8003c32:	47b0      	blx	r6
 8003c34:	4602      	mov	r2, r0
 8003c36:	1c50      	adds	r0, r2, #1
 8003c38:	d1c9      	bne.n	8003bce <__sflush_r+0x32>
 8003c3a:	682b      	ldr	r3, [r5, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0c6      	beq.n	8003bce <__sflush_r+0x32>
 8003c40:	2b1d      	cmp	r3, #29
 8003c42:	d001      	beq.n	8003c48 <__sflush_r+0xac>
 8003c44:	2b16      	cmp	r3, #22
 8003c46:	d11e      	bne.n	8003c86 <__sflush_r+0xea>
 8003c48:	602f      	str	r7, [r5, #0]
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e022      	b.n	8003c94 <__sflush_r+0xf8>
 8003c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c52:	b21b      	sxth	r3, r3
 8003c54:	e01b      	b.n	8003c8e <__sflush_r+0xf2>
 8003c56:	690f      	ldr	r7, [r1, #16]
 8003c58:	2f00      	cmp	r7, #0
 8003c5a:	d0f6      	beq.n	8003c4a <__sflush_r+0xae>
 8003c5c:	0793      	lsls	r3, r2, #30
 8003c5e:	680e      	ldr	r6, [r1, #0]
 8003c60:	bf08      	it	eq
 8003c62:	694b      	ldreq	r3, [r1, #20]
 8003c64:	600f      	str	r7, [r1, #0]
 8003c66:	bf18      	it	ne
 8003c68:	2300      	movne	r3, #0
 8003c6a:	eba6 0807 	sub.w	r8, r6, r7
 8003c6e:	608b      	str	r3, [r1, #8]
 8003c70:	f1b8 0f00 	cmp.w	r8, #0
 8003c74:	dde9      	ble.n	8003c4a <__sflush_r+0xae>
 8003c76:	6a21      	ldr	r1, [r4, #32]
 8003c78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c7a:	4643      	mov	r3, r8
 8003c7c:	463a      	mov	r2, r7
 8003c7e:	4628      	mov	r0, r5
 8003c80:	47b0      	blx	r6
 8003c82:	2800      	cmp	r0, #0
 8003c84:	dc08      	bgt.n	8003c98 <__sflush_r+0xfc>
 8003c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c98:	4407      	add	r7, r0
 8003c9a:	eba8 0800 	sub.w	r8, r8, r0
 8003c9e:	e7e7      	b.n	8003c70 <__sflush_r+0xd4>
 8003ca0:	dfbffffe 	.word	0xdfbffffe

08003ca4 <_fflush_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	690b      	ldr	r3, [r1, #16]
 8003ca8:	4605      	mov	r5, r0
 8003caa:	460c      	mov	r4, r1
 8003cac:	b913      	cbnz	r3, 8003cb4 <_fflush_r+0x10>
 8003cae:	2500      	movs	r5, #0
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
 8003cb4:	b118      	cbz	r0, 8003cbe <_fflush_r+0x1a>
 8003cb6:	6a03      	ldr	r3, [r0, #32]
 8003cb8:	b90b      	cbnz	r3, 8003cbe <_fflush_r+0x1a>
 8003cba:	f7ff f9ad 	bl	8003018 <__sinit>
 8003cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f3      	beq.n	8003cae <_fflush_r+0xa>
 8003cc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cc8:	07d0      	lsls	r0, r2, #31
 8003cca:	d404      	bmi.n	8003cd6 <_fflush_r+0x32>
 8003ccc:	0599      	lsls	r1, r3, #22
 8003cce:	d402      	bmi.n	8003cd6 <_fflush_r+0x32>
 8003cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cd2:	f7ff fb98 	bl	8003406 <__retarget_lock_acquire_recursive>
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	4621      	mov	r1, r4
 8003cda:	f7ff ff5f 	bl	8003b9c <__sflush_r>
 8003cde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ce0:	07da      	lsls	r2, r3, #31
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	d4e4      	bmi.n	8003cb0 <_fflush_r+0xc>
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	059b      	lsls	r3, r3, #22
 8003cea:	d4e1      	bmi.n	8003cb0 <_fflush_r+0xc>
 8003cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cee:	f7ff fb8b 	bl	8003408 <__retarget_lock_release_recursive>
 8003cf2:	e7dd      	b.n	8003cb0 <_fflush_r+0xc>

08003cf4 <__swhatbuf_r>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfc:	2900      	cmp	r1, #0
 8003cfe:	b096      	sub	sp, #88	@ 0x58
 8003d00:	4615      	mov	r5, r2
 8003d02:	461e      	mov	r6, r3
 8003d04:	da0d      	bge.n	8003d22 <__swhatbuf_r+0x2e>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	bf14      	ite	ne
 8003d12:	2340      	movne	r3, #64	@ 0x40
 8003d14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d18:	2000      	movs	r0, #0
 8003d1a:	6031      	str	r1, [r6, #0]
 8003d1c:	602b      	str	r3, [r5, #0]
 8003d1e:	b016      	add	sp, #88	@ 0x58
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
 8003d22:	466a      	mov	r2, sp
 8003d24:	f000 f848 	bl	8003db8 <_fstat_r>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	dbec      	blt.n	8003d06 <__swhatbuf_r+0x12>
 8003d2c:	9901      	ldr	r1, [sp, #4]
 8003d2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d36:	4259      	negs	r1, r3
 8003d38:	4159      	adcs	r1, r3
 8003d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d3e:	e7eb      	b.n	8003d18 <__swhatbuf_r+0x24>

08003d40 <__smakebuf_r>:
 8003d40:	898b      	ldrh	r3, [r1, #12]
 8003d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d44:	079d      	lsls	r5, r3, #30
 8003d46:	4606      	mov	r6, r0
 8003d48:	460c      	mov	r4, r1
 8003d4a:	d507      	bpl.n	8003d5c <__smakebuf_r+0x1c>
 8003d4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	6123      	str	r3, [r4, #16]
 8003d54:	2301      	movs	r3, #1
 8003d56:	6163      	str	r3, [r4, #20]
 8003d58:	b003      	add	sp, #12
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d5c:	ab01      	add	r3, sp, #4
 8003d5e:	466a      	mov	r2, sp
 8003d60:	f7ff ffc8 	bl	8003cf4 <__swhatbuf_r>
 8003d64:	9f00      	ldr	r7, [sp, #0]
 8003d66:	4605      	mov	r5, r0
 8003d68:	4639      	mov	r1, r7
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f7ff fbba 	bl	80034e4 <_malloc_r>
 8003d70:	b948      	cbnz	r0, 8003d86 <__smakebuf_r+0x46>
 8003d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d76:	059a      	lsls	r2, r3, #22
 8003d78:	d4ee      	bmi.n	8003d58 <__smakebuf_r+0x18>
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	f043 0302 	orr.w	r3, r3, #2
 8003d82:	81a3      	strh	r3, [r4, #12]
 8003d84:	e7e2      	b.n	8003d4c <__smakebuf_r+0xc>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	6020      	str	r0, [r4, #0]
 8003d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	9b01      	ldr	r3, [sp, #4]
 8003d92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d96:	b15b      	cbz	r3, 8003db0 <__smakebuf_r+0x70>
 8003d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f81d 	bl	8003ddc <_isatty_r>
 8003da2:	b128      	cbz	r0, 8003db0 <__smakebuf_r+0x70>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	431d      	orrs	r5, r3
 8003db4:	81a5      	strh	r5, [r4, #12]
 8003db6:	e7cf      	b.n	8003d58 <__smakebuf_r+0x18>

08003db8 <_fstat_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d07      	ldr	r5, [pc, #28]	@ (8003dd8 <_fstat_r+0x20>)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	602b      	str	r3, [r5, #0]
 8003dc6:	f7fd f8a8 	bl	8000f1a <_fstat>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	d102      	bne.n	8003dd4 <_fstat_r+0x1c>
 8003dce:	682b      	ldr	r3, [r5, #0]
 8003dd0:	b103      	cbz	r3, 8003dd4 <_fstat_r+0x1c>
 8003dd2:	6023      	str	r3, [r4, #0]
 8003dd4:	bd38      	pop	{r3, r4, r5, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000026c 	.word	0x2000026c

08003ddc <_isatty_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4d06      	ldr	r5, [pc, #24]	@ (8003df8 <_isatty_r+0x1c>)
 8003de0:	2300      	movs	r3, #0
 8003de2:	4604      	mov	r4, r0
 8003de4:	4608      	mov	r0, r1
 8003de6:	602b      	str	r3, [r5, #0]
 8003de8:	f7fd f8a7 	bl	8000f3a <_isatty>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_isatty_r+0x1a>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_isatty_r+0x1a>
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	2000026c 	.word	0x2000026c

08003dfc <_sbrk_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4d06      	ldr	r5, [pc, #24]	@ (8003e18 <_sbrk_r+0x1c>)
 8003e00:	2300      	movs	r3, #0
 8003e02:	4604      	mov	r4, r0
 8003e04:	4608      	mov	r0, r1
 8003e06:	602b      	str	r3, [r5, #0]
 8003e08:	f7fd f8b0 	bl	8000f6c <_sbrk>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_sbrk_r+0x1a>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_sbrk_r+0x1a>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	2000026c 	.word	0x2000026c

08003e1c <_init>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr

08003e28 <_fini>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr
