
CV09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008268  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08008418  08008418  00009418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008848  08008848  0000a11c  2**0
                  CONTENTS
  4 .ARM          00000008  08008848  08008848  00009848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008850  08008850  0000a11c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008850  08008850  00009850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08008858  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a11c  2**0
                  CONTENTS
 10 .bss          00000a48  2000011c  2000011c  0000a11c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b64  20000b64  0000a11c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a11c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105b1  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7b  00000000  00000000  0001a6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  0001d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f1  00000000  00000000  0001dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253a7  00000000  00000000  0001e991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b9a  00000000  00000000  00043d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6196  00000000  00000000  000558d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ba68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000385c  00000000  00000000  0012baac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0012f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008400 	.word	0x08008400

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008400 	.word	0x08008400

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b96a 	b.w	8000d18 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9d08      	ldr	r5, [sp, #32]
 8000a62:	460c      	mov	r4, r1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d14e      	bne.n	8000b06 <__udivmoddi4+0xaa>
 8000a68:	4694      	mov	ip, r2
 8000a6a:	458c      	cmp	ip, r1
 8000a6c:	4686      	mov	lr, r0
 8000a6e:	fab2 f282 	clz	r2, r2
 8000a72:	d962      	bls.n	8000b3a <__udivmoddi4+0xde>
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0320 	rsb	r3, r2, #32
 8000a7a:	4091      	lsls	r1, r2
 8000a7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a84:	4319      	orrs	r1, r3
 8000a86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8e:	fa1f f68c 	uxth.w	r6, ip
 8000a92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa2:	fb04 f106 	mul.w	r1, r4, r6
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x64>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ab2:	f080 8112 	bcs.w	8000cda <__udivmoddi4+0x27e>
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	f240 810f 	bls.w	8000cda <__udivmoddi4+0x27e>
 8000abc:	3c02      	subs	r4, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	1a59      	subs	r1, r3, r1
 8000ac2:	fa1f f38e 	uxth.w	r3, lr
 8000ac6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aca:	fb07 1110 	mls	r1, r7, r0, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb00 f606 	mul.w	r6, r0, r6
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x94>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae2:	f080 80fc 	bcs.w	8000cde <__udivmoddi4+0x282>
 8000ae6:	429e      	cmp	r6, r3
 8000ae8:	f240 80f9 	bls.w	8000cde <__udivmoddi4+0x282>
 8000aec:	4463      	add	r3, ip
 8000aee:	3802      	subs	r0, #2
 8000af0:	1b9b      	subs	r3, r3, r6
 8000af2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000af6:	2100      	movs	r1, #0
 8000af8:	b11d      	cbz	r5, 8000b02 <__udivmoddi4+0xa6>
 8000afa:	40d3      	lsrs	r3, r2
 8000afc:	2200      	movs	r2, #0
 8000afe:	e9c5 3200 	strd	r3, r2, [r5]
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d905      	bls.n	8000b16 <__udivmoddi4+0xba>
 8000b0a:	b10d      	cbz	r5, 8000b10 <__udivmoddi4+0xb4>
 8000b0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b10:	2100      	movs	r1, #0
 8000b12:	4608      	mov	r0, r1
 8000b14:	e7f5      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000b16:	fab3 f183 	clz	r1, r3
 8000b1a:	2900      	cmp	r1, #0
 8000b1c:	d146      	bne.n	8000bac <__udivmoddi4+0x150>
 8000b1e:	42a3      	cmp	r3, r4
 8000b20:	d302      	bcc.n	8000b28 <__udivmoddi4+0xcc>
 8000b22:	4290      	cmp	r0, r2
 8000b24:	f0c0 80f0 	bcc.w	8000d08 <__udivmoddi4+0x2ac>
 8000b28:	1a86      	subs	r6, r0, r2
 8000b2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b2e:	2001      	movs	r0, #1
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d0e6      	beq.n	8000b02 <__udivmoddi4+0xa6>
 8000b34:	e9c5 6300 	strd	r6, r3, [r5]
 8000b38:	e7e3      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	f040 8090 	bne.w	8000c60 <__udivmoddi4+0x204>
 8000b40:	eba1 040c 	sub.w	r4, r1, ip
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	fa1f f78c 	uxth.w	r7, ip
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b56:	fb08 4416 	mls	r4, r8, r6, r4
 8000b5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5e:	fb07 f006 	mul.w	r0, r7, r6
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x11c>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x11a>
 8000b70:	4298      	cmp	r0, r3
 8000b72:	f200 80cd 	bhi.w	8000d10 <__udivmoddi4+0x2b4>
 8000b76:	4626      	mov	r6, r4
 8000b78:	1a1c      	subs	r4, r3, r0
 8000b7a:	fa1f f38e 	uxth.w	r3, lr
 8000b7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b82:	fb08 4410 	mls	r4, r8, r0, r4
 8000b86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8a:	fb00 f707 	mul.w	r7, r0, r7
 8000b8e:	429f      	cmp	r7, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x148>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b9a:	d202      	bcs.n	8000ba2 <__udivmoddi4+0x146>
 8000b9c:	429f      	cmp	r7, r3
 8000b9e:	f200 80b0 	bhi.w	8000d02 <__udivmoddi4+0x2a6>
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	1bdb      	subs	r3, r3, r7
 8000ba6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000baa:	e7a5      	b.n	8000af8 <__udivmoddi4+0x9c>
 8000bac:	f1c1 0620 	rsb	r6, r1, #32
 8000bb0:	408b      	lsls	r3, r1
 8000bb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bb6:	431f      	orrs	r7, r3
 8000bb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000bc0:	ea43 030c 	orr.w	r3, r3, ip
 8000bc4:	40f4      	lsrs	r4, r6
 8000bc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bca:	0c38      	lsrs	r0, r7, #16
 8000bcc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bd4:	fa1f fc87 	uxth.w	ip, r7
 8000bd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000be0:	fb0e f90c 	mul.w	r9, lr, ip
 8000be4:	45a1      	cmp	r9, r4
 8000be6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bea:	d90a      	bls.n	8000c02 <__udivmoddi4+0x1a6>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bf2:	f080 8084 	bcs.w	8000cfe <__udivmoddi4+0x2a2>
 8000bf6:	45a1      	cmp	r9, r4
 8000bf8:	f240 8081 	bls.w	8000cfe <__udivmoddi4+0x2a2>
 8000bfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	eba4 0409 	sub.w	r4, r4, r9
 8000c06:	fa1f f983 	uxth.w	r9, r3
 8000c0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c1a:	45a4      	cmp	ip, r4
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x1d2>
 8000c1e:	193c      	adds	r4, r7, r4
 8000c20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c24:	d267      	bcs.n	8000cf6 <__udivmoddi4+0x29a>
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0x29a>
 8000c2a:	3b02      	subs	r3, #2
 8000c2c:	443c      	add	r4, r7
 8000c2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c32:	fba0 9302 	umull	r9, r3, r0, r2
 8000c36:	eba4 040c 	sub.w	r4, r4, ip
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	46ce      	mov	lr, r9
 8000c3e:	469c      	mov	ip, r3
 8000c40:	d351      	bcc.n	8000ce6 <__udivmoddi4+0x28a>
 8000c42:	d04e      	beq.n	8000ce2 <__udivmoddi4+0x286>
 8000c44:	b155      	cbz	r5, 8000c5c <__udivmoddi4+0x200>
 8000c46:	ebb8 030e 	subs.w	r3, r8, lr
 8000c4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c52:	40cb      	lsrs	r3, r1
 8000c54:	431e      	orrs	r6, r3
 8000c56:	40cc      	lsrs	r4, r1
 8000c58:	e9c5 6400 	strd	r6, r4, [r5]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e750      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000c60:	f1c2 0320 	rsb	r3, r2, #32
 8000c64:	fa20 f103 	lsr.w	r1, r0, r3
 8000c68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c70:	4094      	lsls	r4, r2
 8000c72:	430c      	orrs	r4, r1
 8000c74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7c:	fa1f f78c 	uxth.w	r7, ip
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3110 	mls	r1, r8, r0, r3
 8000c88:	0c23      	lsrs	r3, r4, #16
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f107 	mul.w	r1, r0, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x24c>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c9e:	d22c      	bcs.n	8000cfa <__udivmoddi4+0x29e>
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d92a      	bls.n	8000cfa <__udivmoddi4+0x29e>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cb0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb01 f307 	mul.w	r3, r1, r7
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x276>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cc8:	d213      	bcs.n	8000cf2 <__udivmoddi4+0x296>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d911      	bls.n	8000cf2 <__udivmoddi4+0x296>
 8000cce:	3902      	subs	r1, #2
 8000cd0:	4464      	add	r4, ip
 8000cd2:	1ae4      	subs	r4, r4, r3
 8000cd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cd8:	e739      	b.n	8000b4e <__udivmoddi4+0xf2>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	e6f0      	b.n	8000ac0 <__udivmoddi4+0x64>
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e706      	b.n	8000af0 <__udivmoddi4+0x94>
 8000ce2:	45c8      	cmp	r8, r9
 8000ce4:	d2ae      	bcs.n	8000c44 <__udivmoddi4+0x1e8>
 8000ce6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cee:	3801      	subs	r0, #1
 8000cf0:	e7a8      	b.n	8000c44 <__udivmoddi4+0x1e8>
 8000cf2:	4631      	mov	r1, r6
 8000cf4:	e7ed      	b.n	8000cd2 <__udivmoddi4+0x276>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	e799      	b.n	8000c2e <__udivmoddi4+0x1d2>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e7d4      	b.n	8000ca8 <__udivmoddi4+0x24c>
 8000cfe:	46d6      	mov	lr, sl
 8000d00:	e77f      	b.n	8000c02 <__udivmoddi4+0x1a6>
 8000d02:	4463      	add	r3, ip
 8000d04:	3802      	subs	r0, #2
 8000d06:	e74d      	b.n	8000ba4 <__udivmoddi4+0x148>
 8000d08:	4606      	mov	r6, r0
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	e70f      	b.n	8000b30 <__udivmoddi4+0xd4>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	e730      	b.n	8000b78 <__udivmoddi4+0x11c>
 8000d16:	bf00      	nop

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <step>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void step(float x, float y, bool btn)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d26:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]

	uint8_t buff[4];

	buff[0] = btn?0x01:0x00; // press the left button
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	753b      	strb	r3, [r7, #20]
	buff[1] = (int32_t)(x); // shift X +10
 8000d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d3a:	edc7 7a00 	vstr	s15, [r7]
 8000d3e:	783b      	ldrb	r3, [r7, #0]
 8000d40:	757b      	strb	r3, [r7, #21]
	buff[2] = (int32_t)(y); // shift Y -3
 8000d42:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4a:	edc7 7a00 	vstr	s15, [r7]
 8000d4e:	783b      	ldrb	r3, [r7, #0]
 8000d50:	75bb      	strb	r3, [r7, #22]
	buff[3] = 0; // no scroll
 8000d52:	2300      	movs	r3, #0
 8000d54:	75fb      	strb	r3, [r7, #23]

	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <step+0x60>)
 8000d60:	f004 fdc0 	bl	80058e4 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <step+0x60>)
 8000d66:	f004 fded 	bl	8005944 <USBD_HID_GetPollingInterval>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fc11 	bl	8001594 <HAL_Delay>

}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000190 	.word	0x20000190

08000d80 <circle>:

void circle(float r, uint32_t n, float circle_part)
{
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d8a:	60b8      	str	r0, [r7, #8]
 8000d8c:	edc7 0a01 	vstr	s1, [r7, #4]
	float y;
	float dx;
	float dy;
	float phi;

	for(uint32_t i = 0; i <= n; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d94:	e083      	b.n	8000e9e <circle+0x11e>
	{
		static int32_t sx;
		static int32_t sy;

		phi = (circle_part*3.1415/n) * i;
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fb8e 	bl	80004b8 <__aeabi_f2d>
 8000d9c:	a34b      	add	r3, pc, #300	@ (adr r3, 8000ecc <circle+0x14c>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	f7ff fbe1 	bl	8000568 <__aeabi_dmul>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4614      	mov	r4, r2
 8000dac:	461d      	mov	r5, r3
 8000dae:	68b8      	ldr	r0, [r7, #8]
 8000db0:	f7ff fb60 	bl	8000474 <__aeabi_ui2d>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	f7ff fcfe 	bl	80007bc <__aeabi_ddiv>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4614      	mov	r4, r2
 8000dc6:	461d      	mov	r5, r3
 8000dc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dca:	f7ff fb53 	bl	8000474 <__aeabi_ui2d>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	f7ff fbc7 	bl	8000568 <__aeabi_dmul>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f7ff fdd3 	bl	800098c <__aeabi_d2f>
 8000de6:	4603      	mov	r3, r0
 8000de8:	623b      	str	r3, [r7, #32]

		x = r*cosf(phi);
 8000dea:	ed97 0a08 	vldr	s0, [r7, #32]
 8000dee:	f006 fd89 	bl	8007904 <cosf>
 8000df2:	eeb0 7a40 	vmov.f32	s14, s0
 8000df6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dfe:	edc7 7a07 	vstr	s15, [r7, #28]
		y = r*sinf(phi);
 8000e02:	ed97 0a08 	vldr	s0, [r7, #32]
 8000e06:	f006 fdc1 	bl	800798c <sinf>
 8000e0a:	eeb0 7a40 	vmov.f32	s14, s0
 8000e0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e16:	edc7 7a06 	vstr	s15, [r7, #24]

		dx = x - sx;
 8000e1a:	4b29      	ldr	r3, [pc, #164]	@ (8000ec0 <circle+0x140>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e26:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e2e:	edc7 7a05 	vstr	s15, [r7, #20]
		dy = y - sy;
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <circle+0x144>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e46:	edc7 7a04 	vstr	s15, [r7, #16]

		sx += dx;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <circle+0x140>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e62:	ee17 2a90 	vmov	r2, s15
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <circle+0x140>)
 8000e68:	601a      	str	r2, [r3, #0]
		sy += dy;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <circle+0x144>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e82:	ee17 2a90 	vmov	r2, s15
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <circle+0x144>)
 8000e88:	601a      	str	r2, [r3, #0]

		step(dx, dy, 1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	edd7 0a04 	vldr	s1, [r7, #16]
 8000e90:	ed97 0a05 	vldr	s0, [r7, #20]
 8000e94:	f7ff ff42 	bl	8000d1c <step>
	for(uint32_t i = 0; i <= n; i++)
 8000e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	f67f af77 	bls.w	8000d96 <circle+0x16>
	}

	step(0,0,0);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8000ec8 <circle+0x148>
 8000eae:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000ec8 <circle+0x148>
 8000eb2:	f7ff ff33 	bl	8000d1c <step>

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	@ 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000180 	.word	0x20000180
 8000ec4:	20000184 	.word	0x20000184
 8000ec8:	00000000 	.word	0x00000000
 8000ecc:	c083126f 	.word	0xc083126f
 8000ed0:	400921ca 	.word	0x400921ca

08000ed4 <move>:

void move(int32_t move_x, int32_t move_y)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	step(move_x, move_y,0);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	ee07 3a10 	vmov	s14, r3
 8000eee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	eef0 0a47 	vmov.f32	s1, s14
 8000ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8000efc:	f7ff ff0e 	bl	8000d1c <step>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f0c:	f000 fad0 	bl	80014b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f10:	f000 f85c 	bl	8000fcc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f14:	f000 f8ee 	bl	80010f4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000f18:	f000 f8c2 	bl	80010a0 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 8000f1c:	f006 f880 	bl	8007020 <MX_USB_DEVICE_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1)
	{
		/* USER CODE END WHILE */
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000f20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f24:	4824      	ldr	r0, [pc, #144]	@ (8000fb8 <main+0xb0>)
 8000f26:	f000 fe17 	bl	8001b58 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f7      	beq.n	8000f20 <main+0x18>
		{
			circle(100,100,2);
 8000f30:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000f34:	2064      	movs	r0, #100	@ 0x64
 8000f36:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8000fbc <main+0xb4>
 8000f3a:	f7ff ff21 	bl	8000d80 <circle>
			move(-200,-15);
 8000f3e:	f06f 010e 	mvn.w	r1, #14
 8000f42:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8000f46:	f7ff ffc5 	bl	8000ed4 <move>
			circle(15,15,2);
 8000f4a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000f4e:	200f      	movs	r0, #15
 8000f50:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8000f54:	f7ff ff14 	bl	8000d80 <circle>
			move(40,0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f7ff ffba 	bl	8000ed4 <move>
			circle(15,15,2);
 8000f60:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000f64:	200f      	movs	r0, #15
 8000f66:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8000f6a:	f7ff ff09 	bl	8000d80 <circle>
			move(-28,8);
 8000f6e:	2108      	movs	r1, #8
 8000f70:	f06f 001b 	mvn.w	r0, #27
 8000f74:	f7ff ffae 	bl	8000ed4 <move>
			step(0,0,1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8000fc0 <main+0xb8>
 8000f7e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8000fc0 <main+0xb8>
 8000f82:	f7ff fecb 	bl	8000d1c <step>
			move(0,20);
 8000f86:	2114      	movs	r1, #20
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff ffa3 	bl	8000ed4 <move>
			step(0,0,0);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8000fc0 <main+0xb8>
 8000f94:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8000fc0 <main+0xb8>
 8000f98:	f7ff fec0 	bl	8000d1c <step>
			move(-10,5);
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	f06f 0009 	mvn.w	r0, #9
 8000fa2:	f7ff ff97 	bl	8000ed4 <move>
			circle(40,40,1.1);
 8000fa6:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8000fc4 <main+0xbc>
 8000faa:	2028      	movs	r0, #40	@ 0x28
 8000fac:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000fc8 <main+0xc0>
 8000fb0:	f7ff fee6 	bl	8000d80 <circle>
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000fb4:	e7b4      	b.n	8000f20 <main+0x18>
 8000fb6:	bf00      	nop
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	42c80000 	.word	0x42c80000
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	3f8ccccd 	.word	0x3f8ccccd
 8000fc8:	42200000 	.word	0x42200000

08000fcc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	@ 0x50
 8000fd0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	2230      	movs	r2, #48	@ 0x30
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f006 fc66 	bl	80078ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <SystemClock_Config+0xcc>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	4a27      	ldr	r2, [pc, #156]	@ (8001098 <SystemClock_Config+0xcc>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001000:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <SystemClock_Config+0xcc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <SystemClock_Config+0xd0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a21      	ldr	r2, [pc, #132]	@ (800109c <SystemClock_Config+0xd0>)
 8001016:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <SystemClock_Config+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001028:	2301      	movs	r3, #1
 800102a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800102c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	2302      	movs	r3, #2
 8001034:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001036:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800103c:	2304      	movs	r3, #4
 800103e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001040:	23a8      	movs	r3, #168	@ 0xa8
 8001042:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001044:	2302      	movs	r3, #2
 8001046:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001048:	2307      	movs	r3, #7
 800104a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f107 0320 	add.w	r3, r7, #32
 8001050:	4618      	mov	r0, r3
 8001052:	f001 ffed 	bl	8003030 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800105c:	f000 f93c 	bl	80012d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001060:	230f      	movs	r3, #15
 8001062:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800106c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001070:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001076:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2105      	movs	r1, #5
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fa4e 	bl	8003520 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800108a:	f000 f925 	bl	80012d8 <Error_Handler>
	}
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	@ 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <MX_USART3_UART_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_USART3_UART_Init+0x4c>)
 80010d8:	f002 fc42 	bl	8003960 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80010e2:	f000 f8f9 	bl	80012d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000138 	.word	0x20000138
 80010f0:	40004800 	.word	0x40004800

080010f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	@ 0x30
 80010f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b6d      	ldr	r3, [pc, #436]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a6c      	ldr	r2, [pc, #432]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b6a      	ldr	r3, [pc, #424]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a65      	ldr	r2, [pc, #404]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b63      	ldr	r3, [pc, #396]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b5f      	ldr	r3, [pc, #380]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a5e      	ldr	r2, [pc, #376]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b5c      	ldr	r3, [pc, #368]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b58      	ldr	r3, [pc, #352]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a57      	ldr	r2, [pc, #348]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b55      	ldr	r3, [pc, #340]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b51      	ldr	r3, [pc, #324]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a50      	ldr	r2, [pc, #320]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b4e      	ldr	r3, [pc, #312]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b4a      	ldr	r3, [pc, #296]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a49      	ldr	r2, [pc, #292]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 80011a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b47      	ldr	r3, [pc, #284]	@ (80012c4 <MX_GPIO_Init+0x1d0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011b8:	4843      	ldr	r0, [pc, #268]	@ (80012c8 <MX_GPIO_Init+0x1d4>)
 80011ba:	f000 fce5 	bl	8001b88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2140      	movs	r1, #64	@ 0x40
 80011c2:	4842      	ldr	r0, [pc, #264]	@ (80012cc <MX_GPIO_Init+0x1d8>)
 80011c4:	f000 fce0 	bl	8001b88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	483c      	ldr	r0, [pc, #240]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 80011e0:	f000 fb0e 	bl	8001800 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011e4:	2332      	movs	r3, #50	@ 0x32
 80011e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f4:	230b      	movs	r3, #11
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4834      	ldr	r0, [pc, #208]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001200:	f000 fafe 	bl	8001800 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001204:	2386      	movs	r3, #134	@ 0x86
 8001206:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001214:	230b      	movs	r3, #11
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	482d      	ldr	r0, [pc, #180]	@ (80012d4 <MX_GPIO_Init+0x1e0>)
 8001220:	f000 faee 	bl	8001800 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001224:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001228:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4822      	ldr	r0, [pc, #136]	@ (80012c8 <MX_GPIO_Init+0x1d4>)
 800123e:	f000 fadf 	bl	8001800 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001246:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001254:	230b      	movs	r3, #11
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	481a      	ldr	r0, [pc, #104]	@ (80012c8 <MX_GPIO_Init+0x1d4>)
 8001260:	f000 face 	bl	8001800 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001264:	2340      	movs	r3, #64	@ 0x40
 8001266:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4814      	ldr	r0, [pc, #80]	@ (80012cc <MX_GPIO_Init+0x1d8>)
 800127c:	f000 fac0 	bl	8001800 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001280:	2380      	movs	r3, #128	@ 0x80
 8001282:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	@ (80012cc <MX_GPIO_Init+0x1d8>)
 8001294:	f000 fab4 	bl	8001800 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001298:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800129c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012aa:	230b      	movs	r3, #11
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_GPIO_Init+0x1d8>)
 80012b6:	f000 faa3 	bl	8001800 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	@ 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020000 	.word	0x40020000

080012d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012dc:	b672      	cpsid	i
}
 80012de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <Error_Handler+0x8>

080012e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001330 <HAL_MspInit+0x4c>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_MspInit+0x4c>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <HAL_UART_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12c      	bne.n	80013b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <HAL_UART_MspInit+0x88>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_UART_MspInit+0x88>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_UART_MspInit+0x88>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_UART_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800138e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a0:	2307      	movs	r3, #7
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <HAL_UART_MspInit+0x8c>)
 80013ac:	f000 fa28 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	@ 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40004800 	.word	0x40004800
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020c00 	.word	0x40020c00

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141a:	f000 f89b 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <OTG_FS_IRQHandler+0x10>)
 800142a:	f000 fd0a 	bl	8001e42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000066c 	.word	0x2000066c

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001460:	f7ff ffea 	bl	8001438 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800148a:	f006 fa17 	bl	80078bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff fd3b 	bl	8000f08 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001494:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80014a0:	08008858 	.word	0x08008858
  ldr r2, =_sbss
 80014a4:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80014a8:	20000b64 	.word	0x20000b64

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f94f 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fefe 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f967 	bl	80017e6 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f92f 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	20000188 	.word	0x20000188

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000188 	.word	0x20000188

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	@ (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	@ (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	@ (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	@ 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff29 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff3e 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff31 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e177      	b.n	8001b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 8166 	bne.w	8001b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d005      	beq.n	8001852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184e:	2b02      	cmp	r3, #2
 8001850:	d130      	bne.n	80018b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 0201 	and.w	r2, r3, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d017      	beq.n	80018f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d123      	bne.n	8001944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80c0 	beq.w	8001b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b66      	ldr	r3, [pc, #408]	@ (8001b24 <HAL_GPIO_Init+0x324>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	4a65      	ldr	r2, [pc, #404]	@ (8001b24 <HAL_GPIO_Init+0x324>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001994:	6453      	str	r3, [r2, #68]	@ 0x44
 8001996:	4b63      	ldr	r3, [pc, #396]	@ (8001b24 <HAL_GPIO_Init+0x324>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a2:	4a61      	ldr	r2, [pc, #388]	@ (8001b28 <HAL_GPIO_Init+0x328>)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a58      	ldr	r2, [pc, #352]	@ (8001b2c <HAL_GPIO_Init+0x32c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d037      	beq.n	8001a3e <HAL_GPIO_Init+0x23e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a57      	ldr	r2, [pc, #348]	@ (8001b30 <HAL_GPIO_Init+0x330>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d031      	beq.n	8001a3a <HAL_GPIO_Init+0x23a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a56      	ldr	r2, [pc, #344]	@ (8001b34 <HAL_GPIO_Init+0x334>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d02b      	beq.n	8001a36 <HAL_GPIO_Init+0x236>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a55      	ldr	r2, [pc, #340]	@ (8001b38 <HAL_GPIO_Init+0x338>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d025      	beq.n	8001a32 <HAL_GPIO_Init+0x232>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a54      	ldr	r2, [pc, #336]	@ (8001b3c <HAL_GPIO_Init+0x33c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01f      	beq.n	8001a2e <HAL_GPIO_Init+0x22e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a53      	ldr	r2, [pc, #332]	@ (8001b40 <HAL_GPIO_Init+0x340>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0x22a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a52      	ldr	r2, [pc, #328]	@ (8001b44 <HAL_GPIO_Init+0x344>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0x226>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a51      	ldr	r2, [pc, #324]	@ (8001b48 <HAL_GPIO_Init+0x348>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00d      	beq.n	8001a22 <HAL_GPIO_Init+0x222>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a50      	ldr	r2, [pc, #320]	@ (8001b4c <HAL_GPIO_Init+0x34c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x21e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	@ (8001b50 <HAL_GPIO_Init+0x350>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_GPIO_Init+0x21a>
 8001a16:	2309      	movs	r3, #9
 8001a18:	e012      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	e010      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a1e:	2308      	movs	r3, #8
 8001a20:	e00e      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	@ (8001b28 <HAL_GPIO_Init+0x328>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b54 <HAL_GPIO_Init+0x354>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a34      	ldr	r2, [pc, #208]	@ (8001b54 <HAL_GPIO_Init+0x354>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <HAL_GPIO_Init+0x354>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a29      	ldr	r2, [pc, #164]	@ (8001b54 <HAL_GPIO_Init+0x354>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab2:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <HAL_GPIO_Init+0x354>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b54 <HAL_GPIO_Init+0x354>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b00:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f ae84 	bls.w	800181c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	@ 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021800 	.word	0x40021800
 8001b48:	40021c00 	.word	0x40021c00
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40022400 	.word	0x40022400
 8001b54:	40013c00 	.word	0x40013c00

08001b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	619a      	str	r2, [r3, #24]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af02      	add	r7, sp, #8
 8001bc0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e101      	b.n	8001dd0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f005 fb50 	bl	800728c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bfa:	d102      	bne.n	8001c02 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fa85 	bl	8004116 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7c1a      	ldrb	r2, [r3, #16]
 8001c14:	f88d 2000 	strb.w	r2, [sp]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c1c:	f002 f964 	bl	8003ee8 <USB_CoreInit>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0ce      	b.n	8001dd0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fa7d 	bl	8004138 <USB_SetCurrentMode>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0bf      	b.n	8001dd0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e04a      	b.n	8001cec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	3315      	adds	r3, #21
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	3314      	adds	r3, #20
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	b298      	uxth	r0, r3
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	332e      	adds	r3, #46	@ 0x2e
 8001c92:	4602      	mov	r2, r0
 8001c94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	331c      	adds	r3, #28
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3320      	adds	r3, #32
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	3324      	adds	r3, #36	@ 0x24
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	791b      	ldrb	r3, [r3, #4]
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d3af      	bcc.n	8001c56 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e044      	b.n	8001d86 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	3301      	adds	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3b5      	bcc.n	8001cfc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7c1a      	ldrb	r2, [r3, #16]
 8001d98:	f88d 2000 	strb.w	r2, [sp]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da0:	f002 fa16 	bl	80041d0 <USB_DevInit>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00c      	b.n	8001dd0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fa60 	bl	800528e <USB_DevDisconnect>

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_Start+0x1c>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e022      	b.n	8001e3a <HAL_PCD_Start+0x62>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d105      	bne.n	8001e1c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f002 f967 	bl	80040f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fa0e 	bl	800524c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e42:	b590      	push	{r4, r7, lr}
 8001e44:	b08d      	sub	sp, #52	@ 0x34
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 facc 	bl	80053f6 <USB_GetMode>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 848c 	bne.w	800277e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fa30 	bl	80052d0 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8482 	beq.w	800277c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fa1d 	bl	80052d0 <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d107      	bne.n	8001eb0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f002 0202 	and.w	r2, r2, #2
 8001eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fa0b 	bl	80052d0 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d161      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0210 	bic.w	r2, r2, #16
 8001ed2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	0c5b      	lsrs	r3, r3, #17
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d124      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d035      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6a38      	ldr	r0, [r7, #32]
 8001f20:	f003 f842 	bl	8004fa8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f30:	441a      	add	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f42:	441a      	add	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	615a      	str	r2, [r3, #20]
 8001f48:	e016      	b.n	8001f78 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	0c5b      	lsrs	r3, r3, #17
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d110      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6a38      	ldr	r0, [r7, #32]
 8001f62:	f003 f821 	bl	8004fa8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f72:	441a      	add	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0210 	orr.w	r2, r2, #16
 8001f86:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 f99f 	bl	80052d0 <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f9c:	f040 80a7 	bne.w	80020ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 f9a4 	bl	80052f6 <USB_ReadDevAllOutEpInterrupt>
 8001fae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001fb0:	e099      	b.n	80020e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 808e 	beq.w	80020da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 f9c8 	bl	800535e <USB_ReadDevOutEPInterrupt>
 8001fce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2301      	movs	r3, #1
 8001fea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fe8c 	bl	8002d0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	2308      	movs	r3, #8
 800200e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002010:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 ff62 	bl	8002edc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800202e:	461a      	mov	r2, r3
 8002030:	2310      	movs	r3, #16
 8002032:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d030      	beq.n	80020a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002046:	2b80      	cmp	r3, #128	@ 0x80
 8002048:	d109      	bne.n	800205e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002058:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800205e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	3304      	adds	r3, #4
 8002072:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	78db      	ldrb	r3, [r3, #3]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d108      	bne.n	800208e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2200      	movs	r2, #0
 8002080:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4619      	mov	r1, r3
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f005 fa13 	bl	80074b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800209a:	461a      	mov	r2, r3
 800209c:	2302      	movs	r3, #2
 800209e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020b6:	461a      	mov	r2, r3
 80020b8:	2320      	movs	r3, #32
 80020ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	3301      	adds	r3, #1
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e2:	085b      	lsrs	r3, r3, #1
 80020e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f af62 	bne.w	8001fb2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 f8ec 	bl	80052d0 <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002102:	f040 80db 	bne.w	80022bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f003 f90d 	bl	800532a <USB_ReadDevAllInEpInterrupt>
 8002110:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002116:	e0cd      	b.n	80022b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80c2 	beq.w	80022a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f933 	bl	800539a <USB_ReadDevInEPInterrupt>
 8002134:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d057      	beq.n	80021f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	2201      	movs	r2, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	69f9      	ldr	r1, [r7, #28]
 800215c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002160:	4013      	ands	r3, r2
 8002162:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002170:	461a      	mov	r2, r3
 8002172:	2301      	movs	r3, #1
 8002174:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	799b      	ldrb	r3, [r3, #6]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d132      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3320      	adds	r3, #32
 800218e:	6819      	ldr	r1, [r3, #0]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4403      	add	r3, r0
 800219e:	331c      	adds	r3, #28
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4419      	add	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4403      	add	r3, r0
 80021b2:	3320      	adds	r3, #32
 80021b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d113      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x3a2>
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3324      	adds	r3, #36	@ 0x24
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021dc:	461a      	mov	r2, r3
 80021de:	2101      	movs	r1, #1
 80021e0:	f003 f93a 	bl	8005458 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f005 f8dd 	bl	80073aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002206:	461a      	mov	r2, r3
 8002208:	2308      	movs	r3, #8
 800220a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002222:	461a      	mov	r2, r3
 8002224:	2310      	movs	r3, #16
 8002226:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800223e:	461a      	mov	r2, r3
 8002240:	2340      	movs	r3, #64	@ 0x40
 8002242:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d023      	beq.n	8002296 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800224e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002250:	6a38      	ldr	r0, [r7, #32]
 8002252:	f002 f921 	bl	8004498 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	3310      	adds	r3, #16
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	3304      	adds	r3, #4
 8002268:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	78db      	ldrb	r3, [r3, #3]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f005 f92a 	bl	80074d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002290:	461a      	mov	r2, r3
 8002292:	2302      	movs	r3, #2
 8002294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fca5 	bl	8002bf2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	3301      	adds	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f47f af2e 	bne.w	8002118 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 f805 	bl	80052d0 <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022d0:	d122      	bne.n	8002318 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d108      	bne.n	8002302 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022f8:	2100      	movs	r1, #0
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fe8c 	bl	8003018 <HAL_PCDEx_LPM_Callback>
 8002300:	e002      	b.n	8002308 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f005 f8c8 	bl	8007498 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002316:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f002 ffd7 	bl	80052d0 <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800232c:	d112      	bne.n	8002354 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f005 f884 	bl	800744c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002352:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f002 ffb9 	bl	80052d0 <USB_ReadInterrupts>
 800235e:	4603      	mov	r3, r0
 8002360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002368:	f040 80b7 	bne.w	80024da <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2110      	movs	r1, #16
 8002386:	4618      	mov	r0, r3
 8002388:	f002 f886 	bl	8004498 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002390:	e046      	b.n	8002420 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800239e:	461a      	mov	r2, r3
 80023a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023b6:	0151      	lsls	r1, r2, #5
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	440a      	add	r2, r1
 80023bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80023c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d2:	461a      	mov	r2, r3
 80023d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ea:	0151      	lsls	r1, r2, #5
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	440a      	add	r2, r1
 80023f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80023f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800240a:	0151      	lsls	r1, r2, #5
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	440a      	add	r2, r1
 8002410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002414:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002418:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241c:	3301      	adds	r3, #1
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	791b      	ldrb	r3, [r3, #4]
 8002424:	461a      	mov	r2, r3
 8002426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002428:	4293      	cmp	r3, r2
 800242a:	d3b2      	bcc.n	8002392 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800243a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800243e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7bdb      	ldrb	r3, [r3, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800244e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002458:	f043 030b 	orr.w	r3, r3, #11
 800245c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800246e:	f043 030b 	orr.w	r3, r3, #11
 8002472:	6453      	str	r3, [r2, #68]	@ 0x44
 8002474:	e015      	b.n	80024a2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002484:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002488:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800248c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800249c:	f043 030b 	orr.w	r3, r3, #11
 80024a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024b0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80024b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024c4:	461a      	mov	r2, r3
 80024c6:	f002 ffc7 	bl	8005458 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f002 fef6 	bl	80052d0 <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ee:	d123      	bne.n	8002538 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 ff8c 	bl	8005412 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 f843 	bl	800458a <USB_GetDevSpeed>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681c      	ldr	r4, [r3, #0]
 8002510:	f001 f9f2 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8002514:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800251a:	461a      	mov	r2, r3
 800251c:	4620      	mov	r0, r4
 800251e:	f001 fd47 	bl	8003fb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f004 ff69 	bl	80073fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002536:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fec7 	bl	80052d0 <USB_ReadInterrupts>
 8002542:	4603      	mov	r3, r0
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b08      	cmp	r3, #8
 800254a:	d10a      	bne.n	8002562 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f004 ff46 	bl	80073de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f002 0208 	and.w	r2, r2, #8
 8002560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 feb2 	bl	80052d0 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	2b80      	cmp	r3, #128	@ 0x80
 8002574:	d123      	bne.n	80025be <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002582:	2301      	movs	r3, #1
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
 8002586:	e014      	b.n	80025b2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 faf2 	bl	8002b90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	3301      	adds	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	791b      	ldrb	r3, [r3, #4]
 80025b6:	461a      	mov	r2, r3
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d3e4      	bcc.n	8002588 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fe84 	bl	80052d0 <USB_ReadInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025d2:	d13c      	bne.n	800264e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d4:	2301      	movs	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d8:	e02b      	b.n	8002632 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3318      	adds	r3, #24
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d115      	bne.n	800262c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002600:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002602:	2b00      	cmp	r3, #0
 8002604:	da12      	bge.n	800262c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	3317      	adds	r3, #23
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002622:	b2db      	uxtb	r3, r3
 8002624:	4619      	mov	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fab2 	bl	8002b90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	3301      	adds	r3, #1
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	791b      	ldrb	r3, [r3, #4]
 8002636:	461a      	mov	r2, r3
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	4293      	cmp	r3, r2
 800263c:	d3cd      	bcc.n	80025da <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f002 fe3c 	bl	80052d0 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800265e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002662:	d156      	bne.n	8002712 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002664:	2301      	movs	r3, #1
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
 8002668:	e045      	b.n	80026f6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d12e      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002692:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002694:	2b00      	cmp	r3, #0
 8002696:	da2b      	bge.n	80026f0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80026a4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d121      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ec:	6053      	str	r3, [r2, #4]
            break;
 80026ee:	e008      	b.n	8002702 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	3301      	adds	r3, #1
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	791b      	ldrb	r3, [r3, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	4293      	cmp	r3, r2
 8002700:	d3b3      	bcc.n	800266a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fdda 	bl	80052d0 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002726:	d10a      	bne.n	800273e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f004 fee7 	bl	80074fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fdc4 	bl	80052d0 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b04      	cmp	r3, #4
 8002750:	d115      	bne.n	800277e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f004 fed7 	bl	8007518 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	e000      	b.n	800277e <HAL_PCD_IRQHandler+0x93c>
      return;
 800277c:	bf00      	nop
    }
  }
}
 800277e:	3734      	adds	r7, #52	@ 0x34
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}

08002784 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_PCD_SetAddress+0x1a>
 800279a:	2302      	movs	r3, #2
 800279c:	e012      	b.n	80027c4 <HAL_PCD_SetAddress+0x40>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fd23 	bl	8005200 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	70fb      	strb	r3, [r7, #3]
 80027de:	460b      	mov	r3, r1
 80027e0:	803b      	strh	r3, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	da0f      	bge.n	8002812 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	f003 020f 	and.w	r2, r3, #15
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	3310      	adds	r3, #16
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	3304      	adds	r3, #4
 8002808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	705a      	strb	r2, [r3, #1]
 8002810:	e00f      	b.n	8002832 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	f003 020f 	and.w	r2, r3, #15
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	3304      	adds	r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800283e:	883b      	ldrh	r3, [r7, #0]
 8002840:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	78ba      	ldrb	r2, [r7, #2]
 800284c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002860:	78bb      	ldrb	r3, [r7, #2]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d102      	bne.n	800286c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_PCD_EP_Open+0xae>
 8002876:	2302      	movs	r3, #2
 8002878:	e00e      	b.n	8002898 <HAL_PCD_EP_Open+0xcc>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68f9      	ldr	r1, [r7, #12]
 8002888:	4618      	mov	r0, r3
 800288a:	f001 fea3 	bl	80045d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002896:	7afb      	ldrb	r3, [r7, #11]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da0f      	bge.n	80028d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 020f 	and.w	r2, r3, #15
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	3310      	adds	r3, #16
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	3304      	adds	r3, #4
 80028ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	705a      	strb	r2, [r3, #1]
 80028d2:	e00f      	b.n	80028f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 020f 	and.w	r2, r3, #15
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_PCD_EP_Close+0x6e>
 800290a:	2302      	movs	r3, #2
 800290c:	e00e      	b.n	800292c <HAL_PCD_EP_Close+0x8c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68f9      	ldr	r1, [r7, #12]
 800291c:	4618      	mov	r0, r3
 800291e:	f001 fee1 	bl	80046e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	460b      	mov	r3, r1
 8002942:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	f003 020f 	and.w	r2, r3, #15
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	3304      	adds	r3, #4
 800295c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2200      	movs	r2, #0
 800296e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2200      	movs	r2, #0
 8002974:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	b2da      	uxtb	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	799b      	ldrb	r3, [r3, #6]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d102      	bne.n	8002990 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	799b      	ldrb	r3, [r3, #6]
 8002998:	461a      	mov	r2, r3
 800299a:	6979      	ldr	r1, [r7, #20]
 800299c:	f001 ff7e 	bl	800489c <USB_EPStartXfer>

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	460b      	mov	r3, r1
 80029b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3310      	adds	r3, #16
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2201      	movs	r2, #1
 80029e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	799b      	ldrb	r3, [r3, #6]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d102      	bne.n	8002a04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	799b      	ldrb	r3, [r3, #6]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6979      	ldr	r1, [r7, #20]
 8002a10:	f001 ff44 	bl	800489c <USB_EPStartXfer>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	7912      	ldrb	r2, [r2, #4]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e04f      	b.n	8002adc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da0f      	bge.n	8002a64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 020f 	and.w	r2, r3, #15
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3310      	adds	r3, #16
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	705a      	strb	r2, [r3, #1]
 8002a62:	e00d      	b.n	8002a80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_PCD_EP_SetStall+0x82>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e01d      	b.n	8002adc <HAL_PCD_EP_SetStall+0xbe>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fad2 	bl	8005058 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7999      	ldrb	r1, [r3, #6]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002acc:	461a      	mov	r2, r3
 8002ace:	f002 fcc3 	bl	8005458 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	7912      	ldrb	r2, [r2, #4]
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e042      	b.n	8002b88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	da0f      	bge.n	8002b2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	3310      	adds	r3, #16
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	705a      	strb	r2, [r3, #1]
 8002b28:	e00f      	b.n	8002b4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_PCD_EP_ClrStall+0x86>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e00e      	b.n	8002b88 <HAL_PCD_EP_ClrStall+0xa4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fadb 	bl	8005134 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	da0c      	bge.n	8002bbe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f003 020f 	and.w	r2, r3, #15
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3304      	adds	r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e00c      	b.n	8002bd8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	f003 020f 	and.w	r2, r3, #15
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f002 f8fa 	bl	8004dd8 <USB_EPStopXfer>
 8002be4:	4603      	mov	r3, r0
 8002be6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002be8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b08a      	sub	sp, #40	@ 0x28
 8002bf6:	af02      	add	r7, sp, #8
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	3310      	adds	r3, #16
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	3304      	adds	r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d901      	bls.n	8002c2a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e06b      	b.n	8002d02 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d902      	bls.n	8002c46 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3303      	adds	r3, #3
 8002c4a:	089b      	lsrs	r3, r3, #2
 8002c4c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c4e:	e02a      	b.n	8002ca6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d902      	bls.n	8002c6c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	3303      	adds	r3, #3
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	68d9      	ldr	r1, [r3, #12]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	4603      	mov	r3, r0
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f002 f94f 	bl	8004f2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	441a      	add	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d809      	bhi.n	8002cd0 <PCD_WriteEmptyTxFifo+0xde>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d203      	bcs.n	8002cd0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1bf      	bne.n	8002c50 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d811      	bhi.n	8002d00 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	6939      	ldr	r1, [r7, #16]
 8002cf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	333c      	adds	r3, #60	@ 0x3c
 8002d24:	3304      	adds	r3, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	799b      	ldrb	r3, [r3, #6]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d17b      	bne.n	8002e3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d015      	beq.n	8002d78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	4a61      	ldr	r2, [pc, #388]	@ (8002ed4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	f240 80b9 	bls.w	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80b3 	beq.w	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d74:	6093      	str	r3, [r2, #8]
 8002d76:	e0a7      	b.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2320      	movs	r3, #32
 8002d92:	6093      	str	r3, [r2, #8]
 8002d94:	e098      	b.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f040 8093 	bne.w	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d90f      	bls.n	8002dca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dc6:	6093      	str	r3, [r2, #8]
 8002dc8:	e07e      	b.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1a      	ldr	r2, [r3, #32]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	0159      	lsls	r1, r3, #5
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	440b      	add	r3, r1
 8002dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df6:	1ad2      	subs	r2, r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d114      	bne.n	8002e2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e14:	461a      	mov	r2, r3
 8002e16:	2101      	movs	r1, #1
 8002e18:	f002 fb1e 	bl	8005458 <USB_EP0_OutStart>
 8002e1c:	e006      	b.n	8002e2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	441a      	add	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f004 fa9e 	bl	8007374 <HAL_PCD_DataOutStageCallback>
 8002e38:	e046      	b.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	4a26      	ldr	r2, [pc, #152]	@ (8002ed8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d124      	bne.n	8002e8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	e032      	b.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f004 fa75 	bl	8007374 <HAL_PCD_DataOutStageCallback>
 8002e8a:	e01d      	b.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d114      	bne.n	8002ebc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f002 face 	bl	8005458 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f004 fa56 	bl	8007374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	4f54300a 	.word	0x4f54300a
 8002ed8:	4f54310a 	.word	0x4f54310a

08002edc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	333c      	adds	r3, #60	@ 0x3c
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a15      	ldr	r2, [pc, #84]	@ (8002f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d90e      	bls.n	8002f30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f004 fa0d 	bl	8007350 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d90c      	bls.n	8002f58 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	799b      	ldrb	r3, [r3, #6]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d108      	bne.n	8002f58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f50:	461a      	mov	r2, r3
 8002f52:	2101      	movs	r1, #1
 8002f54:	f002 fa80 	bl	8005458 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	4f54300a 	.word	0x4f54300a

08002f68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]
 8002f74:	4613      	mov	r3, r2
 8002f76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f86:	883b      	ldrh	r3, [r7, #0]
 8002f88:	0419      	lsls	r1, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f94:	e028      	b.n	8002fe8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e00d      	b.n	8002fc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	3340      	adds	r3, #64	@ 0x40
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d3ec      	bcc.n	8002faa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fd0:	883b      	ldrh	r3, [r7, #0]
 8002fd2:	0418      	lsls	r0, r3, #16
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	4302      	orrs	r2, r0
 8002fe0:	3340      	adds	r3, #64	@ 0x40
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e267      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d075      	beq.n	800313a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800304e:	4b88      	ldr	r3, [pc, #544]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b04      	cmp	r3, #4
 8003058:	d00c      	beq.n	8003074 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305a:	4b85      	ldr	r3, [pc, #532]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003062:	2b08      	cmp	r3, #8
 8003064:	d112      	bne.n	800308c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003066:	4b82      	ldr	r3, [pc, #520]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800306e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003072:	d10b      	bne.n	800308c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	4b7e      	ldr	r3, [pc, #504]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05b      	beq.n	8003138 <HAL_RCC_OscConfig+0x108>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d157      	bne.n	8003138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e242      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003094:	d106      	bne.n	80030a4 <HAL_RCC_OscConfig+0x74>
 8003096:	4b76      	ldr	r3, [pc, #472]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a75      	ldr	r2, [pc, #468]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e01d      	b.n	80030e0 <HAL_RCC_OscConfig+0xb0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x98>
 80030ae:	4b70      	ldr	r3, [pc, #448]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6c      	ldr	r2, [pc, #432]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0xb0>
 80030c8:	4b69      	ldr	r3, [pc, #420]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a68      	ldr	r2, [pc, #416]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b66      	ldr	r3, [pc, #408]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a65      	ldr	r2, [pc, #404]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fa48 	bl	800157c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fa44 	bl	800157c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e207      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b5b      	ldr	r3, [pc, #364]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fa34 	bl	800157c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe fa30 	bl	800157c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1f3      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	4b51      	ldr	r3, [pc, #324]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0xe8>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003146:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003152:	4b47      	ldr	r3, [pc, #284]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11c      	bne.n	8003198 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315e:	4b44      	ldr	r3, [pc, #272]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d116      	bne.n	8003198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_RCC_OscConfig+0x152>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1c7      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4937      	ldr	r1, [pc, #220]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	e03a      	b.n	800320e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a0:	4b34      	ldr	r3, [pc, #208]	@ (8003274 <HAL_RCC_OscConfig+0x244>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fe f9e9 	bl	800157c <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ae:	f7fe f9e5 	bl	800157c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e1a8      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4925      	ldr	r1, [pc, #148]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e2:	4b24      	ldr	r3, [pc, #144]	@ (8003274 <HAL_RCC_OscConfig+0x244>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe f9c8 	bl	800157c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fe f9c4 	bl	800157c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e187      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d036      	beq.n	8003288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b15      	ldr	r3, [pc, #84]	@ (8003278 <HAL_RCC_OscConfig+0x248>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe f9a8 	bl	800157c <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe f9a4 	bl	800157c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e167      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_RCC_OscConfig+0x240>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x200>
 800324e:	e01b      	b.n	8003288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003250:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <HAL_RCC_OscConfig+0x248>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003256:	f7fe f991 	bl	800157c <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	e00e      	b.n	800327c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325e:	f7fe f98d 	bl	800157c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d907      	bls.n	800327c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e150      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
 8003270:	40023800 	.word	0x40023800
 8003274:	42470000 	.word	0x42470000
 8003278:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	4b88      	ldr	r3, [pc, #544]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 800327e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ea      	bne.n	800325e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8097 	beq.w	80033c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b81      	ldr	r3, [pc, #516]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	4b7d      	ldr	r3, [pc, #500]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	4a7c      	ldr	r2, [pc, #496]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 80032b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032b6:	4b7a      	ldr	r3, [pc, #488]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	4b77      	ldr	r3, [pc, #476]	@ (80034a4 <HAL_RCC_OscConfig+0x474>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d118      	bne.n	8003304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d2:	4b74      	ldr	r3, [pc, #464]	@ (80034a4 <HAL_RCC_OscConfig+0x474>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a73      	ldr	r2, [pc, #460]	@ (80034a4 <HAL_RCC_OscConfig+0x474>)
 80032d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032de:	f7fe f94d 	bl	800157c <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e6:	f7fe f949 	bl	800157c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e10c      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	4b6a      	ldr	r3, [pc, #424]	@ (80034a4 <HAL_RCC_OscConfig+0x474>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x2ea>
 800330c:	4b64      	ldr	r3, [pc, #400]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	4a63      	ldr	r2, [pc, #396]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6713      	str	r3, [r2, #112]	@ 0x70
 8003318:	e01c      	b.n	8003354 <HAL_RCC_OscConfig+0x324>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b05      	cmp	r3, #5
 8003320:	d10c      	bne.n	800333c <HAL_RCC_OscConfig+0x30c>
 8003322:	4b5f      	ldr	r3, [pc, #380]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	4a5e      	ldr	r2, [pc, #376]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003328:	f043 0304 	orr.w	r3, r3, #4
 800332c:	6713      	str	r3, [r2, #112]	@ 0x70
 800332e:	4b5c      	ldr	r3, [pc, #368]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003332:	4a5b      	ldr	r2, [pc, #364]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6713      	str	r3, [r2, #112]	@ 0x70
 800333a:	e00b      	b.n	8003354 <HAL_RCC_OscConfig+0x324>
 800333c:	4b58      	ldr	r3, [pc, #352]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003340:	4a57      	ldr	r2, [pc, #348]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	@ 0x70
 8003348:	4b55      	ldr	r3, [pc, #340]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334c:	4a54      	ldr	r2, [pc, #336]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 800334e:	f023 0304 	bic.w	r3, r3, #4
 8003352:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d015      	beq.n	8003388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fe f90e 	bl	800157c <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	e00a      	b.n	800337a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fe f90a 	bl	800157c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0cb      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	4b49      	ldr	r3, [pc, #292]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ee      	beq.n	8003364 <HAL_RCC_OscConfig+0x334>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003388:	f7fe f8f8 	bl	800157c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe f8f4 	bl	800157c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0b5      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a6:	4b3e      	ldr	r3, [pc, #248]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ee      	bne.n	8003390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b8:	4b39      	ldr	r3, [pc, #228]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	4a38      	ldr	r2, [pc, #224]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 80033be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a1 	beq.w	8003510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ce:	4b34      	ldr	r3, [pc, #208]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d05c      	beq.n	8003494 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d141      	bne.n	8003466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b31      	ldr	r3, [pc, #196]	@ (80034a8 <HAL_RCC_OscConfig+0x478>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe f8c8 	bl	800157c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe f8c4 	bl	800157c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e087      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b27      	ldr	r3, [pc, #156]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	3b01      	subs	r3, #1
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	491b      	ldr	r1, [pc, #108]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <HAL_RCC_OscConfig+0x478>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe f89d 	bl	800157c <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe f899 	bl	800157c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e05c      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003458:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x416>
 8003464:	e054      	b.n	8003510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <HAL_RCC_OscConfig+0x478>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe f886 	bl	800157c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe f882 	bl	800157c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e045      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x444>
 8003492:	e03d      	b.n	8003510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d107      	bne.n	80034ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e038      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40007000 	.word	0x40007000
 80034a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ac:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <HAL_RCC_OscConfig+0x4ec>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d028      	beq.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d121      	bne.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d11a      	bne.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d111      	bne.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	3b01      	subs	r3, #1
 80034f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800

08003520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0cc      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003534:	4b68      	ldr	r3, [pc, #416]	@ (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d90c      	bls.n	800355c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b65      	ldr	r3, [pc, #404]	@ (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b63      	ldr	r3, [pc, #396]	@ (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b8      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003574:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a58      	ldr	r2, [pc, #352]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800357e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800358c:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a52      	ldr	r2, [pc, #328]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b50      	ldr	r3, [pc, #320]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	494d      	ldr	r1, [pc, #308]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d044      	beq.n	8003640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b47      	ldr	r3, [pc, #284]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d119      	bne.n	80035fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e07f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d003      	beq.n	80035de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035de:	4b3f      	ldr	r3, [pc, #252]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e06f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ee:	4b3b      	ldr	r3, [pc, #236]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e067      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fe:	4b37      	ldr	r3, [pc, #220]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4934      	ldr	r1, [pc, #208]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003610:	f7fd ffb4 	bl	800157c <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	e00a      	b.n	800362e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fd ffb0 	bl	800157c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e04f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 020c 	and.w	r2, r3, #12
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	429a      	cmp	r2, r3
 800363e:	d1eb      	bne.n	8003618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003640:	4b25      	ldr	r3, [pc, #148]	@ (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d20c      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b22      	ldr	r3, [pc, #136]	@ (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e032      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4916      	ldr	r1, [pc, #88]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003692:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	490e      	ldr	r1, [pc, #56]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a6:	f000 f821 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 80036aa:	4602      	mov	r2, r0
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	490a      	ldr	r1, [pc, #40]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	5ccb      	ldrb	r3, [r1, r3]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	4a09      	ldr	r2, [pc, #36]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd ff14 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00
 80036dc:	40023800 	.word	0x40023800
 80036e0:	08008460 	.word	0x08008460
 80036e4:	20000000 	.word	0x20000000
 80036e8:	20000004 	.word	0x20000004

080036ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f0:	b094      	sub	sp, #80	@ 0x50
 80036f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003704:	4b79      	ldr	r3, [pc, #484]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d00d      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x40>
 8003710:	2b08      	cmp	r3, #8
 8003712:	f200 80e1 	bhi.w	80038d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x34>
 800371a:	2b04      	cmp	r3, #4
 800371c:	d003      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x3a>
 800371e:	e0db      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003720:	4b73      	ldr	r3, [pc, #460]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003722:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003724:	e0db      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003726:	4b73      	ldr	r3, [pc, #460]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003728:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800372a:	e0d8      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	4b6f      	ldr	r3, [pc, #444]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003734:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003736:	4b6d      	ldr	r3, [pc, #436]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d063      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b6a      	ldr	r3, [pc, #424]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	2200      	movs	r2, #0
 800374a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800374c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003754:	633b      	str	r3, [r7, #48]	@ 0x30
 8003756:	2300      	movs	r3, #0
 8003758:	637b      	str	r3, [r7, #52]	@ 0x34
 800375a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800375e:	4622      	mov	r2, r4
 8003760:	462b      	mov	r3, r5
 8003762:	f04f 0000 	mov.w	r0, #0
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	0159      	lsls	r1, r3, #5
 800376c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003770:	0150      	lsls	r0, r2, #5
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4621      	mov	r1, r4
 8003778:	1a51      	subs	r1, r2, r1
 800377a:	6139      	str	r1, [r7, #16]
 800377c:	4629      	mov	r1, r5
 800377e:	eb63 0301 	sbc.w	r3, r3, r1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003790:	4659      	mov	r1, fp
 8003792:	018b      	lsls	r3, r1, #6
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800379a:	4651      	mov	r1, sl
 800379c:	018a      	lsls	r2, r1, #6
 800379e:	4651      	mov	r1, sl
 80037a0:	ebb2 0801 	subs.w	r8, r2, r1
 80037a4:	4659      	mov	r1, fp
 80037a6:	eb63 0901 	sbc.w	r9, r3, r1
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037be:	4690      	mov	r8, r2
 80037c0:	4699      	mov	r9, r3
 80037c2:	4623      	mov	r3, r4
 80037c4:	eb18 0303 	adds.w	r3, r8, r3
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	462b      	mov	r3, r5
 80037cc:	eb49 0303 	adc.w	r3, r9, r3
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037de:	4629      	mov	r1, r5
 80037e0:	024b      	lsls	r3, r1, #9
 80037e2:	4621      	mov	r1, r4
 80037e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037e8:	4621      	mov	r1, r4
 80037ea:	024a      	lsls	r2, r1, #9
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037f2:	2200      	movs	r2, #0
 80037f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037fc:	f7fd f916 	bl	8000a2c <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4613      	mov	r3, r2
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003808:	e058      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380a:	4b38      	ldr	r3, [pc, #224]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	2200      	movs	r2, #0
 8003812:	4618      	mov	r0, r3
 8003814:	4611      	mov	r1, r2
 8003816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	f04f 0000 	mov.w	r0, #0
 800382c:	f04f 0100 	mov.w	r1, #0
 8003830:	0159      	lsls	r1, r3, #5
 8003832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003836:	0150      	lsls	r0, r2, #5
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4641      	mov	r1, r8
 800383e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003842:	4649      	mov	r1, r9
 8003844:	eb63 0b01 	sbc.w	fp, r3, r1
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800385c:	ebb2 040a 	subs.w	r4, r2, sl
 8003860:	eb63 050b 	sbc.w	r5, r3, fp
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	00eb      	lsls	r3, r5, #3
 800386e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003872:	00e2      	lsls	r2, r4, #3
 8003874:	4614      	mov	r4, r2
 8003876:	461d      	mov	r5, r3
 8003878:	4643      	mov	r3, r8
 800387a:	18e3      	adds	r3, r4, r3
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	464b      	mov	r3, r9
 8003880:	eb45 0303 	adc.w	r3, r5, r3
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003892:	4629      	mov	r1, r5
 8003894:	028b      	lsls	r3, r1, #10
 8003896:	4621      	mov	r1, r4
 8003898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800389c:	4621      	mov	r1, r4
 800389e:	028a      	lsls	r2, r1, #10
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a6:	2200      	movs	r2, #0
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	61fa      	str	r2, [r7, #28]
 80038ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b0:	f7fd f8bc 	bl	8000a2c <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4613      	mov	r3, r2
 80038ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038d6:	e002      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3750      	adds	r7, #80	@ 0x50
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	007a1200 	.word	0x007a1200

080038f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003914:	f7ff fff0 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	08008470 	.word	0x08008470

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800393c:	f7ff ffdc 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0b5b      	lsrs	r3, r3, #13
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	08008470 	.word	0x08008470

08003960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e042      	b.n	80039f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fcd4 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	@ 0x24
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f82b 	bl	8003a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a04:	b0c0      	sub	sp, #256	@ 0x100
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1c:	68d9      	ldr	r1, [r3, #12]
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	ea40 0301 	orr.w	r3, r0, r1
 8003a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a58:	f021 010c 	bic.w	r1, r1, #12
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a66:	430b      	orrs	r3, r1
 8003a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7a:	6999      	ldr	r1, [r3, #24]
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	ea40 0301 	orr.w	r3, r0, r1
 8003a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b8f      	ldr	r3, [pc, #572]	@ (8003ccc <UART_SetConfig+0x2cc>)
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d005      	beq.n	8003aa0 <UART_SetConfig+0xa0>
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b8d      	ldr	r3, [pc, #564]	@ (8003cd0 <UART_SetConfig+0x2d0>)
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d104      	bne.n	8003aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7ff ff4a 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003aa8:	e003      	b.n	8003ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aaa:	f7ff ff31 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8003aae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003abc:	f040 810c 	bne.w	8003cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	1891      	adds	r1, r2, r2
 8003ad8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ada:	415b      	adcs	r3, r3
 8003adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	eb12 0801 	adds.w	r8, r2, r1
 8003ae8:	4629      	mov	r1, r5
 8003aea:	eb43 0901 	adc.w	r9, r3, r1
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b02:	4690      	mov	r8, r2
 8003b04:	4699      	mov	r9, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	eb18 0303 	adds.w	r3, r8, r3
 8003b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b10:	462b      	mov	r3, r5
 8003b12:	eb49 0303 	adc.w	r3, r9, r3
 8003b16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b2e:	460b      	mov	r3, r1
 8003b30:	18db      	adds	r3, r3, r3
 8003b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b34:	4613      	mov	r3, r2
 8003b36:	eb42 0303 	adc.w	r3, r2, r3
 8003b3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b44:	f7fc ff72 	bl	8000a2c <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4b61      	ldr	r3, [pc, #388]	@ (8003cd4 <UART_SetConfig+0x2d4>)
 8003b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	011c      	lsls	r4, r3, #4
 8003b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	1891      	adds	r1, r2, r2
 8003b6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b70:	415b      	adcs	r3, r3
 8003b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b78:	4641      	mov	r1, r8
 8003b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b7e:	4649      	mov	r1, r9
 8003b80:	eb43 0b01 	adc.w	fp, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b98:	4692      	mov	sl, r2
 8003b9a:	469b      	mov	fp, r3
 8003b9c:	4643      	mov	r3, r8
 8003b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	18db      	adds	r3, r3, r3
 8003bc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bca:	4613      	mov	r3, r2
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bda:	f7fc ff27 	bl	8000a2c <__aeabi_uldivmod>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <UART_SetConfig+0x2d4>)
 8003be6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2264      	movs	r2, #100	@ 0x64
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	1acb      	subs	r3, r1, r3
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bfa:	4b36      	ldr	r3, [pc, #216]	@ (8003cd4 <UART_SetConfig+0x2d4>)
 8003bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c08:	441c      	add	r4, r3
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c24:	415b      	adcs	r3, r3
 8003c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	1851      	adds	r1, r2, r1
 8003c30:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c32:	4649      	mov	r1, r9
 8003c34:	414b      	adcs	r3, r1
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c44:	4659      	mov	r1, fp
 8003c46:	00cb      	lsls	r3, r1, #3
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4e:	4651      	mov	r1, sl
 8003c50:	00ca      	lsls	r2, r1, #3
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c60:	464b      	mov	r3, r9
 8003c62:	460a      	mov	r2, r1
 8003c64:	eb42 0303 	adc.w	r3, r2, r3
 8003c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c80:	460b      	mov	r3, r1
 8003c82:	18db      	adds	r3, r3, r3
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c86:	4613      	mov	r3, r2
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c96:	f7fc fec9 	bl	8000a2c <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <UART_SetConfig+0x2d4>)
 8003ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2164      	movs	r1, #100	@ 0x64
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3332      	adds	r3, #50	@ 0x32
 8003cb2:	4a08      	ldr	r2, [pc, #32]	@ (8003cd4 <UART_SetConfig+0x2d4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	f003 0207 	and.w	r2, r3, #7
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4422      	add	r2, r4
 8003cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc8:	e106      	b.n	8003ed8 <UART_SetConfig+0x4d8>
 8003cca:	bf00      	nop
 8003ccc:	40011000 	.word	0x40011000
 8003cd0:	40011400 	.word	0x40011400
 8003cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cea:	4642      	mov	r2, r8
 8003cec:	464b      	mov	r3, r9
 8003cee:	1891      	adds	r1, r2, r2
 8003cf0:	6239      	str	r1, [r7, #32]
 8003cf2:	415b      	adcs	r3, r3
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	1854      	adds	r4, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb43 0501 	adc.w	r5, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	00eb      	lsls	r3, r5, #3
 8003d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d12:	00e2      	lsls	r2, r4, #3
 8003d14:	4614      	mov	r4, r2
 8003d16:	461d      	mov	r5, r3
 8003d18:	4643      	mov	r3, r8
 8003d1a:	18e3      	adds	r3, r4, r3
 8003d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d20:	464b      	mov	r3, r9
 8003d22:	eb45 0303 	adc.w	r3, r5, r3
 8003d26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d46:	4629      	mov	r1, r5
 8003d48:	008b      	lsls	r3, r1, #2
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d50:	4621      	mov	r1, r4
 8003d52:	008a      	lsls	r2, r1, #2
 8003d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d58:	f7fc fe68 	bl	8000a2c <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4b60      	ldr	r3, [pc, #384]	@ (8003ee4 <UART_SetConfig+0x4e4>)
 8003d62:	fba3 2302 	umull	r2, r3, r3, r2
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	011c      	lsls	r4, r3, #4
 8003d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	1891      	adds	r1, r2, r2
 8003d82:	61b9      	str	r1, [r7, #24]
 8003d84:	415b      	adcs	r3, r3
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	1851      	adds	r1, r2, r1
 8003d90:	6139      	str	r1, [r7, #16]
 8003d92:	4649      	mov	r1, r9
 8003d94:	414b      	adcs	r3, r1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da4:	4659      	mov	r1, fp
 8003da6:	00cb      	lsls	r3, r1, #3
 8003da8:	4651      	mov	r1, sl
 8003daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dae:	4651      	mov	r1, sl
 8003db0:	00ca      	lsls	r2, r1, #3
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	4642      	mov	r2, r8
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	460a      	mov	r2, r1
 8003dc4:	eb42 0303 	adc.w	r3, r2, r3
 8003dc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003de4:	4649      	mov	r1, r9
 8003de6:	008b      	lsls	r3, r1, #2
 8003de8:	4641      	mov	r1, r8
 8003dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dee:	4641      	mov	r1, r8
 8003df0:	008a      	lsls	r2, r1, #2
 8003df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003df6:	f7fc fe19 	bl	8000a2c <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4b38      	ldr	r3, [pc, #224]	@ (8003ee4 <UART_SetConfig+0x4e4>)
 8003e02:	fba3 2301 	umull	r2, r3, r3, r1
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2264      	movs	r2, #100	@ 0x64
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	1acb      	subs	r3, r1, r3
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	3332      	adds	r3, #50	@ 0x32
 8003e14:	4a33      	ldr	r2, [pc, #204]	@ (8003ee4 <UART_SetConfig+0x4e4>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e20:	441c      	add	r4, r3
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	1891      	adds	r1, r2, r2
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e40:	4641      	mov	r1, r8
 8003e42:	1851      	adds	r1, r2, r1
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	4649      	mov	r1, r9
 8003e48:	414b      	adcs	r3, r1
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e58:	4659      	mov	r1, fp
 8003e5a:	00cb      	lsls	r3, r1, #3
 8003e5c:	4651      	mov	r1, sl
 8003e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e62:	4651      	mov	r1, sl
 8003e64:	00ca      	lsls	r2, r1, #3
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e72:	464b      	mov	r3, r9
 8003e74:	460a      	mov	r2, r1
 8003e76:	eb42 0303 	adc.w	r3, r2, r3
 8003e7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e86:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e94:	4649      	mov	r1, r9
 8003e96:	008b      	lsls	r3, r1, #2
 8003e98:	4641      	mov	r1, r8
 8003e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	008a      	lsls	r2, r1, #2
 8003ea2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ea6:	f7fc fdc1 	bl	8000a2c <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <UART_SetConfig+0x4e4>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	@ 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	3332      	adds	r3, #50	@ 0x32
 8003ec2:	4a08      	ldr	r2, [pc, #32]	@ (8003ee4 <UART_SetConfig+0x4e4>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4422      	add	r2, r4
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee4:	51eb851f 	.word	0x51eb851f

08003ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ee8:	b084      	sub	sp, #16
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	f107 001c 	add.w	r0, r7, #28
 8003ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003efa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d123      	bne.n	8003f4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f001 fae8 	bl	8005514 <USB_CoreReset>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e01b      	b.n	8003f82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f001 fadc 	bl	8005514 <USB_CoreReset>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d106      	bne.n	8003f76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f74:	e005      	b.n	8003f82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f82:	7fbb      	ldrb	r3, [r7, #30]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10b      	bne.n	8003fa0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f043 0206 	orr.w	r2, r3, #6
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fac:	b004      	add	sp, #16
 8003fae:	4770      	bx	lr

08003fb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d165      	bne.n	8004090 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4a41      	ldr	r2, [pc, #260]	@ (80040cc <USB_SetTurnaroundTime+0x11c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d906      	bls.n	8003fda <USB_SetTurnaroundTime+0x2a>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a40      	ldr	r2, [pc, #256]	@ (80040d0 <USB_SetTurnaroundTime+0x120>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d202      	bcs.n	8003fda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fd4:	230f      	movs	r3, #15
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e062      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80040d0 <USB_SetTurnaroundTime+0x120>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d306      	bcc.n	8003ff0 <USB_SetTurnaroundTime+0x40>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80040d4 <USB_SetTurnaroundTime+0x124>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d202      	bcs.n	8003ff0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fea:	230e      	movs	r3, #14
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e057      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a38      	ldr	r2, [pc, #224]	@ (80040d4 <USB_SetTurnaroundTime+0x124>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d306      	bcc.n	8004006 <USB_SetTurnaroundTime+0x56>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a37      	ldr	r2, [pc, #220]	@ (80040d8 <USB_SetTurnaroundTime+0x128>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d202      	bcs.n	8004006 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004000:	230d      	movs	r3, #13
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e04c      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a33      	ldr	r2, [pc, #204]	@ (80040d8 <USB_SetTurnaroundTime+0x128>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d306      	bcc.n	800401c <USB_SetTurnaroundTime+0x6c>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a32      	ldr	r2, [pc, #200]	@ (80040dc <USB_SetTurnaroundTime+0x12c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d802      	bhi.n	800401c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004016:	230c      	movs	r3, #12
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e041      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a2f      	ldr	r2, [pc, #188]	@ (80040dc <USB_SetTurnaroundTime+0x12c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d906      	bls.n	8004032 <USB_SetTurnaroundTime+0x82>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a2e      	ldr	r2, [pc, #184]	@ (80040e0 <USB_SetTurnaroundTime+0x130>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d802      	bhi.n	8004032 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800402c:	230b      	movs	r3, #11
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e036      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4a2a      	ldr	r2, [pc, #168]	@ (80040e0 <USB_SetTurnaroundTime+0x130>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d906      	bls.n	8004048 <USB_SetTurnaroundTime+0x98>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a29      	ldr	r2, [pc, #164]	@ (80040e4 <USB_SetTurnaroundTime+0x134>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d802      	bhi.n	8004048 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004042:	230a      	movs	r3, #10
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e02b      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a26      	ldr	r2, [pc, #152]	@ (80040e4 <USB_SetTurnaroundTime+0x134>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d906      	bls.n	800405e <USB_SetTurnaroundTime+0xae>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a25      	ldr	r2, [pc, #148]	@ (80040e8 <USB_SetTurnaroundTime+0x138>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d202      	bcs.n	800405e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004058:	2309      	movs	r3, #9
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e020      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4a21      	ldr	r2, [pc, #132]	@ (80040e8 <USB_SetTurnaroundTime+0x138>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d306      	bcc.n	8004074 <USB_SetTurnaroundTime+0xc4>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a20      	ldr	r2, [pc, #128]	@ (80040ec <USB_SetTurnaroundTime+0x13c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d802      	bhi.n	8004074 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800406e:	2308      	movs	r3, #8
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e015      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a1d      	ldr	r2, [pc, #116]	@ (80040ec <USB_SetTurnaroundTime+0x13c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d906      	bls.n	800408a <USB_SetTurnaroundTime+0xda>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a1c      	ldr	r2, [pc, #112]	@ (80040f0 <USB_SetTurnaroundTime+0x140>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d202      	bcs.n	800408a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004084:	2307      	movs	r3, #7
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e00a      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800408a:	2306      	movs	r3, #6
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e007      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004096:	2309      	movs	r3, #9
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e001      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800409c:	2309      	movs	r3, #9
 800409e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	029b      	lsls	r3, r3, #10
 80040b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	00d8acbf 	.word	0x00d8acbf
 80040d0:	00e4e1c0 	.word	0x00e4e1c0
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	01067380 	.word	0x01067380
 80040dc:	011a499f 	.word	0x011a499f
 80040e0:	01312cff 	.word	0x01312cff
 80040e4:	014ca43f 	.word	0x014ca43f
 80040e8:	016e3600 	.word	0x016e3600
 80040ec:	01a6ab1f 	.word	0x01a6ab1f
 80040f0:	01e84800 	.word	0x01e84800

080040f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d115      	bne.n	8004186 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004166:	200a      	movs	r0, #10
 8004168:	f7fd fa14 	bl	8001594 <HAL_Delay>
      ms += 10U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	330a      	adds	r3, #10
 8004170:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f001 f93f 	bl	80053f6 <USB_GetMode>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d01e      	beq.n	80041bc <USB_SetCurrentMode+0x84>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2bc7      	cmp	r3, #199	@ 0xc7
 8004182:	d9f0      	bls.n	8004166 <USB_SetCurrentMode+0x2e>
 8004184:	e01a      	b.n	80041bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d115      	bne.n	80041b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004198:	200a      	movs	r0, #10
 800419a:	f7fd f9fb 	bl	8001594 <HAL_Delay>
      ms += 10U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	330a      	adds	r3, #10
 80041a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 f926 	bl	80053f6 <USB_GetMode>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <USB_SetCurrentMode+0x84>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80041b4:	d9f0      	bls.n	8004198 <USB_SetCurrentMode+0x60>
 80041b6:	e001      	b.n	80041bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e005      	b.n	80041c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2bc8      	cmp	r3, #200	@ 0xc8
 80041c0:	d101      	bne.n	80041c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041d0:	b084      	sub	sp, #16
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80041de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e009      	b.n	8004204 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3340      	adds	r3, #64	@ 0x40
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b0e      	cmp	r3, #14
 8004208:	d9f2      	bls.n	80041f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800420a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11c      	bne.n	800424c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004220:	f043 0302 	orr.w	r3, r3, #2
 8004224:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004242:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	639a      	str	r2, [r3, #56]	@ 0x38
 800424a:	e00b      	b.n	8004264 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004270:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10d      	bne.n	8004294 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004280:	2100      	movs	r1, #0
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f968 	bl	8004558 <USB_SetDevSpeed>
 8004288:	e008      	b.n	800429c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800428a:	2101      	movs	r1, #1
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f963 	bl	8004558 <USB_SetDevSpeed>
 8004292:	e003      	b.n	800429c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004294:	2103      	movs	r1, #3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f95e 	bl	8004558 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800429c:	2110      	movs	r1, #16
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8fa 	bl	8004498 <USB_FlushTxFifo>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f924 	bl	80044fc <USB_FlushRxFifo>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c4:	461a      	mov	r2, r3
 80042c6:	2300      	movs	r3, #0
 80042c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d0:	461a      	mov	r2, r3
 80042d2:	2300      	movs	r3, #0
 80042d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042dc:	461a      	mov	r2, r3
 80042de:	2300      	movs	r3, #0
 80042e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	e043      	b.n	8004370 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042fe:	d118      	bne.n	8004332 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004312:	461a      	mov	r2, r3
 8004314:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e013      	b.n	8004344 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004328:	461a      	mov	r2, r3
 800432a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e008      	b.n	8004344 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433e:	461a      	mov	r2, r3
 8004340:	2300      	movs	r3, #0
 8004342:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004350:	461a      	mov	r2, r3
 8004352:	2300      	movs	r3, #0
 8004354:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004362:	461a      	mov	r2, r3
 8004364:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004368:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3301      	adds	r3, #1
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004374:	461a      	mov	r2, r3
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4293      	cmp	r3, r2
 800437a:	d3b5      	bcc.n	80042e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	e043      	b.n	800440a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004398:	d118      	bne.n	80043cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ac:	461a      	mov	r2, r3
 80043ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	e013      	b.n	80043de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c2:	461a      	mov	r2, r3
 80043c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e008      	b.n	80043de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	2300      	movs	r3, #0
 80043dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ea:	461a      	mov	r2, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004402:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	3301      	adds	r3, #1
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800440e:	461a      	mov	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4293      	cmp	r3, r2
 8004414:	d3b5      	bcc.n	8004382 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004428:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004436:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004438:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <USB_DevInit+0x2c4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004458:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f043 0208 	orr.w	r2, r3, #8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800446c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004470:	2b01      	cmp	r3, #1
 8004472:	d107      	bne.n	8004484 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004484:	7dfb      	ldrb	r3, [r7, #23]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004490:	b004      	add	sp, #16
 8004492:	4770      	bx	lr
 8004494:	803c3800 	.word	0x803c3800

08004498 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044b2:	d901      	bls.n	80044b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e01b      	b.n	80044f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	daf2      	bge.n	80044a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	019b      	lsls	r3, r3, #6
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044dc:	d901      	bls.n	80044e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e006      	b.n	80044f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d0f0      	beq.n	80044d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004514:	d901      	bls.n	800451a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e018      	b.n	800454c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	daf2      	bge.n	8004508 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2210      	movs	r2, #16
 800452a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004538:	d901      	bls.n	800453e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e006      	b.n	800454c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b10      	cmp	r3, #16
 8004548:	d0f0      	beq.n	800452c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0306 	and.w	r3, r3, #6
 80045a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045aa:	2300      	movs	r3, #0
 80045ac:	75fb      	strb	r3, [r7, #23]
 80045ae:	e00a      	b.n	80045c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d002      	beq.n	80045bc <USB_GetDevSpeed+0x32>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b06      	cmp	r3, #6
 80045ba:	d102      	bne.n	80045c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045bc:	2302      	movs	r3, #2
 80045be:	75fb      	strb	r3, [r7, #23]
 80045c0:	e001      	b.n	80045c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045c2:	230f      	movs	r3, #15
 80045c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	785b      	ldrb	r3, [r3, #1]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d13a      	bne.n	8004666 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	b29b      	uxth	r3, r3
 8004608:	68f9      	ldr	r1, [r7, #12]
 800460a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800460e:	4313      	orrs	r3, r2
 8004610:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d155      	bne.n	80046d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	791b      	ldrb	r3, [r3, #4]
 8004642:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004644:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	059b      	lsls	r3, r3, #22
 800464a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800464c:	4313      	orrs	r3, r2
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	440a      	add	r2, r1
 8004656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800465a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e036      	b.n	80046d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	2101      	movs	r1, #1
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004684:	4313      	orrs	r3, r2
 8004686:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11a      	bne.n	80046d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046ba:	430b      	orrs	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	0151      	lsls	r1, r2, #5
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	440a      	add	r2, r1
 80046c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d161      	bne.n	80047c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004712:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004716:	d11f      	bne.n	8004758 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004732:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004736:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004752:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004756:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800475e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	2101      	movs	r1, #1
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004778:	4013      	ands	r3, r2
 800477a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	2101      	movs	r1, #1
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	b29b      	uxth	r3, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800479c:	4013      	ands	r3, r2
 800479e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	0159      	lsls	r1, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	440b      	add	r3, r1
 80047b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ba:	4619      	mov	r1, r3
 80047bc:	4b35      	ldr	r3, [pc, #212]	@ (8004894 <USB_DeactivateEndpoint+0x1b0>)
 80047be:	4013      	ands	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]
 80047c2:	e060      	b.n	8004886 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047da:	d11f      	bne.n	800481c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80047fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004816:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800481a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	43db      	mvns	r3, r3
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800483c:	4013      	ands	r3, r2
 800483e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	2101      	movs	r1, #1
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	43db      	mvns	r3, r3
 800485a:	68f9      	ldr	r1, [r7, #12]
 800485c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004860:	4013      	ands	r3, r2
 8004862:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	0159      	lsls	r1, r3, #5
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	440b      	add	r3, r1
 800487a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487e:	4619      	mov	r1, r3
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <USB_DeactivateEndpoint+0x1b4>)
 8004882:	4013      	ands	r3, r2
 8004884:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	ec337800 	.word	0xec337800
 8004898:	eff37800 	.word	0xeff37800

0800489c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	@ 0x28
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	f040 817f 	bne.w	8004bbc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d132      	bne.n	800492c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004904:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004908:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	440a      	add	r2, r1
 8004920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004924:	0cdb      	lsrs	r3, r3, #19
 8004926:	04db      	lsls	r3, r3, #19
 8004928:	6113      	str	r3, [r2, #16]
 800492a:	e097      	b.n	8004a5c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004946:	0cdb      	lsrs	r3, r3, #19
 8004948:	04db      	lsls	r3, r3, #19
 800494a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004966:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800496a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800496e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11a      	bne.n	80049ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	d903      	bls.n	800498a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049a8:	6113      	str	r3, [r2, #16]
 80049aa:	e044      	b.n	8004a36 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4413      	add	r3, r2
 80049b6:	1e5a      	subs	r2, r3, #1
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	8afb      	ldrh	r3, [r7, #22]
 80049d2:	04d9      	lsls	r1, r3, #19
 80049d4:	4ba4      	ldr	r3, [pc, #656]	@ (8004c68 <USB_EPStartXfer+0x3cc>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	0148      	lsls	r0, r1, #5
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	4401      	add	r1, r0
 80049e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80049e4:	4313      	orrs	r3, r2
 80049e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	791b      	ldrb	r3, [r3, #4]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d122      	bne.n	8004a36 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a0a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004a0e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	8afb      	ldrh	r3, [r7, #22]
 8004a20:	075b      	lsls	r3, r3, #29
 8004a22:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004a26:	69b9      	ldr	r1, [r7, #24]
 8004a28:	0148      	lsls	r0, r1, #5
 8004a2a:	69f9      	ldr	r1, [r7, #28]
 8004a2c:	4401      	add	r1, r0
 8004a2e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a32:	4313      	orrs	r3, r2
 8004a34:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	0148      	lsls	r0, r1, #5
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	4401      	add	r1, r0
 8004a54:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d14b      	bne.n	8004afa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a76:	461a      	mov	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	791b      	ldrb	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d128      	bne.n	8004ad8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d110      	bne.n	8004ab8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e00f      	b.n	8004ad8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ad6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	e166      	b.n	8004dc8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b18:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	791b      	ldrb	r3, [r3, #4]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d015      	beq.n	8004b4e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 814e 	beq.w	8004dc8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b42:	69f9      	ldr	r1, [r7, #28]
 8004b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	634b      	str	r3, [r1, #52]	@ 0x34
 8004b4c:	e13c      	b.n	8004dc8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d110      	bne.n	8004b80 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e00f      	b.n	8004ba0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b9e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	68d9      	ldr	r1, [r3, #12]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	b298      	uxth	r0, r3
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f9b9 	bl	8004f2c <USB_WritePacket>
 8004bba:	e105      	b.n	8004dc8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd6:	0cdb      	lsrs	r3, r3, #19
 8004bd8:	04db      	lsls	r3, r3, #19
 8004bda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bf6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bfa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bfe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d132      	bne.n	8004c6c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	0148      	lsls	r0, r1, #5
 8004c38:	69f9      	ldr	r1, [r7, #28]
 8004c3a:	4401      	add	r1, r0
 8004c3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c40:	4313      	orrs	r3, r2
 8004c42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c62:	6113      	str	r3, [r2, #16]
 8004c64:	e062      	b.n	8004d2c <USB_EPStartXfer+0x490>
 8004c66:	bf00      	nop
 8004c68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d123      	bne.n	8004cbc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8a:	69b9      	ldr	r1, [r7, #24]
 8004c8c:	0148      	lsls	r0, r1, #5
 8004c8e:	69f9      	ldr	r1, [r7, #28]
 8004c90:	4401      	add	r1, r0
 8004c92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c96:	4313      	orrs	r3, r2
 8004c98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cb8:	6113      	str	r3, [r2, #16]
 8004cba:	e037      	b.n	8004d2c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	1e5a      	subs	r2, r3, #1
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	8afa      	ldrh	r2, [r7, #22]
 8004cd8:	fb03 f202 	mul.w	r2, r3, r2
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	8afb      	ldrh	r3, [r7, #22]
 8004cf0:	04d9      	lsls	r1, r3, #19
 8004cf2:	4b38      	ldr	r3, [pc, #224]	@ (8004dd4 <USB_EPStartXfer+0x538>)
 8004cf4:	400b      	ands	r3, r1
 8004cf6:	69b9      	ldr	r1, [r7, #24]
 8004cf8:	0148      	lsls	r0, r1, #5
 8004cfa:	69f9      	ldr	r1, [r7, #28]
 8004cfc:	4401      	add	r1, r0
 8004cfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d02:	4313      	orrs	r3, r2
 8004d04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	0148      	lsls	r0, r1, #5
 8004d20:	69f9      	ldr	r1, [r7, #28]
 8004d22:	4401      	add	r1, r0
 8004d24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d10d      	bne.n	8004d4e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68d9      	ldr	r1, [r3, #12]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	791b      	ldrb	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d128      	bne.n	8004da8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d110      	bne.n	8004d88 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e00f      	b.n	8004da8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004dc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	1ff80000 	.word	0x1ff80000

08004dd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d14a      	bne.n	8004e8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e0e:	f040 8086 	bne.w	8004f1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d902      	bls.n	8004e70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e6e:	e056      	b.n	8004f1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e88:	d0e7      	beq.n	8004e5a <USB_EPStopXfer+0x82>
 8004e8a:	e048      	b.n	8004f1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ea4:	d13b      	bne.n	8004f1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ec4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ec8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ee8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004eec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d902      	bls.n	8004f04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
          break;
 8004f02:	e00c      	b.n	8004f1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f1c:	d0e7      	beq.n	8004eee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	@ 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4611      	mov	r1, r2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	71fb      	strb	r3, [r7, #7]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d123      	bne.n	8004f9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f52:	88bb      	ldrh	r3, [r7, #4]
 8004f54:	3303      	adds	r3, #3
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e018      	b.n	8004f92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	031a      	lsls	r2, r3, #12
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	3301      	adds	r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3e2      	bcc.n	8004f60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3724      	adds	r7, #36	@ 0x24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b08b      	sub	sp, #44	@ 0x2c
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	089b      	lsrs	r3, r3, #2
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e014      	b.n	8004ffe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	3301      	adds	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	429a      	cmp	r2, r3
 8005004:	d3e6      	bcc.n	8004fd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005006:	8bfb      	ldrh	r3, [r7, #30]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01e      	beq.n	800504a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005016:	461a      	mov	r2, r3
 8005018:	f107 0310 	add.w	r3, r7, #16
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	b2da      	uxtb	r2, r3
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	701a      	strb	r2, [r3, #0]
      i++;
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	3301      	adds	r3, #1
 8005036:	623b      	str	r3, [r7, #32]
      pDest++;
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	3301      	adds	r3, #1
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800503e:	8bfb      	ldrh	r3, [r7, #30]
 8005040:	3b01      	subs	r3, #1
 8005042:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005044:	8bfb      	ldrh	r3, [r7, #30]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1ea      	bne.n	8005020 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800504c:	4618      	mov	r0, r3
 800504e:	372c      	adds	r7, #44	@ 0x2c
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d12c      	bne.n	80050ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	db12      	blt.n	80050ac <USB_EPSetStall+0x54>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00f      	beq.n	80050ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e02b      	b.n	8005126 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	db12      	blt.n	8005106 <USB_EPSetStall+0xae>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00f      	beq.n	8005106 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005100:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005104:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005120:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005124:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d128      	bne.n	80051a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800516a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800516e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	791b      	ldrb	r3, [r3, #4]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d003      	beq.n	8005180 <USB_EPClearStall+0x4c>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	791b      	ldrb	r3, [r3, #4]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d138      	bne.n	80051f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e027      	b.n	80051f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	791b      	ldrb	r3, [r3, #4]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d003      	beq.n	80051d2 <USB_EPClearStall+0x9e>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d10f      	bne.n	80051f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800521e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005222:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005234:	68f9      	ldr	r1, [r7, #12]
 8005236:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005266:	f023 0303 	bic.w	r3, r3, #3
 800526a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800527a:	f023 0302 	bic.w	r3, r3, #2
 800527e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052a8:	f023 0303 	bic.w	r3, r3, #3
 80052ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4013      	ands	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052e8:	68fb      	ldr	r3, [r7, #12]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	0c1b      	lsrs	r3, r3, #16
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	b29b      	uxth	r3, r3
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800538c:	68bb      	ldr	r3, [r7, #8]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	460b      	mov	r3, r1
 80053a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	01db      	lsls	r3, r3, #7
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4013      	ands	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053e8:	68bb      	ldr	r3, [r7, #8]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0301 	and.w	r3, r3, #1
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800542c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005430:	f023 0307 	bic.w	r3, r3, #7
 8005434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	460b      	mov	r3, r1
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	333c      	adds	r3, #60	@ 0x3c
 800546e:	3304      	adds	r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <USB_EP0_OutStart+0xb8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d90a      	bls.n	8005492 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800548c:	d101      	bne.n	8005492 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e037      	b.n	8005502 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005498:	461a      	mov	r2, r3
 800549a:	2300      	movs	r3, #0
 800549c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c0:	f043 0318 	orr.w	r3, r3, #24
 80054c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80054d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054da:	7afb      	ldrb	r3, [r7, #11]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10f      	bne.n	8005500 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80054fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	4f54300a 	.word	0x4f54300a

08005514 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800552c:	d901      	bls.n	8005532 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e01b      	b.n	800556a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	daf2      	bge.n	8005520 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005556:	d901      	bls.n	800555c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e006      	b.n	800556a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d0f0      	beq.n	800554a <USB_CoreReset+0x36>

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005584:	2010      	movs	r0, #16
 8005586:	f002 f94d 	bl	8007824 <USBD_static_malloc>
 800558a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	32b0      	adds	r2, #176	@ 0xb0
 800559c:	2100      	movs	r1, #0
 800559e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e048      	b.n	8005638 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	32b0      	adds	r2, #176	@ 0xb0
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	32b0      	adds	r2, #176	@ 0xb0
 80055c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	7c1b      	ldrb	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80055d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <USBD_HID_Init+0xc8>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f003 020f 	and.w	r2, r3, #15
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	3326      	adds	r3, #38	@ 0x26
 80055e8:	2207      	movs	r2, #7
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	e00c      	b.n	8005608 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80055ee:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <USBD_HID_Init+0xc8>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	f003 020f 	and.w	r2, r3, #15
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	3326      	adds	r3, #38	@ 0x26
 8005604:	220a      	movs	r2, #10
 8005606:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005608:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <USBD_HID_Init+0xc8>)
 800560a:	7819      	ldrb	r1, [r3, #0]
 800560c:	2304      	movs	r3, #4
 800560e:	2203      	movs	r2, #3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 fff6 	bl	8007602 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005616:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <USBD_HID_Init+0xc8>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	3324      	adds	r3, #36	@ 0x24
 800562c:	2201      	movs	r2, #1
 800562e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	200000ca 	.word	0x200000ca

08005644 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005650:	4b1f      	ldr	r3, [pc, #124]	@ (80056d0 <USBD_HID_DeInit+0x8c>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fff9 	bl	800764e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800565c:	4b1c      	ldr	r3, [pc, #112]	@ (80056d0 <USBD_HID_DeInit+0x8c>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	f003 020f 	and.w	r2, r3, #15
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3324      	adds	r3, #36	@ 0x24
 8005672:	2200      	movs	r2, #0
 8005674:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005676:	4b16      	ldr	r3, [pc, #88]	@ (80056d0 <USBD_HID_DeInit+0x8c>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3326      	adds	r3, #38	@ 0x26
 800568c:	2200      	movs	r2, #0
 800568e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	32b0      	adds	r2, #176	@ 0xb0
 800569a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d011      	beq.n	80056c6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	32b0      	adds	r2, #176	@ 0xb0
 80056ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f002 f8c5 	bl	8007840 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	32b0      	adds	r2, #176	@ 0xb0
 80056c0:	2100      	movs	r1, #0
 80056c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	200000ca 	.word	0x200000ca

080056d4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	32b0      	adds	r2, #176	@ 0xb0
 80056e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ec:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e0e8      	b.n	80058d2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005708:	2b00      	cmp	r3, #0
 800570a:	d046      	beq.n	800579a <USBD_HID_Setup+0xc6>
 800570c:	2b20      	cmp	r3, #32
 800570e:	f040 80d8 	bne.w	80058c2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	3b02      	subs	r3, #2
 8005718:	2b09      	cmp	r3, #9
 800571a:	d836      	bhi.n	800578a <USBD_HID_Setup+0xb6>
 800571c:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <USBD_HID_Setup+0x50>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	0800577b 	.word	0x0800577b
 8005728:	0800575b 	.word	0x0800575b
 800572c:	0800578b 	.word	0x0800578b
 8005730:	0800578b 	.word	0x0800578b
 8005734:	0800578b 	.word	0x0800578b
 8005738:	0800578b 	.word	0x0800578b
 800573c:	0800578b 	.word	0x0800578b
 8005740:	0800578b 	.word	0x0800578b
 8005744:	08005769 	.word	0x08005769
 8005748:	0800574d 	.word	0x0800574d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	885b      	ldrh	r3, [r3, #2]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]
          break;
 8005758:	e01e      	b.n	8005798 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fbf9 	bl	8006f58 <USBD_CtlSendData>
          break;
 8005766:	e017      	b.n	8005798 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	885b      	ldrh	r3, [r3, #2]
 800576c:	0a1b      	lsrs	r3, r3, #8
 800576e:	b29b      	uxth	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	605a      	str	r2, [r3, #4]
          break;
 8005778:	e00e      	b.n	8005798 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3304      	adds	r3, #4
 800577e:	2201      	movs	r2, #1
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fbe8 	bl	8006f58 <USBD_CtlSendData>
          break;
 8005788:	e006      	b.n	8005798 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 fb66 	bl	8006e5e <USBD_CtlError>
          ret = USBD_FAIL;
 8005792:	2303      	movs	r3, #3
 8005794:	75fb      	strb	r3, [r7, #23]
          break;
 8005796:	bf00      	nop
      }
      break;
 8005798:	e09a      	b.n	80058d0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	2b0b      	cmp	r3, #11
 80057a0:	f200 8086 	bhi.w	80058b0 <USBD_HID_Setup+0x1dc>
 80057a4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <USBD_HID_Setup+0xd8>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057dd 	.word	0x080057dd
 80057b0:	080058bf 	.word	0x080058bf
 80057b4:	080058b1 	.word	0x080058b1
 80057b8:	080058b1 	.word	0x080058b1
 80057bc:	080058b1 	.word	0x080058b1
 80057c0:	080058b1 	.word	0x080058b1
 80057c4:	08005807 	.word	0x08005807
 80057c8:	080058b1 	.word	0x080058b1
 80057cc:	080058b1 	.word	0x080058b1
 80057d0:	080058b1 	.word	0x080058b1
 80057d4:	0800585f 	.word	0x0800585f
 80057d8:	08005889 	.word	0x08005889
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d107      	bne.n	80057f8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80057e8:	f107 030a 	add.w	r3, r7, #10
 80057ec:	2202      	movs	r2, #2
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fbb1 	bl	8006f58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057f6:	e063      	b.n	80058c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 fb2f 	bl	8006e5e <USBD_CtlError>
            ret = USBD_FAIL;
 8005800:	2303      	movs	r3, #3
 8005802:	75fb      	strb	r3, [r7, #23]
          break;
 8005804:	e05c      	b.n	80058c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	885b      	ldrh	r3, [r3, #2]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b22      	cmp	r3, #34	@ 0x22
 8005810:	d108      	bne.n	8005824 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	88db      	ldrh	r3, [r3, #6]
 8005816:	2b4a      	cmp	r3, #74	@ 0x4a
 8005818:	bf28      	it	cs
 800581a:	234a      	movcs	r3, #74	@ 0x4a
 800581c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800581e:	4b2f      	ldr	r3, [pc, #188]	@ (80058dc <USBD_HID_Setup+0x208>)
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	e015      	b.n	8005850 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	885b      	ldrh	r3, [r3, #2]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b21      	cmp	r3, #33	@ 0x21
 800582e:	d108      	bne.n	8005842 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005830:	4b2b      	ldr	r3, [pc, #172]	@ (80058e0 <USBD_HID_Setup+0x20c>)
 8005832:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	88db      	ldrh	r3, [r3, #6]
 8005838:	2b09      	cmp	r3, #9
 800583a:	bf28      	it	cs
 800583c:	2309      	movcs	r3, #9
 800583e:	82bb      	strh	r3, [r7, #20]
 8005840:	e006      	b.n	8005850 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fb0a 	bl	8006e5e <USBD_CtlError>
            ret = USBD_FAIL;
 800584a:	2303      	movs	r3, #3
 800584c:	75fb      	strb	r3, [r7, #23]
            break;
 800584e:	e037      	b.n	80058c0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005850:	8abb      	ldrh	r3, [r7, #20]
 8005852:	461a      	mov	r2, r3
 8005854:	6939      	ldr	r1, [r7, #16]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fb7e 	bl	8006f58 <USBD_CtlSendData>
          break;
 800585c:	e030      	b.n	80058c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b03      	cmp	r3, #3
 8005868:	d107      	bne.n	800587a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3308      	adds	r3, #8
 800586e:	2201      	movs	r2, #1
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 fb70 	bl	8006f58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005878:	e022      	b.n	80058c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 faee 	bl	8006e5e <USBD_CtlError>
            ret = USBD_FAIL;
 8005882:	2303      	movs	r3, #3
 8005884:	75fb      	strb	r3, [r7, #23]
          break;
 8005886:	e01b      	b.n	80058c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b03      	cmp	r3, #3
 8005892:	d106      	bne.n	80058a2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	885b      	ldrh	r3, [r3, #2]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058a0:	e00e      	b.n	80058c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fada 	bl	8006e5e <USBD_CtlError>
            ret = USBD_FAIL;
 80058aa:	2303      	movs	r3, #3
 80058ac:	75fb      	strb	r3, [r7, #23]
          break;
 80058ae:	e007      	b.n	80058c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 fad3 	bl	8006e5e <USBD_CtlError>
          ret = USBD_FAIL;
 80058b8:	2303      	movs	r3, #3
 80058ba:	75fb      	strb	r3, [r7, #23]
          break;
 80058bc:	e000      	b.n	80058c0 <USBD_HID_Setup+0x1ec>
          break;
 80058be:	bf00      	nop
      }
      break;
 80058c0:	e006      	b.n	80058d0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 faca 	bl	8006e5e <USBD_CtlError>
      ret = USBD_FAIL;
 80058ca:	2303      	movs	r3, #3
 80058cc:	75fb      	strb	r3, [r7, #23]
      break;
 80058ce:	bf00      	nop
  }

  return (uint8_t)ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000080 	.word	0x20000080
 80058e0:	20000068 	.word	0x20000068

080058e4 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	32b0      	adds	r2, #176	@ 0xb0
 80058fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005900:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005908:	2303      	movs	r3, #3
 800590a:	e014      	b.n	8005936 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b03      	cmp	r3, #3
 8005916:	d10d      	bne.n	8005934 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	7b1b      	ldrb	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2201      	movs	r2, #1
 8005924:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005926:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <USBD_HID_SendReport+0x5c>)
 8005928:	7819      	ldrb	r1, [r3, #0]
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f001 ff35 	bl	800779e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200000ca 	.word	0x200000ca

08005944 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7c1b      	ldrb	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005954:	2308      	movs	r3, #8
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e001      	b.n	800595e <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 800595a:	230a      	movs	r3, #10
 800595c:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005974:	2181      	movs	r1, #129	@ 0x81
 8005976:	4809      	ldr	r0, [pc, #36]	@ (800599c <USBD_HID_GetFSCfgDesc+0x30>)
 8005978:	f000 fc3b 	bl	80061f2 <USBD_GetEpDesc>
 800597c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	220a      	movs	r2, #10
 8005988:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2222      	movs	r2, #34	@ 0x22
 800598e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005990:	4b02      	ldr	r3, [pc, #8]	@ (800599c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000044 	.word	0x20000044

080059a0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80059a8:	2181      	movs	r1, #129	@ 0x81
 80059aa:	4809      	ldr	r0, [pc, #36]	@ (80059d0 <USBD_HID_GetHSCfgDesc+0x30>)
 80059ac:	f000 fc21 	bl	80061f2 <USBD_GetEpDesc>
 80059b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2207      	movs	r2, #7
 80059bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2222      	movs	r2, #34	@ 0x22
 80059c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059c4:	4b02      	ldr	r3, [pc, #8]	@ (80059d0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000044 	.word	0x20000044

080059d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80059dc:	2181      	movs	r1, #129	@ 0x81
 80059de:	4809      	ldr	r0, [pc, #36]	@ (8005a04 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80059e0:	f000 fc07 	bl	80061f2 <USBD_GetEpDesc>
 80059e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	220a      	movs	r2, #10
 80059f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2222      	movs	r2, #34	@ 0x22
 80059f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059f8:	4b02      	ldr	r3, [pc, #8]	@ (8005a04 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000044 	.word	0x20000044

08005a08 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	32b0      	adds	r2, #176	@ 0xb0
 8005a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a22:	2200      	movs	r2, #0
 8005a24:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	220a      	movs	r2, #10
 8005a40:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005a42:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000074 	.word	0x20000074

08005a54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e01f      	b.n	8005aac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	79fa      	ldrb	r2, [r7, #7]
 8005a9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f001 fd47 	bl	8007534 <USBD_LL_Init>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e025      	b.n	8005b18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	32ae      	adds	r2, #174	@ 0xae
 8005ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00f      	beq.n	8005b08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	32ae      	adds	r2, #174	@ 0xae
 8005af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	f107 020e 	add.w	r2, r7, #14
 8005afc:	4610      	mov	r0, r2
 8005afe:	4798      	blx	r3
 8005b00:	4602      	mov	r2, r0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fd4f 	bl	80075cc <USBD_LL_Start>
 8005b2e:	4603      	mov	r3, r0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	4611      	mov	r1, r2
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 f90c 	bl	8006dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005bee:	f003 031f 	and.w	r3, r3, #31
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d01a      	beq.n	8005c2c <USBD_LL_SetupStage+0x72>
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d822      	bhi.n	8005c40 <USBD_LL_SetupStage+0x86>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <USBD_LL_SetupStage+0x4a>
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d00a      	beq.n	8005c18 <USBD_LL_SetupStage+0x5e>
 8005c02:	e01d      	b.n	8005c40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fb63 	bl	80062d8 <USBD_StdDevReq>
 8005c12:	4603      	mov	r3, r0
 8005c14:	73fb      	strb	r3, [r7, #15]
      break;
 8005c16:	e020      	b.n	8005c5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fbcb 	bl	80063bc <USBD_StdItfReq>
 8005c26:	4603      	mov	r3, r0
 8005c28:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2a:	e016      	b.n	8005c5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fc2d 	bl	8006494 <USBD_StdEPReq>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3e:	e00c      	b.n	8005c5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 fd1c 	bl	800768c <USBD_LL_StallEP>
 8005c54:	4603      	mov	r3, r0
 8005c56:	73fb      	strb	r3, [r7, #15]
      break;
 8005c58:	bf00      	nop
  }

  return ret;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d16e      	bne.n	8005d5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005c82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	f040 8098 	bne.w	8005dc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d913      	bls.n	8005cc4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	bf28      	it	cs
 8005cb6:	4613      	movcs	r3, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f001 f977 	bl	8006fb0 <USBD_CtlContinueRx>
 8005cc2:	e07d      	b.n	8005dc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d014      	beq.n	8005cfc <USBD_LL_DataOutStage+0x98>
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d81d      	bhi.n	8005d12 <USBD_LL_DataOutStage+0xae>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <USBD_LL_DataOutStage+0x7c>
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d003      	beq.n	8005ce6 <USBD_LL_DataOutStage+0x82>
 8005cde:	e018      	b.n	8005d12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	75bb      	strb	r3, [r7, #22]
            break;
 8005ce4:	e018      	b.n	8005d18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	4619      	mov	r1, r3
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fa64 	bl	80061be <USBD_CoreFindIF>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75bb      	strb	r3, [r7, #22]
            break;
 8005cfa:	e00d      	b.n	8005d18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	4619      	mov	r1, r3
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fa66 	bl	80061d8 <USBD_CoreFindEP>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	75bb      	strb	r3, [r7, #22]
            break;
 8005d10:	e002      	b.n	8005d18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75bb      	strb	r3, [r7, #22]
            break;
 8005d16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d18:	7dbb      	ldrb	r3, [r7, #22]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d119      	bne.n	8005d52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d113      	bne.n	8005d52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d2a:	7dba      	ldrb	r2, [r7, #22]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	32ae      	adds	r2, #174	@ 0xae
 8005d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d3a:	7dba      	ldrb	r2, [r7, #22]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d42:	7dba      	ldrb	r2, [r7, #22]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	32ae      	adds	r2, #174	@ 0xae
 8005d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f001 f93d 	bl	8006fd2 <USBD_CtlSendStatus>
 8005d58:	e032      	b.n	8005dc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	4619      	mov	r1, r3
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 fa37 	bl	80061d8 <USBD_CoreFindEP>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d6e:	7dbb      	ldrb	r3, [r7, #22]
 8005d70:	2bff      	cmp	r3, #255	@ 0xff
 8005d72:	d025      	beq.n	8005dc0 <USBD_LL_DataOutStage+0x15c>
 8005d74:	7dbb      	ldrb	r3, [r7, #22]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d122      	bne.n	8005dc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d117      	bne.n	8005db6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d86:	7dba      	ldrb	r2, [r7, #22]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	32ae      	adds	r2, #174	@ 0xae
 8005d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00f      	beq.n	8005db6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d96:	7dba      	ldrb	r2, [r7, #22]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d9e:	7dba      	ldrb	r2, [r7, #22]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	32ae      	adds	r2, #174	@ 0xae
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	7afa      	ldrb	r2, [r7, #11]
 8005dac:	4611      	mov	r1, r2
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	4798      	blx	r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	e000      	b.n	8005dc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d16f      	bne.n	8005ebe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3314      	adds	r3, #20
 8005de2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d15a      	bne.n	8005ea4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d914      	bls.n	8005e24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f001 f8bc 	bl	8006f8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e16:	2300      	movs	r3, #0
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f001 fcdf 	bl	80077e0 <USBD_LL_PrepareReceive>
 8005e22:	e03f      	b.n	8005ea4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d11c      	bne.n	8005e6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d316      	bcc.n	8005e6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d20f      	bcs.n	8005e6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f001 f89d 	bl	8006f8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2100      	movs	r1, #0
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f001 fcbc 	bl	80077e0 <USBD_LL_PrepareReceive>
 8005e68:	e01c      	b.n	8005ea4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d10f      	bne.n	8005e96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e96:	2180      	movs	r1, #128	@ 0x80
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f001 fbf7 	bl	800768c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 f8aa 	bl	8006ff8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d03a      	beq.n	8005f24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fe42 	bl	8005b38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ebc:	e032      	b.n	8005f24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ebe:	7afb      	ldrb	r3, [r7, #11]
 8005ec0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f985 	bl	80061d8 <USBD_CoreFindEP>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	2bff      	cmp	r3, #255	@ 0xff
 8005ed6:	d025      	beq.n	8005f24 <USBD_LL_DataInStage+0x15a>
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d122      	bne.n	8005f24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d11c      	bne.n	8005f24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005eea:	7dfa      	ldrb	r2, [r7, #23]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	32ae      	adds	r2, #174	@ 0xae
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d014      	beq.n	8005f24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005efa:	7dfa      	ldrb	r2, [r7, #23]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f02:	7dfa      	ldrb	r2, [r7, #23]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	32ae      	adds	r2, #174	@ 0xae
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	7afa      	ldrb	r2, [r7, #11]
 8005f10:	4611      	mov	r1, r2
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	4798      	blx	r3
 8005f16:	4603      	mov	r3, r0
 8005f18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f1a:	7dbb      	ldrb	r3, [r7, #22]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f20:	7dbb      	ldrb	r3, [r7, #22]
 8005f22:	e000      	b.n	8005f26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6852      	ldr	r2, [r2, #4]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	4611      	mov	r1, r2
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f90:	2303      	movs	r3, #3
 8005f92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f94:	2340      	movs	r3, #64	@ 0x40
 8005f96:	2200      	movs	r2, #0
 8005f98:	2100      	movs	r1, #0
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fb31 	bl	8007602 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2240      	movs	r2, #64	@ 0x40
 8005fac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fb0:	2340      	movs	r3, #64	@ 0x40
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2180      	movs	r1, #128	@ 0x80
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fb23 	bl	8007602 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2240      	movs	r2, #64	@ 0x40
 8005fc6:	621a      	str	r2, [r3, #32]

  return ret;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b04      	cmp	r3, #4
 8006004:	d006      	beq.n	8006014 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800600c:	b2da      	uxtb	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2204      	movs	r2, #4
 8006018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b04      	cmp	r3, #4
 800603c:	d106      	bne.n	800604c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006044:	b2da      	uxtb	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b03      	cmp	r3, #3
 800606c:	d110      	bne.n	8006090 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	32ae      	adds	r2, #174	@ 0xae
 80060b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e01c      	b.n	80060f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d115      	bne.n	80060f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	32ae      	adds	r2, #174	@ 0xae
 80060d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	32ae      	adds	r2, #174	@ 0xae
 80060e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	78fa      	ldrb	r2, [r7, #3]
 80060ee:	4611      	mov	r1, r2
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	32ae      	adds	r2, #174	@ 0xae
 8006114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	e01c      	b.n	800615a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b03      	cmp	r3, #3
 800612a:	d115      	bne.n	8006158 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	32ae      	adds	r2, #174	@ 0xae
 8006136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	32ae      	adds	r2, #174	@ 0xae
 800614a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	4611      	mov	r1, r2
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6852      	ldr	r2, [r2, #4]
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	4611      	mov	r1, r2
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	885b      	ldrh	r3, [r3, #2]
 800620e:	b29b      	uxth	r3, r3
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	4293      	cmp	r3, r2
 8006216:	d91f      	bls.n	8006258 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800621e:	e013      	b.n	8006248 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006220:	f107 030a 	add.w	r3, r7, #10
 8006224:	4619      	mov	r1, r3
 8006226:	6978      	ldr	r0, [r7, #20]
 8006228:	f000 f81b 	bl	8006262 <USBD_GetNextDesc>
 800622c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	2b05      	cmp	r3, #5
 8006234:	d108      	bne.n	8006248 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	789b      	ldrb	r3, [r3, #2]
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	429a      	cmp	r2, r3
 8006242:	d008      	beq.n	8006256 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	885b      	ldrh	r3, [r3, #2]
 800624c:	b29a      	uxth	r2, r3
 800624e:	897b      	ldrh	r3, [r7, #10]
 8006250:	429a      	cmp	r2, r3
 8006252:	d8e5      	bhi.n	8006220 <USBD_GetEpDesc+0x2e>
 8006254:	e000      	b.n	8006258 <USBD_GetEpDesc+0x66>
          break;
 8006256:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006258:	693b      	ldr	r3, [r7, #16]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	4413      	add	r3, r2
 800627a:	b29a      	uxth	r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4413      	add	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800628c:	68fb      	ldr	r3, [r7, #12]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3301      	adds	r3, #1
 80062b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062b8:	8a3b      	ldrh	r3, [r7, #16]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	b21a      	sxth	r2, r3
 80062be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	b21b      	sxth	r3, r3
 80062c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062c8:	89fb      	ldrh	r3, [r7, #14]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062ee:	2b40      	cmp	r3, #64	@ 0x40
 80062f0:	d005      	beq.n	80062fe <USBD_StdDevReq+0x26>
 80062f2:	2b40      	cmp	r3, #64	@ 0x40
 80062f4:	d857      	bhi.n	80063a6 <USBD_StdDevReq+0xce>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00f      	beq.n	800631a <USBD_StdDevReq+0x42>
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d153      	bne.n	80063a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	32ae      	adds	r2, #174	@ 0xae
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	4798      	blx	r3
 8006314:	4603      	mov	r3, r0
 8006316:	73fb      	strb	r3, [r7, #15]
      break;
 8006318:	e04a      	b.n	80063b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	2b09      	cmp	r3, #9
 8006320:	d83b      	bhi.n	800639a <USBD_StdDevReq+0xc2>
 8006322:	a201      	add	r2, pc, #4	@ (adr r2, 8006328 <USBD_StdDevReq+0x50>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	0800637d 	.word	0x0800637d
 800632c:	08006391 	.word	0x08006391
 8006330:	0800639b 	.word	0x0800639b
 8006334:	08006387 	.word	0x08006387
 8006338:	0800639b 	.word	0x0800639b
 800633c:	0800635b 	.word	0x0800635b
 8006340:	08006351 	.word	0x08006351
 8006344:	0800639b 	.word	0x0800639b
 8006348:	08006373 	.word	0x08006373
 800634c:	08006365 	.word	0x08006365
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa3c 	bl	80067d0 <USBD_GetDescriptor>
          break;
 8006358:	e024      	b.n	80063a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fba1 	bl	8006aa4 <USBD_SetAddress>
          break;
 8006362:	e01f      	b.n	80063a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fbe0 	bl	8006b2c <USBD_SetConfig>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
          break;
 8006370:	e018      	b.n	80063a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fc83 	bl	8006c80 <USBD_GetConfig>
          break;
 800637a:	e013      	b.n	80063a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fcb4 	bl	8006cec <USBD_GetStatus>
          break;
 8006384:	e00e      	b.n	80063a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fce3 	bl	8006d54 <USBD_SetFeature>
          break;
 800638e:	e009      	b.n	80063a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fd07 	bl	8006da6 <USBD_ClrFeature>
          break;
 8006398:	e004      	b.n	80063a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fd5e 	bl	8006e5e <USBD_CtlError>
          break;
 80063a2:	bf00      	nop
      }
      break;
 80063a4:	e004      	b.n	80063b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fd58 	bl	8006e5e <USBD_CtlError>
      break;
 80063ae:	bf00      	nop
  }

  return ret;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop

080063bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063d2:	2b40      	cmp	r3, #64	@ 0x40
 80063d4:	d005      	beq.n	80063e2 <USBD_StdItfReq+0x26>
 80063d6:	2b40      	cmp	r3, #64	@ 0x40
 80063d8:	d852      	bhi.n	8006480 <USBD_StdItfReq+0xc4>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <USBD_StdItfReq+0x26>
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d14e      	bne.n	8006480 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d840      	bhi.n	8006472 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	889b      	ldrh	r3, [r3, #4]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d836      	bhi.n	8006468 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	889b      	ldrh	r3, [r3, #4]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fedb 	bl	80061be <USBD_CoreFindIF>
 8006408:	4603      	mov	r3, r0
 800640a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	2bff      	cmp	r3, #255	@ 0xff
 8006410:	d01d      	beq.n	800644e <USBD_StdItfReq+0x92>
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d11a      	bne.n	800644e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006418:	7bba      	ldrb	r2, [r7, #14]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	32ae      	adds	r2, #174	@ 0xae
 800641e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00f      	beq.n	8006448 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006428:	7bba      	ldrb	r2, [r7, #14]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006430:	7bba      	ldrb	r2, [r7, #14]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	32ae      	adds	r2, #174	@ 0xae
 8006436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006446:	e004      	b.n	8006452 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006448:	2303      	movs	r3, #3
 800644a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800644c:	e001      	b.n	8006452 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800644e:	2303      	movs	r3, #3
 8006450:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d110      	bne.n	800647c <USBD_StdItfReq+0xc0>
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fdb6 	bl	8006fd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006466:	e009      	b.n	800647c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fcf7 	bl	8006e5e <USBD_CtlError>
          break;
 8006470:	e004      	b.n	800647c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fcf2 	bl	8006e5e <USBD_CtlError>
          break;
 800647a:	e000      	b.n	800647e <USBD_StdItfReq+0xc2>
          break;
 800647c:	bf00      	nop
      }
      break;
 800647e:	e004      	b.n	800648a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fceb 	bl	8006e5e <USBD_CtlError>
      break;
 8006488:	bf00      	nop
  }

  return ret;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	889b      	ldrh	r3, [r3, #4]
 80064a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064b0:	2b40      	cmp	r3, #64	@ 0x40
 80064b2:	d007      	beq.n	80064c4 <USBD_StdEPReq+0x30>
 80064b4:	2b40      	cmp	r3, #64	@ 0x40
 80064b6:	f200 817f 	bhi.w	80067b8 <USBD_StdEPReq+0x324>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d02a      	beq.n	8006514 <USBD_StdEPReq+0x80>
 80064be:	2b20      	cmp	r3, #32
 80064c0:	f040 817a 	bne.w	80067b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff fe85 	bl	80061d8 <USBD_CoreFindEP>
 80064ce:	4603      	mov	r3, r0
 80064d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064d2:	7b7b      	ldrb	r3, [r7, #13]
 80064d4:	2bff      	cmp	r3, #255	@ 0xff
 80064d6:	f000 8174 	beq.w	80067c2 <USBD_StdEPReq+0x32e>
 80064da:	7b7b      	ldrb	r3, [r7, #13]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 8170 	bne.w	80067c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80064e2:	7b7a      	ldrb	r2, [r7, #13]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80064ea:	7b7a      	ldrb	r2, [r7, #13]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	32ae      	adds	r2, #174	@ 0xae
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 8163 	beq.w	80067c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80064fc:	7b7a      	ldrb	r2, [r7, #13]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32ae      	adds	r2, #174	@ 0xae
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
 800650e:	4603      	mov	r3, r0
 8006510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006512:	e156      	b.n	80067c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b03      	cmp	r3, #3
 800651a:	d008      	beq.n	800652e <USBD_StdEPReq+0x9a>
 800651c:	2b03      	cmp	r3, #3
 800651e:	f300 8145 	bgt.w	80067ac <USBD_StdEPReq+0x318>
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 809b 	beq.w	800665e <USBD_StdEPReq+0x1ca>
 8006528:	2b01      	cmp	r3, #1
 800652a:	d03c      	beq.n	80065a6 <USBD_StdEPReq+0x112>
 800652c:	e13e      	b.n	80067ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d002      	beq.n	8006540 <USBD_StdEPReq+0xac>
 800653a:	2b03      	cmp	r3, #3
 800653c:	d016      	beq.n	800656c <USBD_StdEPReq+0xd8>
 800653e:	e02c      	b.n	800659a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00d      	beq.n	8006562 <USBD_StdEPReq+0xce>
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	2b80      	cmp	r3, #128	@ 0x80
 800654a:	d00a      	beq.n	8006562 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 f89b 	bl	800768c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006556:	2180      	movs	r1, #128	@ 0x80
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f897 	bl	800768c <USBD_LL_StallEP>
 800655e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006560:	e020      	b.n	80065a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fc7a 	bl	8006e5e <USBD_CtlError>
              break;
 800656a:	e01b      	b.n	80065a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	885b      	ldrh	r3, [r3, #2]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10e      	bne.n	8006592 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00b      	beq.n	8006592 <USBD_StdEPReq+0xfe>
 800657a:	7bbb      	ldrb	r3, [r7, #14]
 800657c:	2b80      	cmp	r3, #128	@ 0x80
 800657e:	d008      	beq.n	8006592 <USBD_StdEPReq+0xfe>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	88db      	ldrh	r3, [r3, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 f87d 	bl	800768c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fd1d 	bl	8006fd2 <USBD_CtlSendStatus>

              break;
 8006598:	e004      	b.n	80065a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fc5e 	bl	8006e5e <USBD_CtlError>
              break;
 80065a2:	bf00      	nop
          }
          break;
 80065a4:	e107      	b.n	80067b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d002      	beq.n	80065b8 <USBD_StdEPReq+0x124>
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d016      	beq.n	80065e4 <USBD_StdEPReq+0x150>
 80065b6:	e04b      	b.n	8006650 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <USBD_StdEPReq+0x146>
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	2b80      	cmp	r3, #128	@ 0x80
 80065c2:	d00a      	beq.n	80065da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 f85f 	bl	800768c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ce:	2180      	movs	r1, #128	@ 0x80
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f85b 	bl	800768c <USBD_LL_StallEP>
 80065d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065d8:	e040      	b.n	800665c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fc3e 	bl	8006e5e <USBD_CtlError>
              break;
 80065e2:	e03b      	b.n	800665c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	885b      	ldrh	r3, [r3, #2]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d136      	bne.n	800665a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065f6:	7bbb      	ldrb	r3, [r7, #14]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 f865 	bl	80076ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fce6 	bl	8006fd2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fde4 	bl	80061d8 <USBD_CoreFindEP>
 8006610:	4603      	mov	r3, r0
 8006612:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006614:	7b7b      	ldrb	r3, [r7, #13]
 8006616:	2bff      	cmp	r3, #255	@ 0xff
 8006618:	d01f      	beq.n	800665a <USBD_StdEPReq+0x1c6>
 800661a:	7b7b      	ldrb	r3, [r7, #13]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11c      	bne.n	800665a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006620:	7b7a      	ldrb	r2, [r7, #13]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006628:	7b7a      	ldrb	r2, [r7, #13]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	32ae      	adds	r2, #174	@ 0xae
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d010      	beq.n	800665a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006638:	7b7a      	ldrb	r2, [r7, #13]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32ae      	adds	r2, #174	@ 0xae
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800664e:	e004      	b.n	800665a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fc03 	bl	8006e5e <USBD_CtlError>
              break;
 8006658:	e000      	b.n	800665c <USBD_StdEPReq+0x1c8>
              break;
 800665a:	bf00      	nop
          }
          break;
 800665c:	e0ab      	b.n	80067b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d002      	beq.n	8006670 <USBD_StdEPReq+0x1dc>
 800666a:	2b03      	cmp	r3, #3
 800666c:	d032      	beq.n	80066d4 <USBD_StdEPReq+0x240>
 800666e:	e097      	b.n	80067a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <USBD_StdEPReq+0x1f2>
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	2b80      	cmp	r3, #128	@ 0x80
 800667a:	d004      	beq.n	8006686 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fbed 	bl	8006e5e <USBD_CtlError>
                break;
 8006684:	e091      	b.n	80067aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800668a:	2b00      	cmp	r3, #0
 800668c:	da0b      	bge.n	80066a6 <USBD_StdEPReq+0x212>
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	3310      	adds	r3, #16
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	4413      	add	r3, r2
 80066a2:	3304      	adds	r3, #4
 80066a4:	e00b      	b.n	80066be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	4413      	add	r3, r2
 80066bc:	3304      	adds	r3, #4
 80066be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2202      	movs	r2, #2
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fc43 	bl	8006f58 <USBD_CtlSendData>
              break;
 80066d2:	e06a      	b.n	80067aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da11      	bge.n	8006700 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	f003 020f 	and.w	r2, r3, #15
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	3324      	adds	r3, #36	@ 0x24
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d117      	bne.n	8006726 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fbb0 	bl	8006e5e <USBD_CtlError>
                  break;
 80066fe:	e054      	b.n	80067aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fb9d 	bl	8006e5e <USBD_CtlError>
                  break;
 8006724:	e041      	b.n	80067aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800672a:	2b00      	cmp	r3, #0
 800672c:	da0b      	bge.n	8006746 <USBD_StdEPReq+0x2b2>
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	3310      	adds	r3, #16
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4413      	add	r3, r2
 8006742:	3304      	adds	r3, #4
 8006744:	e00b      	b.n	800675e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	3304      	adds	r3, #4
 800675e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <USBD_StdEPReq+0x2d8>
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	2b80      	cmp	r3, #128	@ 0x80
 800676a:	d103      	bne.n	8006774 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e00e      	b.n	8006792 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 ffc5 	bl	8007708 <USBD_LL_IsStallEP>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e002      	b.n	8006792 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2202      	movs	r2, #2
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fbdd 	bl	8006f58 <USBD_CtlSendData>
              break;
 800679e:	e004      	b.n	80067aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fb5b 	bl	8006e5e <USBD_CtlError>
              break;
 80067a8:	bf00      	nop
          }
          break;
 80067aa:	e004      	b.n	80067b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fb55 	bl	8006e5e <USBD_CtlError>
          break;
 80067b4:	bf00      	nop
      }
      break;
 80067b6:	e005      	b.n	80067c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fb4f 	bl	8006e5e <USBD_CtlError>
      break;
 80067c0:	e000      	b.n	80067c4 <USBD_StdEPReq+0x330>
      break;
 80067c2:	bf00      	nop
  }

  return ret;
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	885b      	ldrh	r3, [r3, #2]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	2b06      	cmp	r3, #6
 80067f2:	f200 8128 	bhi.w	8006a46 <USBD_GetDescriptor+0x276>
 80067f6:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <USBD_GetDescriptor+0x2c>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	08006819 	.word	0x08006819
 8006800:	08006831 	.word	0x08006831
 8006804:	08006871 	.word	0x08006871
 8006808:	08006a47 	.word	0x08006a47
 800680c:	08006a47 	.word	0x08006a47
 8006810:	080069e7 	.word	0x080069e7
 8006814:	08006a13 	.word	0x08006a13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	7c12      	ldrb	r2, [r2, #16]
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	60f8      	str	r0, [r7, #12]
      break;
 800682e:	e112      	b.n	8006a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7c1b      	ldrb	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10d      	bne.n	8006854 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006840:	f107 0208 	add.w	r2, r7, #8
 8006844:	4610      	mov	r0, r2
 8006846:	4798      	blx	r3
 8006848:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	2202      	movs	r2, #2
 8006850:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006852:	e100      	b.n	8006a56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	f107 0208 	add.w	r2, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	2202      	movs	r2, #2
 800686c:	701a      	strb	r2, [r3, #0]
      break;
 800686e:	e0f2      	b.n	8006a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	885b      	ldrh	r3, [r3, #2]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b05      	cmp	r3, #5
 8006878:	f200 80ac 	bhi.w	80069d4 <USBD_GetDescriptor+0x204>
 800687c:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <USBD_GetDescriptor+0xb4>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	0800689d 	.word	0x0800689d
 8006888:	080068d1 	.word	0x080068d1
 800688c:	08006905 	.word	0x08006905
 8006890:	08006939 	.word	0x08006939
 8006894:	0800696d 	.word	0x0800696d
 8006898:	080069a1 	.word	0x080069a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	7c12      	ldrb	r2, [r2, #16]
 80068b4:	f107 0108 	add.w	r1, r7, #8
 80068b8:	4610      	mov	r0, r2
 80068ba:	4798      	blx	r3
 80068bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068be:	e091      	b.n	80069e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 facb 	bl	8006e5e <USBD_CtlError>
            err++;
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	3301      	adds	r3, #1
 80068cc:	72fb      	strb	r3, [r7, #11]
          break;
 80068ce:	e089      	b.n	80069e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	7c12      	ldrb	r2, [r2, #16]
 80068e8:	f107 0108 	add.w	r1, r7, #8
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
 80068f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068f2:	e077      	b.n	80069e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fab1 	bl	8006e5e <USBD_CtlError>
            err++;
 80068fc:	7afb      	ldrb	r3, [r7, #11]
 80068fe:	3301      	adds	r3, #1
 8006900:	72fb      	strb	r3, [r7, #11]
          break;
 8006902:	e06f      	b.n	80069e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	7c12      	ldrb	r2, [r2, #16]
 800691c:	f107 0108 	add.w	r1, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006926:	e05d      	b.n	80069e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa97 	bl	8006e5e <USBD_CtlError>
            err++;
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	3301      	adds	r3, #1
 8006934:	72fb      	strb	r3, [r7, #11]
          break;
 8006936:	e055      	b.n	80069e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7c12      	ldrb	r2, [r2, #16]
 8006950:	f107 0108 	add.w	r1, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695a:	e043      	b.n	80069e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa7d 	bl	8006e5e <USBD_CtlError>
            err++;
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
          break;
 800696a:	e03b      	b.n	80069e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698e:	e029      	b.n	80069e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa63 	bl	8006e5e <USBD_CtlError>
            err++;
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	72fb      	strb	r3, [r7, #11]
          break;
 800699e:	e021      	b.n	80069e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	7c12      	ldrb	r2, [r2, #16]
 80069b8:	f107 0108 	add.w	r1, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c2:	e00f      	b.n	80069e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa49 	bl	8006e5e <USBD_CtlError>
            err++;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	3301      	adds	r3, #1
 80069d0:	72fb      	strb	r3, [r7, #11]
          break;
 80069d2:	e007      	b.n	80069e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa41 	bl	8006e5e <USBD_CtlError>
          err++;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	3301      	adds	r3, #1
 80069e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80069e2:	bf00      	nop
      }
      break;
 80069e4:	e037      	b.n	8006a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7c1b      	ldrb	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f6:	f107 0208 	add.w	r2, r7, #8
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
 80069fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a00:	e029      	b.n	8006a56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa2a 	bl	8006e5e <USBD_CtlError>
        err++;
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a10:	e021      	b.n	8006a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7c1b      	ldrb	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10d      	bne.n	8006a36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	f107 0208 	add.w	r2, r7, #8
 8006a26:	4610      	mov	r0, r2
 8006a28:	4798      	blx	r3
 8006a2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	2207      	movs	r2, #7
 8006a32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a34:	e00f      	b.n	8006a56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa10 	bl	8006e5e <USBD_CtlError>
        err++;
 8006a3e:	7afb      	ldrb	r3, [r7, #11]
 8006a40:	3301      	adds	r3, #1
 8006a42:	72fb      	strb	r3, [r7, #11]
      break;
 8006a44:	e007      	b.n	8006a56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa08 	bl	8006e5e <USBD_CtlError>
      err++;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	3301      	adds	r3, #1
 8006a52:	72fb      	strb	r3, [r7, #11]
      break;
 8006a54:	bf00      	nop
  }

  if (err != 0U)
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11e      	bne.n	8006a9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	88db      	ldrh	r3, [r3, #6]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d016      	beq.n	8006a92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a64:	893b      	ldrh	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00e      	beq.n	8006a88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	88da      	ldrh	r2, [r3, #6]
 8006a6e:	893b      	ldrh	r3, [r7, #8]
 8006a70:	4293      	cmp	r3, r2
 8006a72:	bf28      	it	cs
 8006a74:	4613      	movcs	r3, r2
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a7a:	893b      	ldrh	r3, [r7, #8]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68f9      	ldr	r1, [r7, #12]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fa69 	bl	8006f58 <USBD_CtlSendData>
 8006a86:	e009      	b.n	8006a9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9e7 	bl	8006e5e <USBD_CtlError>
 8006a90:	e004      	b.n	8006a9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa9d 	bl	8006fd2 <USBD_CtlSendStatus>
 8006a98:	e000      	b.n	8006a9c <USBD_GetDescriptor+0x2cc>
    return;
 8006a9a:	bf00      	nop
  }
}
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop

08006aa4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	889b      	ldrh	r3, [r3, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d131      	bne.n	8006b1a <USBD_SetAddress+0x76>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	88db      	ldrh	r3, [r3, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d12d      	bne.n	8006b1a <USBD_SetAddress+0x76>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	885b      	ldrh	r3, [r3, #2]
 8006ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ac4:	d829      	bhi.n	8006b1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	885b      	ldrh	r3, [r3, #2]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ad0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d104      	bne.n	8006ae8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f9bc 	bl	8006e5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae6:	e01d      	b.n	8006b24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	7bfa      	ldrb	r2, [r7, #15]
 8006aec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fe33 	bl	8007760 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa69 	bl	8006fd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0e:	e009      	b.n	8006b24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b18:	e004      	b.n	8006b24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f99e 	bl	8006e5e <USBD_CtlError>
  }
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	885b      	ldrh	r3, [r3, #2]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	4b4e      	ldr	r3, [pc, #312]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006b42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b44:	4b4d      	ldr	r3, [pc, #308]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d905      	bls.n	8006b58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f985 	bl	8006e5e <USBD_CtlError>
    return USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e08c      	b.n	8006c72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d002      	beq.n	8006b6a <USBD_SetConfig+0x3e>
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d029      	beq.n	8006bbc <USBD_SetConfig+0x90>
 8006b68:	e075      	b.n	8006c56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b6a:	4b44      	ldr	r3, [pc, #272]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d020      	beq.n	8006bb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006b72:	4b42      	ldr	r3, [pc, #264]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fe ffe3 	bl	8005b4e <USBD_SetClassConfig>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d008      	beq.n	8006ba4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f962 	bl	8006e5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ba2:	e065      	b.n	8006c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fa14 	bl	8006fd2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2203      	movs	r2, #3
 8006bae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006bb2:	e05d      	b.n	8006c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa0c 	bl	8006fd2 <USBD_CtlSendStatus>
      break;
 8006bba:	e059      	b.n	8006c70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d112      	bne.n	8006bea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bd6:	4b29      	ldr	r3, [pc, #164]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fe ffd2 	bl	8005b86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9f5 	bl	8006fd2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006be8:	e042      	b.n	8006c70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006bea:	4b24      	ldr	r3, [pc, #144]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d02a      	beq.n	8006c4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fe ffc0 	bl	8005b86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c06:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c10:	4b1a      	ldr	r3, [pc, #104]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fe ff99 	bl	8005b4e <USBD_SetClassConfig>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00f      	beq.n	8006c46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f918 	bl	8006e5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fe ffa5 	bl	8005b86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c44:	e014      	b.n	8006c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f9c3 	bl	8006fd2 <USBD_CtlSendStatus>
      break;
 8006c4c:	e010      	b.n	8006c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9bf 	bl	8006fd2 <USBD_CtlSendStatus>
      break;
 8006c54:	e00c      	b.n	8006c70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f900 	bl	8006e5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c5e:	4b07      	ldr	r3, [pc, #28]	@ (8006c7c <USBD_SetConfig+0x150>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fe ff8e 	bl	8005b86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6e:	bf00      	nop
  }

  return ret;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	2000018c 	.word	0x2000018c

08006c80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d004      	beq.n	8006c9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8e2 	bl	8006e5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c9a:	e023      	b.n	8006ce4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	dc02      	bgt.n	8006cae <USBD_GetConfig+0x2e>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dc03      	bgt.n	8006cb4 <USBD_GetConfig+0x34>
 8006cac:	e015      	b.n	8006cda <USBD_GetConfig+0x5a>
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d00b      	beq.n	8006cca <USBD_GetConfig+0x4a>
 8006cb2:	e012      	b.n	8006cda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f948 	bl	8006f58 <USBD_CtlSendData>
        break;
 8006cc8:	e00c      	b.n	8006ce4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	2201      	movs	r2, #1
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f940 	bl	8006f58 <USBD_CtlSendData>
        break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8be 	bl	8006e5e <USBD_CtlError>
        break;
 8006ce2:	bf00      	nop
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d81e      	bhi.n	8006d42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	88db      	ldrh	r3, [r3, #6]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d004      	beq.n	8006d16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f8a5 	bl	8006e5e <USBD_CtlError>
        break;
 8006d14:	e01a      	b.n	8006d4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f043 0202 	orr.w	r2, r3, #2
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	330c      	adds	r3, #12
 8006d36:	2202      	movs	r2, #2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f90c 	bl	8006f58 <USBD_CtlSendData>
      break;
 8006d40:	e004      	b.n	8006d4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f88a 	bl	8006e5e <USBD_CtlError>
      break;
 8006d4a:	bf00      	nop
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	885b      	ldrh	r3, [r3, #2]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d107      	bne.n	8006d76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f92f 	bl	8006fd2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006d74:	e013      	b.n	8006d9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	885b      	ldrh	r3, [r3, #2]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d10b      	bne.n	8006d96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f91f 	bl	8006fd2 <USBD_CtlSendStatus>
}
 8006d94:	e003      	b.n	8006d9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f860 	bl	8006e5e <USBD_CtlError>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d80b      	bhi.n	8006dd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	885b      	ldrh	r3, [r3, #2]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d10c      	bne.n	8006de0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8ff 	bl	8006fd2 <USBD_CtlSendStatus>
      }
      break;
 8006dd4:	e004      	b.n	8006de0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f840 	bl	8006e5e <USBD_CtlError>
      break;
 8006dde:	e000      	b.n	8006de2 <USBD_ClrFeature+0x3c>
      break;
 8006de0:	bf00      	nop
  }
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff fa40 	bl	800629a <SWAPBYTE>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fa33 	bl	800629a <SWAPBYTE>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3301      	adds	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff fa26 	bl	800629a <SWAPBYTE>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	461a      	mov	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	80da      	strh	r2, [r3, #6]
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e68:	2180      	movs	r1, #128	@ 0x80
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc0e 	bl	800768c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e70:	2100      	movs	r1, #0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fc0a 	bl	800768c <USBD_LL_StallEP>
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d042      	beq.n	8006f1c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006e9a:	6938      	ldr	r0, [r7, #16]
 8006e9c:	f000 f842 	bl	8006f24 <USBD_GetLen>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eaa:	d808      	bhi.n	8006ebe <USBD_GetString+0x3e>
 8006eac:	6938      	ldr	r0, [r7, #16]
 8006eae:	f000 f839 	bl	8006f24 <USBD_GetLen>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	e001      	b.n	8006ec2 <USBD_GetString+0x42>
 8006ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	4413      	add	r3, r2
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7812      	ldrb	r2, [r2, #0]
 8006ed0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4413      	add	r3, r2
 8006ede:	2203      	movs	r2, #3
 8006ee0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ee8:	e013      	b.n	8006f12 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	4413      	add	r3, r2
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	613b      	str	r3, [r7, #16]
    idx++;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	3301      	adds	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	4413      	add	r3, r2
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e7      	bne.n	8006eea <USBD_GetString+0x6a>
 8006f1a:	e000      	b.n	8006f1e <USBD_GetString+0x9e>
    return;
 8006f1c:	bf00      	nop
  }
}
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f34:	e005      	b.n	8006f42 <USBD_GetLen+0x1e>
  {
    len++;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f5      	bne.n	8006f36 <USBD_GetLen+0x12>
  }

  return len;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 fc0d 	bl	800779e <USBD_LL_Transmit>

  return USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 fbfc 	bl	800779e <USBD_LL_Transmit>

  return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fc0c 	bl	80077e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2204      	movs	r2, #4
 8006fde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fbd8 	bl	800779e <USBD_LL_Transmit>

  return USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2205      	movs	r2, #5
 8007004:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007008:	2300      	movs	r3, #0
 800700a:	2200      	movs	r2, #0
 800700c:	2100      	movs	r1, #0
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fbe6 	bl	80077e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007024:	2200      	movs	r2, #0
 8007026:	490e      	ldr	r1, [pc, #56]	@ (8007060 <MX_USB_DEVICE_Init+0x40>)
 8007028:	480e      	ldr	r0, [pc, #56]	@ (8007064 <MX_USB_DEVICE_Init+0x44>)
 800702a:	f7fe fd13 	bl	8005a54 <USBD_Init>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007034:	f7fa f950 	bl	80012d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007038:	490b      	ldr	r1, [pc, #44]	@ (8007068 <MX_USB_DEVICE_Init+0x48>)
 800703a:	480a      	ldr	r0, [pc, #40]	@ (8007064 <MX_USB_DEVICE_Init+0x44>)
 800703c:	f7fe fd3a 	bl	8005ab4 <USBD_RegisterClass>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007046:	f7fa f947 	bl	80012d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800704a:	4806      	ldr	r0, [pc, #24]	@ (8007064 <MX_USB_DEVICE_Init+0x44>)
 800704c:	f7fe fd68 	bl	8005b20 <USBD_Start>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007056:	f7fa f93f 	bl	80012d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	200000cc 	.word	0x200000cc
 8007064:	20000190 	.word	0x20000190
 8007068:	2000000c 	.word	0x2000000c

0800706c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2212      	movs	r2, #18
 800707c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800707e:	4b03      	ldr	r3, [pc, #12]	@ (800708c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	200000e8 	.word	0x200000e8

08007090 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2204      	movs	r2, #4
 80070a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070a2:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	200000fc 	.word	0x200000fc

080070b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	6039      	str	r1, [r7, #0]
 80070be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d105      	bne.n	80070d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4907      	ldr	r1, [pc, #28]	@ (80070e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80070ca:	4808      	ldr	r0, [pc, #32]	@ (80070ec <USBD_FS_ProductStrDescriptor+0x38>)
 80070cc:	f7ff fed8 	bl	8006e80 <USBD_GetString>
 80070d0:	e004      	b.n	80070dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	4904      	ldr	r1, [pc, #16]	@ (80070e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80070d6:	4805      	ldr	r0, [pc, #20]	@ (80070ec <USBD_FS_ProductStrDescriptor+0x38>)
 80070d8:	f7ff fed2 	bl	8006e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070dc:	4b02      	ldr	r3, [pc, #8]	@ (80070e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	2000046c 	.word	0x2000046c
 80070ec:	08008418 	.word	0x08008418

080070f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	6039      	str	r1, [r7, #0]
 80070fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	4904      	ldr	r1, [pc, #16]	@ (8007110 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007100:	4804      	ldr	r0, [pc, #16]	@ (8007114 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007102:	f7ff febd 	bl	8006e80 <USBD_GetString>
  return USBD_StrDesc;
 8007106:	4b02      	ldr	r3, [pc, #8]	@ (8007110 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	2000046c 	.word	0x2000046c
 8007114:	08008430 	.word	0x08008430

08007118 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	6039      	str	r1, [r7, #0]
 8007122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	221a      	movs	r2, #26
 8007128:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800712a:	f000 f843 	bl	80071b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800712e:	4b02      	ldr	r3, [pc, #8]	@ (8007138 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000100 	.word	0x20000100

0800713c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d105      	bne.n	800715a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4907      	ldr	r1, [pc, #28]	@ (8007170 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007152:	4808      	ldr	r0, [pc, #32]	@ (8007174 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007154:	f7ff fe94 	bl	8006e80 <USBD_GetString>
 8007158:	e004      	b.n	8007164 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4904      	ldr	r1, [pc, #16]	@ (8007170 <USBD_FS_ConfigStrDescriptor+0x34>)
 800715e:	4805      	ldr	r0, [pc, #20]	@ (8007174 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007160:	f7ff fe8e 	bl	8006e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007164:	4b02      	ldr	r3, [pc, #8]	@ (8007170 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000046c 	.word	0x2000046c
 8007174:	08008444 	.word	0x08008444

08007178 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	4907      	ldr	r1, [pc, #28]	@ (80071ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800718e:	4808      	ldr	r0, [pc, #32]	@ (80071b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007190:	f7ff fe76 	bl	8006e80 <USBD_GetString>
 8007194:	e004      	b.n	80071a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	4904      	ldr	r1, [pc, #16]	@ (80071ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800719a:	4805      	ldr	r0, [pc, #20]	@ (80071b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800719c:	f7ff fe70 	bl	8006e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071a0:	4b02      	ldr	r3, [pc, #8]	@ (80071ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	2000046c 	.word	0x2000046c
 80071b0:	08008450 	.word	0x08008450

080071b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071ba:	4b0f      	ldr	r3, [pc, #60]	@ (80071f8 <Get_SerialNum+0x44>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071c0:	4b0e      	ldr	r3, [pc, #56]	@ (80071fc <Get_SerialNum+0x48>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007200 <Get_SerialNum+0x4c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d009      	beq.n	80071ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071da:	2208      	movs	r2, #8
 80071dc:	4909      	ldr	r1, [pc, #36]	@ (8007204 <Get_SerialNum+0x50>)
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f814 	bl	800720c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071e4:	2204      	movs	r2, #4
 80071e6:	4908      	ldr	r1, [pc, #32]	@ (8007208 <Get_SerialNum+0x54>)
 80071e8:	68b8      	ldr	r0, [r7, #8]
 80071ea:	f000 f80f 	bl	800720c <IntToUnicode>
  }
}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	1fff7a10 	.word	0x1fff7a10
 80071fc:	1fff7a14 	.word	0x1fff7a14
 8007200:	1fff7a18 	.word	0x1fff7a18
 8007204:	20000102 	.word	0x20000102
 8007208:	20000112 	.word	0x20000112

0800720c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800721e:	2300      	movs	r3, #0
 8007220:	75fb      	strb	r3, [r7, #23]
 8007222:	e027      	b.n	8007274 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	0f1b      	lsrs	r3, r3, #28
 8007228:	2b09      	cmp	r3, #9
 800722a:	d80b      	bhi.n	8007244 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	0f1b      	lsrs	r3, r3, #28
 8007230:	b2da      	uxtb	r2, r3
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	4619      	mov	r1, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	440b      	add	r3, r1
 800723c:	3230      	adds	r2, #48	@ 0x30
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	e00a      	b.n	800725a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	0f1b      	lsrs	r3, r3, #28
 8007248:	b2da      	uxtb	r2, r3
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	4619      	mov	r1, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	440b      	add	r3, r1
 8007254:	3237      	adds	r2, #55	@ 0x37
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	011b      	lsls	r3, r3, #4
 800725e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	3301      	adds	r3, #1
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	3301      	adds	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]
 8007274:	7dfa      	ldrb	r2, [r7, #23]
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	429a      	cmp	r2, r3
 800727a:	d3d3      	bcc.n	8007224 <IntToUnicode+0x18>
  }
}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08a      	sub	sp, #40	@ 0x28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007294:	f107 0314 	add.w	r3, r7, #20
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	605a      	str	r2, [r3, #4]
 800729e:	609a      	str	r2, [r3, #8]
 80072a0:	60da      	str	r2, [r3, #12]
 80072a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072ac:	d147      	bne.n	800733e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ae:	2300      	movs	r3, #0
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	4b25      	ldr	r3, [pc, #148]	@ (8007348 <HAL_PCD_MspInit+0xbc>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	4a24      	ldr	r2, [pc, #144]	@ (8007348 <HAL_PCD_MspInit+0xbc>)
 80072b8:	f043 0301 	orr.w	r3, r3, #1
 80072bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80072be:	4b22      	ldr	r3, [pc, #136]	@ (8007348 <HAL_PCD_MspInit+0xbc>)
 80072c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80072ca:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80072ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d0:	2302      	movs	r3, #2
 80072d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072d8:	2303      	movs	r3, #3
 80072da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072dc:	230a      	movs	r3, #10
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072e0:	f107 0314 	add.w	r3, r7, #20
 80072e4:	4619      	mov	r1, r3
 80072e6:	4819      	ldr	r0, [pc, #100]	@ (800734c <HAL_PCD_MspInit+0xc0>)
 80072e8:	f7fa fa8a 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80072ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072f2:	2300      	movs	r3, #0
 80072f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80072fa:	f107 0314 	add.w	r3, r7, #20
 80072fe:	4619      	mov	r1, r3
 8007300:	4812      	ldr	r0, [pc, #72]	@ (800734c <HAL_PCD_MspInit+0xc0>)
 8007302:	f7fa fa7d 	bl	8001800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007306:	4b10      	ldr	r3, [pc, #64]	@ (8007348 <HAL_PCD_MspInit+0xbc>)
 8007308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730a:	4a0f      	ldr	r2, [pc, #60]	@ (8007348 <HAL_PCD_MspInit+0xbc>)
 800730c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007310:	6353      	str	r3, [r2, #52]	@ 0x34
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <HAL_PCD_MspInit+0xbc>)
 8007318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731a:	4a0b      	ldr	r2, [pc, #44]	@ (8007348 <HAL_PCD_MspInit+0xbc>)
 800731c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007320:	6453      	str	r3, [r2, #68]	@ 0x44
 8007322:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <HAL_PCD_MspInit+0xbc>)
 8007324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	2043      	movs	r0, #67	@ 0x43
 8007334:	f7fa fa2d 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007338:	2043      	movs	r0, #67	@ 0x43
 800733a:	f7fa fa46 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800733e:	bf00      	nop
 8007340:	3728      	adds	r7, #40	@ 0x28
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40023800 	.word	0x40023800
 800734c:	40020000 	.word	0x40020000

08007350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f7fe fc27 	bl	8005bba <USBD_LL_SetupStage>
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007386:	78fa      	ldrb	r2, [r7, #3]
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	4619      	mov	r1, r3
 800739e:	f7fe fc61 	bl	8005c64 <USBD_LL_DataOutStage>
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80073bc:	78fa      	ldrb	r2, [r7, #3]
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	3320      	adds	r3, #32
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	4619      	mov	r1, r3
 80073d2:	f7fe fcfa 	bl	8005dca <USBD_LL_DataInStage>
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fe34 	bl	800605a <USBD_LL_SOF>
}
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007402:	2301      	movs	r3, #1
 8007404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	79db      	ldrb	r3, [r3, #7]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
 8007412:	e008      	b.n	8007426 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	79db      	ldrb	r3, [r3, #7]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d102      	bne.n	8007422 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800741c:	2301      	movs	r3, #1
 800741e:	73fb      	strb	r3, [r7, #15]
 8007420:	e001      	b.n	8007426 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007422:	f7f9 ff59 	bl	80012d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	4611      	mov	r1, r2
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe fdce 	bl	8005fd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe fd76 	bl	8005f2e <USBD_LL_Reset>
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fdc9 	bl	8005ff2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	7adb      	ldrb	r3, [r3, #11]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007480:	4b04      	ldr	r3, [pc, #16]	@ (8007494 <HAL_PCD_SuspendCallback+0x48>)
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	4a03      	ldr	r2, [pc, #12]	@ (8007494 <HAL_PCD_SuspendCallback+0x48>)
 8007486:	f043 0306 	orr.w	r3, r3, #6
 800748a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	e000ed00 	.word	0xe000ed00

08007498 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fdbf 	bl	800602a <USBD_LL_Resume>
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fe17 	bl	80060fe <USBD_LL_IsoOUTIncomplete>
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074ea:	78fa      	ldrb	r2, [r7, #3]
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fdd3 	bl	800609a <USBD_LL_IsoINIncomplete>
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fe29 	bl	8006162 <USBD_LL_DevConnected>
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fe26 	bl	8006178 <USBD_LL_DevDisconnected>
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d13c      	bne.n	80075be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007544:	4a20      	ldr	r2, [pc, #128]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a1e      	ldr	r2, [pc, #120]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007550:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007554:	4b1c      	ldr	r3, [pc, #112]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007556:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800755a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800755c:	4b1a      	ldr	r3, [pc, #104]	@ (80075c8 <USBD_LL_Init+0x94>)
 800755e:	2204      	movs	r2, #4
 8007560:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007562:	4b19      	ldr	r3, [pc, #100]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007564:	2202      	movs	r2, #2
 8007566:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007568:	4b17      	ldr	r3, [pc, #92]	@ (80075c8 <USBD_LL_Init+0x94>)
 800756a:	2200      	movs	r2, #0
 800756c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800756e:	4b16      	ldr	r3, [pc, #88]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007570:	2202      	movs	r2, #2
 8007572:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007574:	4b14      	ldr	r3, [pc, #80]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007576:	2201      	movs	r2, #1
 8007578:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800757a:	4b13      	ldr	r3, [pc, #76]	@ (80075c8 <USBD_LL_Init+0x94>)
 800757c:	2200      	movs	r2, #0
 800757e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007580:	4b11      	ldr	r3, [pc, #68]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007582:	2200      	movs	r2, #0
 8007584:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007586:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007588:	2201      	movs	r2, #1
 800758a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800758c:	4b0e      	ldr	r3, [pc, #56]	@ (80075c8 <USBD_LL_Init+0x94>)
 800758e:	2200      	movs	r2, #0
 8007590:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007592:	480d      	ldr	r0, [pc, #52]	@ (80075c8 <USBD_LL_Init+0x94>)
 8007594:	f7fa fb11 	bl	8001bba <HAL_PCD_Init>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800759e:	f7f9 fe9b 	bl	80012d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075a2:	2180      	movs	r1, #128	@ 0x80
 80075a4:	4808      	ldr	r0, [pc, #32]	@ (80075c8 <USBD_LL_Init+0x94>)
 80075a6:	f7fb fd26 	bl	8002ff6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075aa:	2240      	movs	r2, #64	@ 0x40
 80075ac:	2100      	movs	r1, #0
 80075ae:	4806      	ldr	r0, [pc, #24]	@ (80075c8 <USBD_LL_Init+0x94>)
 80075b0:	f7fb fcda 	bl	8002f68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075b4:	2280      	movs	r2, #128	@ 0x80
 80075b6:	2101      	movs	r1, #1
 80075b8:	4803      	ldr	r0, [pc, #12]	@ (80075c8 <USBD_LL_Init+0x94>)
 80075ba:	f7fb fcd5 	bl	8002f68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	2000066c 	.word	0x2000066c

080075cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fa fbf8 	bl	8001dd8 <HAL_PCD_Start>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f930 	bl	8007854 <USBD_Get_USB_Status>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	4608      	mov	r0, r1
 800760c:	4611      	mov	r1, r2
 800760e:	461a      	mov	r2, r3
 8007610:	4603      	mov	r3, r0
 8007612:	70fb      	strb	r3, [r7, #3]
 8007614:	460b      	mov	r3, r1
 8007616:	70bb      	strb	r3, [r7, #2]
 8007618:	4613      	mov	r3, r2
 800761a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800762a:	78bb      	ldrb	r3, [r7, #2]
 800762c:	883a      	ldrh	r2, [r7, #0]
 800762e:	78f9      	ldrb	r1, [r7, #3]
 8007630:	f7fb f8cc 	bl	80027cc <HAL_PCD_EP_Open>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f90a 	bl	8007854 <USBD_Get_USB_Status>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7fb f917 	bl	80028a0 <HAL_PCD_EP_Close>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f8eb 	bl	8007854 <USBD_Get_USB_Status>
 800767e:	4603      	mov	r3, r0
 8007680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007682:	7bbb      	ldrb	r3, [r7, #14]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076a6:	78fa      	ldrb	r2, [r7, #3]
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fb f9b7 	bl	8002a1e <HAL_PCD_EP_SetStall>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f8cc 	bl	8007854 <USBD_Get_USB_Status>
 80076bc:	4603      	mov	r3, r0
 80076be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	4611      	mov	r1, r2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fb f9fb 	bl	8002ae4 <HAL_PCD_EP_ClrStall>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 f8ad 	bl	8007854 <USBD_Get_USB_Status>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800771a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800771c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007720:	2b00      	cmp	r3, #0
 8007722:	da0b      	bge.n	800773c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800772a:	68f9      	ldr	r1, [r7, #12]
 800772c:	4613      	mov	r3, r2
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	3316      	adds	r3, #22
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	e00b      	b.n	8007754 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	4613      	mov	r3, r2
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	440b      	add	r3, r1
 800774e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007752:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800777a:	78fa      	ldrb	r2, [r7, #3]
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f7fb f800 	bl	8002784 <HAL_PCD_SetAddress>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f862 	bl	8007854 <USBD_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
 80077aa:	460b      	mov	r3, r1
 80077ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80077bc:	7af9      	ldrb	r1, [r7, #11]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	f7fb f8f2 	bl	80029aa <HAL_PCD_EP_Transmit>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 f841 	bl	8007854 <USBD_Get_USB_Status>
 80077d2:	4603      	mov	r3, r0
 80077d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	460b      	mov	r3, r1
 80077ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80077fe:	7af9      	ldrb	r1, [r7, #11]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	f7fb f896 	bl	8002934 <HAL_PCD_EP_Receive>
 8007808:	4603      	mov	r3, r0
 800780a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f820 	bl	8007854 <USBD_Get_USB_Status>
 8007814:	4603      	mov	r3, r0
 8007816:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007818:	7dbb      	ldrb	r3, [r7, #22]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800782c:	4b03      	ldr	r3, [pc, #12]	@ (800783c <USBD_static_malloc+0x18>)
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20000b50 	.word	0x20000b50

08007840 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]

}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	2b03      	cmp	r3, #3
 8007866:	d817      	bhi.n	8007898 <USBD_Get_USB_Status+0x44>
 8007868:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <USBD_Get_USB_Status+0x1c>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007881 	.word	0x08007881
 8007874:	08007887 	.word	0x08007887
 8007878:	0800788d 	.word	0x0800788d
 800787c:	08007893 	.word	0x08007893
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
    break;
 8007884:	e00b      	b.n	800789e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007886:	2303      	movs	r3, #3
 8007888:	73fb      	strb	r3, [r7, #15]
    break;
 800788a:	e008      	b.n	800789e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
    break;
 8007890:	e005      	b.n	800789e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007892:	2303      	movs	r3, #3
 8007894:	73fb      	strb	r3, [r7, #15]
    break;
 8007896:	e002      	b.n	800789e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	73fb      	strb	r3, [r7, #15]
    break;
 800789c:	bf00      	nop
  }
  return usb_status;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <memset>:
 80078ac:	4402      	add	r2, r0
 80078ae:	4603      	mov	r3, r0
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d100      	bne.n	80078b6 <memset+0xa>
 80078b4:	4770      	bx	lr
 80078b6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ba:	e7f9      	b.n	80078b0 <memset+0x4>

080078bc <__libc_init_array>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4d0d      	ldr	r5, [pc, #52]	@ (80078f4 <__libc_init_array+0x38>)
 80078c0:	4c0d      	ldr	r4, [pc, #52]	@ (80078f8 <__libc_init_array+0x3c>)
 80078c2:	1b64      	subs	r4, r4, r5
 80078c4:	10a4      	asrs	r4, r4, #2
 80078c6:	2600      	movs	r6, #0
 80078c8:	42a6      	cmp	r6, r4
 80078ca:	d109      	bne.n	80078e0 <__libc_init_array+0x24>
 80078cc:	4d0b      	ldr	r5, [pc, #44]	@ (80078fc <__libc_init_array+0x40>)
 80078ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007900 <__libc_init_array+0x44>)
 80078d0:	f000 fd96 	bl	8008400 <_init>
 80078d4:	1b64      	subs	r4, r4, r5
 80078d6:	10a4      	asrs	r4, r4, #2
 80078d8:	2600      	movs	r6, #0
 80078da:	42a6      	cmp	r6, r4
 80078dc:	d105      	bne.n	80078ea <__libc_init_array+0x2e>
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e4:	4798      	blx	r3
 80078e6:	3601      	adds	r6, #1
 80078e8:	e7ee      	b.n	80078c8 <__libc_init_array+0xc>
 80078ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ee:	4798      	blx	r3
 80078f0:	3601      	adds	r6, #1
 80078f2:	e7f2      	b.n	80078da <__libc_init_array+0x1e>
 80078f4:	08008850 	.word	0x08008850
 80078f8:	08008850 	.word	0x08008850
 80078fc:	08008850 	.word	0x08008850
 8007900:	08008854 	.word	0x08008854

08007904 <cosf>:
 8007904:	ee10 3a10 	vmov	r3, s0
 8007908:	b507      	push	{r0, r1, r2, lr}
 800790a:	4a1e      	ldr	r2, [pc, #120]	@ (8007984 <cosf+0x80>)
 800790c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007910:	4293      	cmp	r3, r2
 8007912:	d806      	bhi.n	8007922 <cosf+0x1e>
 8007914:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8007988 <cosf+0x84>
 8007918:	b003      	add	sp, #12
 800791a:	f85d eb04 	ldr.w	lr, [sp], #4
 800791e:	f000 b87b 	b.w	8007a18 <__kernel_cosf>
 8007922:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007926:	d304      	bcc.n	8007932 <cosf+0x2e>
 8007928:	ee30 0a40 	vsub.f32	s0, s0, s0
 800792c:	b003      	add	sp, #12
 800792e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007932:	4668      	mov	r0, sp
 8007934:	f000 f910 	bl	8007b58 <__ieee754_rem_pio2f>
 8007938:	f000 0003 	and.w	r0, r0, #3
 800793c:	2801      	cmp	r0, #1
 800793e:	d009      	beq.n	8007954 <cosf+0x50>
 8007940:	2802      	cmp	r0, #2
 8007942:	d010      	beq.n	8007966 <cosf+0x62>
 8007944:	b9b0      	cbnz	r0, 8007974 <cosf+0x70>
 8007946:	eddd 0a01 	vldr	s1, [sp, #4]
 800794a:	ed9d 0a00 	vldr	s0, [sp]
 800794e:	f000 f863 	bl	8007a18 <__kernel_cosf>
 8007952:	e7eb      	b.n	800792c <cosf+0x28>
 8007954:	eddd 0a01 	vldr	s1, [sp, #4]
 8007958:	ed9d 0a00 	vldr	s0, [sp]
 800795c:	f000 f8b4 	bl	8007ac8 <__kernel_sinf>
 8007960:	eeb1 0a40 	vneg.f32	s0, s0
 8007964:	e7e2      	b.n	800792c <cosf+0x28>
 8007966:	eddd 0a01 	vldr	s1, [sp, #4]
 800796a:	ed9d 0a00 	vldr	s0, [sp]
 800796e:	f000 f853 	bl	8007a18 <__kernel_cosf>
 8007972:	e7f5      	b.n	8007960 <cosf+0x5c>
 8007974:	eddd 0a01 	vldr	s1, [sp, #4]
 8007978:	ed9d 0a00 	vldr	s0, [sp]
 800797c:	2001      	movs	r0, #1
 800797e:	f000 f8a3 	bl	8007ac8 <__kernel_sinf>
 8007982:	e7d3      	b.n	800792c <cosf+0x28>
 8007984:	3f490fd8 	.word	0x3f490fd8
 8007988:	00000000 	.word	0x00000000

0800798c <sinf>:
 800798c:	ee10 3a10 	vmov	r3, s0
 8007990:	b507      	push	{r0, r1, r2, lr}
 8007992:	4a1f      	ldr	r2, [pc, #124]	@ (8007a10 <sinf+0x84>)
 8007994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007998:	4293      	cmp	r3, r2
 800799a:	d807      	bhi.n	80079ac <sinf+0x20>
 800799c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007a14 <sinf+0x88>
 80079a0:	2000      	movs	r0, #0
 80079a2:	b003      	add	sp, #12
 80079a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079a8:	f000 b88e 	b.w	8007ac8 <__kernel_sinf>
 80079ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80079b0:	d304      	bcc.n	80079bc <sinf+0x30>
 80079b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80079b6:	b003      	add	sp, #12
 80079b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80079bc:	4668      	mov	r0, sp
 80079be:	f000 f8cb 	bl	8007b58 <__ieee754_rem_pio2f>
 80079c2:	f000 0003 	and.w	r0, r0, #3
 80079c6:	2801      	cmp	r0, #1
 80079c8:	d00a      	beq.n	80079e0 <sinf+0x54>
 80079ca:	2802      	cmp	r0, #2
 80079cc:	d00f      	beq.n	80079ee <sinf+0x62>
 80079ce:	b9c0      	cbnz	r0, 8007a02 <sinf+0x76>
 80079d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80079d4:	ed9d 0a00 	vldr	s0, [sp]
 80079d8:	2001      	movs	r0, #1
 80079da:	f000 f875 	bl	8007ac8 <__kernel_sinf>
 80079de:	e7ea      	b.n	80079b6 <sinf+0x2a>
 80079e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80079e4:	ed9d 0a00 	vldr	s0, [sp]
 80079e8:	f000 f816 	bl	8007a18 <__kernel_cosf>
 80079ec:	e7e3      	b.n	80079b6 <sinf+0x2a>
 80079ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80079f2:	ed9d 0a00 	vldr	s0, [sp]
 80079f6:	2001      	movs	r0, #1
 80079f8:	f000 f866 	bl	8007ac8 <__kernel_sinf>
 80079fc:	eeb1 0a40 	vneg.f32	s0, s0
 8007a00:	e7d9      	b.n	80079b6 <sinf+0x2a>
 8007a02:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a06:	ed9d 0a00 	vldr	s0, [sp]
 8007a0a:	f000 f805 	bl	8007a18 <__kernel_cosf>
 8007a0e:	e7f5      	b.n	80079fc <sinf+0x70>
 8007a10:	3f490fd8 	.word	0x3f490fd8
 8007a14:	00000000 	.word	0x00000000

08007a18 <__kernel_cosf>:
 8007a18:	ee10 3a10 	vmov	r3, s0
 8007a1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a20:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007a24:	eef0 6a40 	vmov.f32	s13, s0
 8007a28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007a2c:	d204      	bcs.n	8007a38 <__kernel_cosf+0x20>
 8007a2e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8007a32:	ee17 2a90 	vmov	r2, s15
 8007a36:	b342      	cbz	r2, 8007a8a <__kernel_cosf+0x72>
 8007a38:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007a3c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8007aa8 <__kernel_cosf+0x90>
 8007a40:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007aac <__kernel_cosf+0x94>
 8007a44:	4a1a      	ldr	r2, [pc, #104]	@ (8007ab0 <__kernel_cosf+0x98>)
 8007a46:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007ab4 <__kernel_cosf+0x9c>
 8007a50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007a54:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8007ab8 <__kernel_cosf+0xa0>
 8007a58:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007a5c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007abc <__kernel_cosf+0xa4>
 8007a60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007a64:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8007ac0 <__kernel_cosf+0xa8>
 8007a68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007a6c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8007a70:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007a74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007a78:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a80:	d804      	bhi.n	8007a8c <__kernel_cosf+0x74>
 8007a82:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007a86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a8a:	4770      	bx	lr
 8007a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8007ac4 <__kernel_cosf+0xac>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	bf9a      	itte	ls
 8007a92:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8007a96:	ee07 3a10 	vmovls	s14, r3
 8007a9a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8007a9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007aa6:	e7ec      	b.n	8007a82 <__kernel_cosf+0x6a>
 8007aa8:	ad47d74e 	.word	0xad47d74e
 8007aac:	310f74f6 	.word	0x310f74f6
 8007ab0:	3e999999 	.word	0x3e999999
 8007ab4:	b493f27c 	.word	0xb493f27c
 8007ab8:	37d00d01 	.word	0x37d00d01
 8007abc:	bab60b61 	.word	0xbab60b61
 8007ac0:	3d2aaaab 	.word	0x3d2aaaab
 8007ac4:	3f480000 	.word	0x3f480000

08007ac8 <__kernel_sinf>:
 8007ac8:	ee10 3a10 	vmov	r3, s0
 8007acc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ad0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007ad4:	d204      	bcs.n	8007ae0 <__kernel_sinf+0x18>
 8007ad6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ada:	ee17 3a90 	vmov	r3, s15
 8007ade:	b35b      	cbz	r3, 8007b38 <__kernel_sinf+0x70>
 8007ae0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ae4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007b3c <__kernel_sinf+0x74>
 8007ae8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8007b40 <__kernel_sinf+0x78>
 8007aec:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007af0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8007b44 <__kernel_sinf+0x7c>
 8007af4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007af8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8007b48 <__kernel_sinf+0x80>
 8007afc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007b00:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8007b4c <__kernel_sinf+0x84>
 8007b04:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007b08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b0c:	b930      	cbnz	r0, 8007b1c <__kernel_sinf+0x54>
 8007b0e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007b50 <__kernel_sinf+0x88>
 8007b12:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b16:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007b1a:	4770      	bx	lr
 8007b1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007b20:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007b24:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007b28:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007b2c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8007b54 <__kernel_sinf+0x8c>
 8007b30:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007b34:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	2f2ec9d3 	.word	0x2f2ec9d3
 8007b40:	b2d72f34 	.word	0xb2d72f34
 8007b44:	3638ef1b 	.word	0x3638ef1b
 8007b48:	b9500d01 	.word	0xb9500d01
 8007b4c:	3c088889 	.word	0x3c088889
 8007b50:	be2aaaab 	.word	0xbe2aaaab
 8007b54:	3e2aaaab 	.word	0x3e2aaaab

08007b58 <__ieee754_rem_pio2f>:
 8007b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b5a:	ee10 6a10 	vmov	r6, s0
 8007b5e:	4b88      	ldr	r3, [pc, #544]	@ (8007d80 <__ieee754_rem_pio2f+0x228>)
 8007b60:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8007b64:	429d      	cmp	r5, r3
 8007b66:	b087      	sub	sp, #28
 8007b68:	4604      	mov	r4, r0
 8007b6a:	d805      	bhi.n	8007b78 <__ieee754_rem_pio2f+0x20>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	ed80 0a00 	vstr	s0, [r0]
 8007b72:	6043      	str	r3, [r0, #4]
 8007b74:	2000      	movs	r0, #0
 8007b76:	e022      	b.n	8007bbe <__ieee754_rem_pio2f+0x66>
 8007b78:	4b82      	ldr	r3, [pc, #520]	@ (8007d84 <__ieee754_rem_pio2f+0x22c>)
 8007b7a:	429d      	cmp	r5, r3
 8007b7c:	d83a      	bhi.n	8007bf4 <__ieee754_rem_pio2f+0x9c>
 8007b7e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007d88 <__ieee754_rem_pio2f+0x230>
 8007b88:	4a80      	ldr	r2, [pc, #512]	@ (8007d8c <__ieee754_rem_pio2f+0x234>)
 8007b8a:	f023 030f 	bic.w	r3, r3, #15
 8007b8e:	dd18      	ble.n	8007bc2 <__ieee754_rem_pio2f+0x6a>
 8007b90:	4293      	cmp	r3, r2
 8007b92:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007b96:	bf09      	itett	eq
 8007b98:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8007d90 <__ieee754_rem_pio2f+0x238>
 8007b9c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8007d94 <__ieee754_rem_pio2f+0x23c>
 8007ba0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8007d98 <__ieee754_rem_pio2f+0x240>
 8007ba4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007ba8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007bac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bb0:	ed80 7a00 	vstr	s14, [r0]
 8007bb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007bb8:	edc0 7a01 	vstr	s15, [r0, #4]
 8007bbc:	2001      	movs	r0, #1
 8007bbe:	b007      	add	sp, #28
 8007bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007bc8:	bf09      	itett	eq
 8007bca:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8007d90 <__ieee754_rem_pio2f+0x238>
 8007bce:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8007d94 <__ieee754_rem_pio2f+0x23c>
 8007bd2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8007d98 <__ieee754_rem_pio2f+0x240>
 8007bd6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007bda:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007be2:	ed80 7a00 	vstr	s14, [r0]
 8007be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bea:	edc0 7a01 	vstr	s15, [r0, #4]
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf2:	e7e4      	b.n	8007bbe <__ieee754_rem_pio2f+0x66>
 8007bf4:	4b69      	ldr	r3, [pc, #420]	@ (8007d9c <__ieee754_rem_pio2f+0x244>)
 8007bf6:	429d      	cmp	r5, r3
 8007bf8:	d873      	bhi.n	8007ce2 <__ieee754_rem_pio2f+0x18a>
 8007bfa:	f000 f8dd 	bl	8007db8 <fabsf>
 8007bfe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007da0 <__ieee754_rem_pio2f+0x248>
 8007c02:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007c06:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c12:	ee17 0a90 	vmov	r0, s15
 8007c16:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007d88 <__ieee754_rem_pio2f+0x230>
 8007c1a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007c1e:	281f      	cmp	r0, #31
 8007c20:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007d94 <__ieee754_rem_pio2f+0x23c>
 8007c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c28:	eeb1 6a47 	vneg.f32	s12, s14
 8007c2c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007c30:	ee16 1a90 	vmov	r1, s13
 8007c34:	dc09      	bgt.n	8007c4a <__ieee754_rem_pio2f+0xf2>
 8007c36:	4a5b      	ldr	r2, [pc, #364]	@ (8007da4 <__ieee754_rem_pio2f+0x24c>)
 8007c38:	1e47      	subs	r7, r0, #1
 8007c3a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007c3e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007c42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d107      	bne.n	8007c5a <__ieee754_rem_pio2f+0x102>
 8007c4a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8007c4e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007c52:	2a08      	cmp	r2, #8
 8007c54:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007c58:	dc14      	bgt.n	8007c84 <__ieee754_rem_pio2f+0x12c>
 8007c5a:	6021      	str	r1, [r4, #0]
 8007c5c:	ed94 7a00 	vldr	s14, [r4]
 8007c60:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c6a:	ed84 0a01 	vstr	s0, [r4, #4]
 8007c6e:	daa6      	bge.n	8007bbe <__ieee754_rem_pio2f+0x66>
 8007c70:	eeb1 7a47 	vneg.f32	s14, s14
 8007c74:	eeb1 0a40 	vneg.f32	s0, s0
 8007c78:	ed84 7a00 	vstr	s14, [r4]
 8007c7c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007c80:	4240      	negs	r0, r0
 8007c82:	e79c      	b.n	8007bbe <__ieee754_rem_pio2f+0x66>
 8007c84:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8007d90 <__ieee754_rem_pio2f+0x238>
 8007c88:	eef0 6a40 	vmov.f32	s13, s0
 8007c8c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007c90:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007c94:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007c98:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d98 <__ieee754_rem_pio2f+0x240>
 8007c9c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007ca0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007ca4:	ee15 2a90 	vmov	r2, s11
 8007ca8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007cac:	1a5b      	subs	r3, r3, r1
 8007cae:	2b19      	cmp	r3, #25
 8007cb0:	dc04      	bgt.n	8007cbc <__ieee754_rem_pio2f+0x164>
 8007cb2:	edc4 5a00 	vstr	s11, [r4]
 8007cb6:	eeb0 0a66 	vmov.f32	s0, s13
 8007cba:	e7cf      	b.n	8007c5c <__ieee754_rem_pio2f+0x104>
 8007cbc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8007da8 <__ieee754_rem_pio2f+0x250>
 8007cc0:	eeb0 0a66 	vmov.f32	s0, s13
 8007cc4:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007cc8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007ccc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007dac <__ieee754_rem_pio2f+0x254>
 8007cd0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007cd4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007cd8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007cdc:	ed84 7a00 	vstr	s14, [r4]
 8007ce0:	e7bc      	b.n	8007c5c <__ieee754_rem_pio2f+0x104>
 8007ce2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007ce6:	d306      	bcc.n	8007cf6 <__ieee754_rem_pio2f+0x19e>
 8007ce8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007cec:	edc0 7a01 	vstr	s15, [r0, #4]
 8007cf0:	edc0 7a00 	vstr	s15, [r0]
 8007cf4:	e73e      	b.n	8007b74 <__ieee754_rem_pio2f+0x1c>
 8007cf6:	15ea      	asrs	r2, r5, #23
 8007cf8:	3a86      	subs	r2, #134	@ 0x86
 8007cfa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d06:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8007db0 <__ieee754_rem_pio2f+0x258>
 8007d0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d12:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007d16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d26:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007d2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d36:	edcd 7a05 	vstr	s15, [sp, #20]
 8007d3a:	d11e      	bne.n	8007d7a <__ieee754_rem_pio2f+0x222>
 8007d3c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d44:	bf0c      	ite	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	2302      	movne	r3, #2
 8007d4a:	491a      	ldr	r1, [pc, #104]	@ (8007db4 <__ieee754_rem_pio2f+0x25c>)
 8007d4c:	9101      	str	r1, [sp, #4]
 8007d4e:	2102      	movs	r1, #2
 8007d50:	9100      	str	r1, [sp, #0]
 8007d52:	a803      	add	r0, sp, #12
 8007d54:	4621      	mov	r1, r4
 8007d56:	f000 f837 	bl	8007dc8 <__kernel_rem_pio2f>
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	f6bf af2f 	bge.w	8007bbe <__ieee754_rem_pio2f+0x66>
 8007d60:	edd4 7a00 	vldr	s15, [r4]
 8007d64:	eef1 7a67 	vneg.f32	s15, s15
 8007d68:	edc4 7a00 	vstr	s15, [r4]
 8007d6c:	edd4 7a01 	vldr	s15, [r4, #4]
 8007d70:	eef1 7a67 	vneg.f32	s15, s15
 8007d74:	edc4 7a01 	vstr	s15, [r4, #4]
 8007d78:	e782      	b.n	8007c80 <__ieee754_rem_pio2f+0x128>
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e7e5      	b.n	8007d4a <__ieee754_rem_pio2f+0x1f2>
 8007d7e:	bf00      	nop
 8007d80:	3f490fd8 	.word	0x3f490fd8
 8007d84:	4016cbe3 	.word	0x4016cbe3
 8007d88:	3fc90f80 	.word	0x3fc90f80
 8007d8c:	3fc90fd0 	.word	0x3fc90fd0
 8007d90:	37354400 	.word	0x37354400
 8007d94:	37354443 	.word	0x37354443
 8007d98:	2e85a308 	.word	0x2e85a308
 8007d9c:	43490f80 	.word	0x43490f80
 8007da0:	3f22f984 	.word	0x3f22f984
 8007da4:	08008478 	.word	0x08008478
 8007da8:	2e85a300 	.word	0x2e85a300
 8007dac:	248d3132 	.word	0x248d3132
 8007db0:	43800000 	.word	0x43800000
 8007db4:	080084f8 	.word	0x080084f8

08007db8 <fabsf>:
 8007db8:	ee10 3a10 	vmov	r3, s0
 8007dbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007dc0:	ee00 3a10 	vmov	s0, r3
 8007dc4:	4770      	bx	lr
	...

08007dc8 <__kernel_rem_pio2f>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	ed2d 8b04 	vpush	{d8-d9}
 8007dd0:	b0d9      	sub	sp, #356	@ 0x164
 8007dd2:	4690      	mov	r8, r2
 8007dd4:	9001      	str	r0, [sp, #4]
 8007dd6:	4ab9      	ldr	r2, [pc, #740]	@ (80080bc <__kernel_rem_pio2f+0x2f4>)
 8007dd8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8007dda:	f118 0f04 	cmn.w	r8, #4
 8007dde:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8007de2:	460f      	mov	r7, r1
 8007de4:	f103 3bff 	add.w	fp, r3, #4294967295
 8007de8:	db27      	blt.n	8007e3a <__kernel_rem_pio2f+0x72>
 8007dea:	f1b8 0203 	subs.w	r2, r8, #3
 8007dee:	bf48      	it	mi
 8007df0:	f108 0204 	addmi.w	r2, r8, #4
 8007df4:	10d2      	asrs	r2, r2, #3
 8007df6:	1c55      	adds	r5, r2, #1
 8007df8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007dfa:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80080cc <__kernel_rem_pio2f+0x304>
 8007dfe:	00e8      	lsls	r0, r5, #3
 8007e00:	eba2 060b 	sub.w	r6, r2, fp
 8007e04:	9002      	str	r0, [sp, #8]
 8007e06:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8007e0a:	eb0a 0c0b 	add.w	ip, sl, fp
 8007e0e:	ac1c      	add	r4, sp, #112	@ 0x70
 8007e10:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007e14:	2000      	movs	r0, #0
 8007e16:	4560      	cmp	r0, ip
 8007e18:	dd11      	ble.n	8007e3e <__kernel_rem_pio2f+0x76>
 8007e1a:	a91c      	add	r1, sp, #112	@ 0x70
 8007e1c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007e20:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007e24:	f04f 0c00 	mov.w	ip, #0
 8007e28:	45d4      	cmp	ip, sl
 8007e2a:	dc27      	bgt.n	8007e7c <__kernel_rem_pio2f+0xb4>
 8007e2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007e30:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80080cc <__kernel_rem_pio2f+0x304>
 8007e34:	4606      	mov	r6, r0
 8007e36:	2400      	movs	r4, #0
 8007e38:	e016      	b.n	8007e68 <__kernel_rem_pio2f+0xa0>
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	e7db      	b.n	8007df6 <__kernel_rem_pio2f+0x2e>
 8007e3e:	42c6      	cmn	r6, r0
 8007e40:	bf5d      	ittte	pl
 8007e42:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007e46:	ee07 1a90 	vmovpl	s15, r1
 8007e4a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007e4e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007e52:	ece4 7a01 	vstmia	r4!, {s15}
 8007e56:	3001      	adds	r0, #1
 8007e58:	e7dd      	b.n	8007e16 <__kernel_rem_pio2f+0x4e>
 8007e5a:	ecfe 6a01 	vldmia	lr!, {s13}
 8007e5e:	ed96 7a00 	vldr	s14, [r6]
 8007e62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e66:	3401      	adds	r4, #1
 8007e68:	455c      	cmp	r4, fp
 8007e6a:	f1a6 0604 	sub.w	r6, r6, #4
 8007e6e:	ddf4      	ble.n	8007e5a <__kernel_rem_pio2f+0x92>
 8007e70:	ece9 7a01 	vstmia	r9!, {s15}
 8007e74:	f10c 0c01 	add.w	ip, ip, #1
 8007e78:	3004      	adds	r0, #4
 8007e7a:	e7d5      	b.n	8007e28 <__kernel_rem_pio2f+0x60>
 8007e7c:	a908      	add	r1, sp, #32
 8007e7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e82:	9104      	str	r1, [sp, #16]
 8007e84:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007e86:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80080c8 <__kernel_rem_pio2f+0x300>
 8007e8a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80080c4 <__kernel_rem_pio2f+0x2fc>
 8007e8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007e92:	9203      	str	r2, [sp, #12]
 8007e94:	4654      	mov	r4, sl
 8007e96:	00a2      	lsls	r2, r4, #2
 8007e98:	9205      	str	r2, [sp, #20]
 8007e9a:	aa58      	add	r2, sp, #352	@ 0x160
 8007e9c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007ea0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8007ea4:	a944      	add	r1, sp, #272	@ 0x110
 8007ea6:	aa08      	add	r2, sp, #32
 8007ea8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007eac:	4694      	mov	ip, r2
 8007eae:	4626      	mov	r6, r4
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	f1a0 0004 	sub.w	r0, r0, #4
 8007eb6:	dc4c      	bgt.n	8007f52 <__kernel_rem_pio2f+0x18a>
 8007eb8:	4628      	mov	r0, r5
 8007eba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ebe:	f000 f9f5 	bl	80082ac <scalbnf>
 8007ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8007ec6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8007eca:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007ece:	f000 fa53 	bl	8008378 <floorf>
 8007ed2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007ed6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ee0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007ee4:	ee17 9a90 	vmov	r9, s15
 8007ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eec:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007ef0:	dd41      	ble.n	8007f76 <__kernel_rem_pio2f+0x1ae>
 8007ef2:	f104 3cff 	add.w	ip, r4, #4294967295
 8007ef6:	a908      	add	r1, sp, #32
 8007ef8:	f1c5 0e08 	rsb	lr, r5, #8
 8007efc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007f00:	fa46 f00e 	asr.w	r0, r6, lr
 8007f04:	4481      	add	r9, r0
 8007f06:	fa00 f00e 	lsl.w	r0, r0, lr
 8007f0a:	1a36      	subs	r6, r6, r0
 8007f0c:	f1c5 0007 	rsb	r0, r5, #7
 8007f10:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007f14:	4106      	asrs	r6, r0
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	dd3c      	ble.n	8007f94 <__kernel_rem_pio2f+0x1cc>
 8007f1a:	f04f 0e00 	mov.w	lr, #0
 8007f1e:	f109 0901 	add.w	r9, r9, #1
 8007f22:	4670      	mov	r0, lr
 8007f24:	4574      	cmp	r4, lr
 8007f26:	dc68      	bgt.n	8007ffa <__kernel_rem_pio2f+0x232>
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	dd03      	ble.n	8007f34 <__kernel_rem_pio2f+0x16c>
 8007f2c:	2d01      	cmp	r5, #1
 8007f2e:	d074      	beq.n	800801a <__kernel_rem_pio2f+0x252>
 8007f30:	2d02      	cmp	r5, #2
 8007f32:	d07d      	beq.n	8008030 <__kernel_rem_pio2f+0x268>
 8007f34:	2e02      	cmp	r6, #2
 8007f36:	d12d      	bne.n	8007f94 <__kernel_rem_pio2f+0x1cc>
 8007f38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007f3c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007f40:	b340      	cbz	r0, 8007f94 <__kernel_rem_pio2f+0x1cc>
 8007f42:	4628      	mov	r0, r5
 8007f44:	9306      	str	r3, [sp, #24]
 8007f46:	f000 f9b1 	bl	80082ac <scalbnf>
 8007f4a:	9b06      	ldr	r3, [sp, #24]
 8007f4c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007f50:	e020      	b.n	8007f94 <__kernel_rem_pio2f+0x1cc>
 8007f52:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007f56:	3e01      	subs	r6, #1
 8007f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f60:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007f64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007f68:	ecac 0a01 	vstmia	ip!, {s0}
 8007f6c:	ed90 0a00 	vldr	s0, [r0]
 8007f70:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007f74:	e79c      	b.n	8007eb0 <__kernel_rem_pio2f+0xe8>
 8007f76:	d105      	bne.n	8007f84 <__kernel_rem_pio2f+0x1bc>
 8007f78:	1e60      	subs	r0, r4, #1
 8007f7a:	a908      	add	r1, sp, #32
 8007f7c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007f80:	11f6      	asrs	r6, r6, #7
 8007f82:	e7c8      	b.n	8007f16 <__kernel_rem_pio2f+0x14e>
 8007f84:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007f88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f90:	da31      	bge.n	8007ff6 <__kernel_rem_pio2f+0x22e>
 8007f92:	2600      	movs	r6, #0
 8007f94:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9c:	f040 8098 	bne.w	80080d0 <__kernel_rem_pio2f+0x308>
 8007fa0:	1e60      	subs	r0, r4, #1
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	4550      	cmp	r0, sl
 8007fa6:	da4b      	bge.n	8008040 <__kernel_rem_pio2f+0x278>
 8007fa8:	2a00      	cmp	r2, #0
 8007faa:	d065      	beq.n	8008078 <__kernel_rem_pio2f+0x2b0>
 8007fac:	3c01      	subs	r4, #1
 8007fae:	ab08      	add	r3, sp, #32
 8007fb0:	3d08      	subs	r5, #8
 8007fb2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0f8      	beq.n	8007fac <__kernel_rem_pio2f+0x1e4>
 8007fba:	4628      	mov	r0, r5
 8007fbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007fc0:	f000 f974 	bl	80082ac <scalbnf>
 8007fc4:	1c63      	adds	r3, r4, #1
 8007fc6:	aa44      	add	r2, sp, #272	@ 0x110
 8007fc8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80080c8 <__kernel_rem_pio2f+0x300>
 8007fcc:	0099      	lsls	r1, r3, #2
 8007fce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007fd2:	4623      	mov	r3, r4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f280 80a9 	bge.w	800812c <__kernel_rem_pio2f+0x364>
 8007fda:	4623      	mov	r3, r4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f2c0 80c7 	blt.w	8008170 <__kernel_rem_pio2f+0x3a8>
 8007fe2:	aa44      	add	r2, sp, #272	@ 0x110
 8007fe4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007fe8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80080c0 <__kernel_rem_pio2f+0x2f8>
 8007fec:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80080cc <__kernel_rem_pio2f+0x304>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	1ae2      	subs	r2, r4, r3
 8007ff4:	e0b1      	b.n	800815a <__kernel_rem_pio2f+0x392>
 8007ff6:	2602      	movs	r6, #2
 8007ff8:	e78f      	b.n	8007f1a <__kernel_rem_pio2f+0x152>
 8007ffa:	f852 1b04 	ldr.w	r1, [r2], #4
 8007ffe:	b948      	cbnz	r0, 8008014 <__kernel_rem_pio2f+0x24c>
 8008000:	b121      	cbz	r1, 800800c <__kernel_rem_pio2f+0x244>
 8008002:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8008006:	f842 1c04 	str.w	r1, [r2, #-4]
 800800a:	2101      	movs	r1, #1
 800800c:	f10e 0e01 	add.w	lr, lr, #1
 8008010:	4608      	mov	r0, r1
 8008012:	e787      	b.n	8007f24 <__kernel_rem_pio2f+0x15c>
 8008014:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8008018:	e7f5      	b.n	8008006 <__kernel_rem_pio2f+0x23e>
 800801a:	f104 3cff 	add.w	ip, r4, #4294967295
 800801e:	aa08      	add	r2, sp, #32
 8008020:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008024:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008028:	a908      	add	r1, sp, #32
 800802a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800802e:	e781      	b.n	8007f34 <__kernel_rem_pio2f+0x16c>
 8008030:	f104 3cff 	add.w	ip, r4, #4294967295
 8008034:	aa08      	add	r2, sp, #32
 8008036:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800803a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800803e:	e7f3      	b.n	8008028 <__kernel_rem_pio2f+0x260>
 8008040:	a908      	add	r1, sp, #32
 8008042:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008046:	3801      	subs	r0, #1
 8008048:	430a      	orrs	r2, r1
 800804a:	e7ab      	b.n	8007fa4 <__kernel_rem_pio2f+0x1dc>
 800804c:	3201      	adds	r2, #1
 800804e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008052:	2e00      	cmp	r6, #0
 8008054:	d0fa      	beq.n	800804c <__kernel_rem_pio2f+0x284>
 8008056:	9905      	ldr	r1, [sp, #20]
 8008058:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800805c:	eb0d 0001 	add.w	r0, sp, r1
 8008060:	18e6      	adds	r6, r4, r3
 8008062:	a91c      	add	r1, sp, #112	@ 0x70
 8008064:	f104 0c01 	add.w	ip, r4, #1
 8008068:	384c      	subs	r0, #76	@ 0x4c
 800806a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800806e:	4422      	add	r2, r4
 8008070:	4562      	cmp	r2, ip
 8008072:	da04      	bge.n	800807e <__kernel_rem_pio2f+0x2b6>
 8008074:	4614      	mov	r4, r2
 8008076:	e70e      	b.n	8007e96 <__kernel_rem_pio2f+0xce>
 8008078:	9804      	ldr	r0, [sp, #16]
 800807a:	2201      	movs	r2, #1
 800807c:	e7e7      	b.n	800804e <__kernel_rem_pio2f+0x286>
 800807e:	9903      	ldr	r1, [sp, #12]
 8008080:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008084:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8008088:	9105      	str	r1, [sp, #20]
 800808a:	ee07 1a90 	vmov	s15, r1
 800808e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008092:	2400      	movs	r4, #0
 8008094:	ece6 7a01 	vstmia	r6!, {s15}
 8008098:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80080cc <__kernel_rem_pio2f+0x304>
 800809c:	46b1      	mov	r9, r6
 800809e:	455c      	cmp	r4, fp
 80080a0:	dd04      	ble.n	80080ac <__kernel_rem_pio2f+0x2e4>
 80080a2:	ece0 7a01 	vstmia	r0!, {s15}
 80080a6:	f10c 0c01 	add.w	ip, ip, #1
 80080aa:	e7e1      	b.n	8008070 <__kernel_rem_pio2f+0x2a8>
 80080ac:	ecfe 6a01 	vldmia	lr!, {s13}
 80080b0:	ed39 7a01 	vldmdb	r9!, {s14}
 80080b4:	3401      	adds	r4, #1
 80080b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80080ba:	e7f0      	b.n	800809e <__kernel_rem_pio2f+0x2d6>
 80080bc:	0800883c 	.word	0x0800883c
 80080c0:	08008810 	.word	0x08008810
 80080c4:	43800000 	.word	0x43800000
 80080c8:	3b800000 	.word	0x3b800000
 80080cc:	00000000 	.word	0x00000000
 80080d0:	9b02      	ldr	r3, [sp, #8]
 80080d2:	eeb0 0a48 	vmov.f32	s0, s16
 80080d6:	eba3 0008 	sub.w	r0, r3, r8
 80080da:	f000 f8e7 	bl	80082ac <scalbnf>
 80080de:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80080c4 <__kernel_rem_pio2f+0x2fc>
 80080e2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80080e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ea:	db19      	blt.n	8008120 <__kernel_rem_pio2f+0x358>
 80080ec:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80080c8 <__kernel_rem_pio2f+0x300>
 80080f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80080f4:	aa08      	add	r2, sp, #32
 80080f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080fa:	3508      	adds	r5, #8
 80080fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008100:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008108:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800810c:	ee10 3a10 	vmov	r3, s0
 8008110:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008114:	ee17 3a90 	vmov	r3, s15
 8008118:	3401      	adds	r4, #1
 800811a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800811e:	e74c      	b.n	8007fba <__kernel_rem_pio2f+0x1f2>
 8008120:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008124:	aa08      	add	r2, sp, #32
 8008126:	ee10 3a10 	vmov	r3, s0
 800812a:	e7f6      	b.n	800811a <__kernel_rem_pio2f+0x352>
 800812c:	a808      	add	r0, sp, #32
 800812e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008132:	9001      	str	r0, [sp, #4]
 8008134:	ee07 0a90 	vmov	s15, r0
 8008138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800813c:	3b01      	subs	r3, #1
 800813e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008142:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008146:	ed62 7a01 	vstmdb	r2!, {s15}
 800814a:	e743      	b.n	8007fd4 <__kernel_rem_pio2f+0x20c>
 800814c:	ecfc 6a01 	vldmia	ip!, {s13}
 8008150:	ecb5 7a01 	vldmia	r5!, {s14}
 8008154:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008158:	3001      	adds	r0, #1
 800815a:	4550      	cmp	r0, sl
 800815c:	dc01      	bgt.n	8008162 <__kernel_rem_pio2f+0x39a>
 800815e:	4282      	cmp	r2, r0
 8008160:	daf4      	bge.n	800814c <__kernel_rem_pio2f+0x384>
 8008162:	a858      	add	r0, sp, #352	@ 0x160
 8008164:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008168:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800816c:	3b01      	subs	r3, #1
 800816e:	e735      	b.n	8007fdc <__kernel_rem_pio2f+0x214>
 8008170:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008172:	2b02      	cmp	r3, #2
 8008174:	dc09      	bgt.n	800818a <__kernel_rem_pio2f+0x3c2>
 8008176:	2b00      	cmp	r3, #0
 8008178:	dc2b      	bgt.n	80081d2 <__kernel_rem_pio2f+0x40a>
 800817a:	d044      	beq.n	8008206 <__kernel_rem_pio2f+0x43e>
 800817c:	f009 0007 	and.w	r0, r9, #7
 8008180:	b059      	add	sp, #356	@ 0x164
 8008182:	ecbd 8b04 	vpop	{d8-d9}
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800818c:	2b03      	cmp	r3, #3
 800818e:	d1f5      	bne.n	800817c <__kernel_rem_pio2f+0x3b4>
 8008190:	aa30      	add	r2, sp, #192	@ 0xc0
 8008192:	1f0b      	subs	r3, r1, #4
 8008194:	4413      	add	r3, r2
 8008196:	461a      	mov	r2, r3
 8008198:	4620      	mov	r0, r4
 800819a:	2800      	cmp	r0, #0
 800819c:	f1a2 0204 	sub.w	r2, r2, #4
 80081a0:	dc52      	bgt.n	8008248 <__kernel_rem_pio2f+0x480>
 80081a2:	4622      	mov	r2, r4
 80081a4:	2a01      	cmp	r2, #1
 80081a6:	f1a3 0304 	sub.w	r3, r3, #4
 80081aa:	dc5d      	bgt.n	8008268 <__kernel_rem_pio2f+0x4a0>
 80081ac:	ab30      	add	r3, sp, #192	@ 0xc0
 80081ae:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80080cc <__kernel_rem_pio2f+0x304>
 80081b2:	440b      	add	r3, r1
 80081b4:	2c01      	cmp	r4, #1
 80081b6:	dc67      	bgt.n	8008288 <__kernel_rem_pio2f+0x4c0>
 80081b8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80081bc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80081c0:	2e00      	cmp	r6, #0
 80081c2:	d167      	bne.n	8008294 <__kernel_rem_pio2f+0x4cc>
 80081c4:	edc7 6a00 	vstr	s13, [r7]
 80081c8:	ed87 7a01 	vstr	s14, [r7, #4]
 80081cc:	edc7 7a02 	vstr	s15, [r7, #8]
 80081d0:	e7d4      	b.n	800817c <__kernel_rem_pio2f+0x3b4>
 80081d2:	ab30      	add	r3, sp, #192	@ 0xc0
 80081d4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80080cc <__kernel_rem_pio2f+0x304>
 80081d8:	440b      	add	r3, r1
 80081da:	4622      	mov	r2, r4
 80081dc:	2a00      	cmp	r2, #0
 80081de:	da24      	bge.n	800822a <__kernel_rem_pio2f+0x462>
 80081e0:	b34e      	cbz	r6, 8008236 <__kernel_rem_pio2f+0x46e>
 80081e2:	eef1 7a47 	vneg.f32	s15, s14
 80081e6:	edc7 7a00 	vstr	s15, [r7]
 80081ea:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80081ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081f2:	aa31      	add	r2, sp, #196	@ 0xc4
 80081f4:	2301      	movs	r3, #1
 80081f6:	429c      	cmp	r4, r3
 80081f8:	da20      	bge.n	800823c <__kernel_rem_pio2f+0x474>
 80081fa:	b10e      	cbz	r6, 8008200 <__kernel_rem_pio2f+0x438>
 80081fc:	eef1 7a67 	vneg.f32	s15, s15
 8008200:	edc7 7a01 	vstr	s15, [r7, #4]
 8008204:	e7ba      	b.n	800817c <__kernel_rem_pio2f+0x3b4>
 8008206:	ab30      	add	r3, sp, #192	@ 0xc0
 8008208:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80080cc <__kernel_rem_pio2f+0x304>
 800820c:	440b      	add	r3, r1
 800820e:	2c00      	cmp	r4, #0
 8008210:	da05      	bge.n	800821e <__kernel_rem_pio2f+0x456>
 8008212:	b10e      	cbz	r6, 8008218 <__kernel_rem_pio2f+0x450>
 8008214:	eef1 7a67 	vneg.f32	s15, s15
 8008218:	edc7 7a00 	vstr	s15, [r7]
 800821c:	e7ae      	b.n	800817c <__kernel_rem_pio2f+0x3b4>
 800821e:	ed33 7a01 	vldmdb	r3!, {s14}
 8008222:	3c01      	subs	r4, #1
 8008224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008228:	e7f1      	b.n	800820e <__kernel_rem_pio2f+0x446>
 800822a:	ed73 7a01 	vldmdb	r3!, {s15}
 800822e:	3a01      	subs	r2, #1
 8008230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008234:	e7d2      	b.n	80081dc <__kernel_rem_pio2f+0x414>
 8008236:	eef0 7a47 	vmov.f32	s15, s14
 800823a:	e7d4      	b.n	80081e6 <__kernel_rem_pio2f+0x41e>
 800823c:	ecb2 7a01 	vldmia	r2!, {s14}
 8008240:	3301      	adds	r3, #1
 8008242:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008246:	e7d6      	b.n	80081f6 <__kernel_rem_pio2f+0x42e>
 8008248:	edd2 7a00 	vldr	s15, [r2]
 800824c:	edd2 6a01 	vldr	s13, [r2, #4]
 8008250:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008254:	3801      	subs	r0, #1
 8008256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800825a:	ed82 7a00 	vstr	s14, [r2]
 800825e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008262:	edc2 7a01 	vstr	s15, [r2, #4]
 8008266:	e798      	b.n	800819a <__kernel_rem_pio2f+0x3d2>
 8008268:	edd3 7a00 	vldr	s15, [r3]
 800826c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008270:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008274:	3a01      	subs	r2, #1
 8008276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800827a:	ed83 7a00 	vstr	s14, [r3]
 800827e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008282:	edc3 7a01 	vstr	s15, [r3, #4]
 8008286:	e78d      	b.n	80081a4 <__kernel_rem_pio2f+0x3dc>
 8008288:	ed33 7a01 	vldmdb	r3!, {s14}
 800828c:	3c01      	subs	r4, #1
 800828e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008292:	e78f      	b.n	80081b4 <__kernel_rem_pio2f+0x3ec>
 8008294:	eef1 6a66 	vneg.f32	s13, s13
 8008298:	eeb1 7a47 	vneg.f32	s14, s14
 800829c:	edc7 6a00 	vstr	s13, [r7]
 80082a0:	ed87 7a01 	vstr	s14, [r7, #4]
 80082a4:	eef1 7a67 	vneg.f32	s15, s15
 80082a8:	e790      	b.n	80081cc <__kernel_rem_pio2f+0x404>
 80082aa:	bf00      	nop

080082ac <scalbnf>:
 80082ac:	ee10 3a10 	vmov	r3, s0
 80082b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80082b4:	d02b      	beq.n	800830e <scalbnf+0x62>
 80082b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80082ba:	d302      	bcc.n	80082c2 <scalbnf+0x16>
 80082bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082c0:	4770      	bx	lr
 80082c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80082c6:	d123      	bne.n	8008310 <scalbnf+0x64>
 80082c8:	4b24      	ldr	r3, [pc, #144]	@ (800835c <scalbnf+0xb0>)
 80082ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008360 <scalbnf+0xb4>
 80082ce:	4298      	cmp	r0, r3
 80082d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80082d4:	db17      	blt.n	8008306 <scalbnf+0x5a>
 80082d6:	ee10 3a10 	vmov	r3, s0
 80082da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80082de:	3a19      	subs	r2, #25
 80082e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80082e4:	4288      	cmp	r0, r1
 80082e6:	dd15      	ble.n	8008314 <scalbnf+0x68>
 80082e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008364 <scalbnf+0xb8>
 80082ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008368 <scalbnf+0xbc>
 80082f0:	ee10 3a10 	vmov	r3, s0
 80082f4:	eeb0 7a67 	vmov.f32	s14, s15
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bfb8      	it	lt
 80082fc:	eef0 7a66 	vmovlt.f32	s15, s13
 8008300:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008304:	4770      	bx	lr
 8008306:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800836c <scalbnf+0xc0>
 800830a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800830e:	4770      	bx	lr
 8008310:	0dd2      	lsrs	r2, r2, #23
 8008312:	e7e5      	b.n	80082e0 <scalbnf+0x34>
 8008314:	4410      	add	r0, r2
 8008316:	28fe      	cmp	r0, #254	@ 0xfe
 8008318:	dce6      	bgt.n	80082e8 <scalbnf+0x3c>
 800831a:	2800      	cmp	r0, #0
 800831c:	dd06      	ble.n	800832c <scalbnf+0x80>
 800831e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008322:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008326:	ee00 3a10 	vmov	s0, r3
 800832a:	4770      	bx	lr
 800832c:	f110 0f16 	cmn.w	r0, #22
 8008330:	da09      	bge.n	8008346 <scalbnf+0x9a>
 8008332:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800836c <scalbnf+0xc0>
 8008336:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008370 <scalbnf+0xc4>
 800833a:	ee10 3a10 	vmov	r3, s0
 800833e:	eeb0 7a67 	vmov.f32	s14, s15
 8008342:	2b00      	cmp	r3, #0
 8008344:	e7d9      	b.n	80082fa <scalbnf+0x4e>
 8008346:	3019      	adds	r0, #25
 8008348:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800834c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008350:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008374 <scalbnf+0xc8>
 8008354:	ee07 3a90 	vmov	s15, r3
 8008358:	e7d7      	b.n	800830a <scalbnf+0x5e>
 800835a:	bf00      	nop
 800835c:	ffff3cb0 	.word	0xffff3cb0
 8008360:	4c000000 	.word	0x4c000000
 8008364:	7149f2ca 	.word	0x7149f2ca
 8008368:	f149f2ca 	.word	0xf149f2ca
 800836c:	0da24260 	.word	0x0da24260
 8008370:	8da24260 	.word	0x8da24260
 8008374:	33000000 	.word	0x33000000

08008378 <floorf>:
 8008378:	ee10 3a10 	vmov	r3, s0
 800837c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008380:	3a7f      	subs	r2, #127	@ 0x7f
 8008382:	2a16      	cmp	r2, #22
 8008384:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008388:	dc2b      	bgt.n	80083e2 <floorf+0x6a>
 800838a:	2a00      	cmp	r2, #0
 800838c:	da12      	bge.n	80083b4 <floorf+0x3c>
 800838e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80083f4 <floorf+0x7c>
 8008392:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008396:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800839a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839e:	dd06      	ble.n	80083ae <floorf+0x36>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	da24      	bge.n	80083ee <floorf+0x76>
 80083a4:	2900      	cmp	r1, #0
 80083a6:	4b14      	ldr	r3, [pc, #80]	@ (80083f8 <floorf+0x80>)
 80083a8:	bf08      	it	eq
 80083aa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80083ae:	ee00 3a10 	vmov	s0, r3
 80083b2:	4770      	bx	lr
 80083b4:	4911      	ldr	r1, [pc, #68]	@ (80083fc <floorf+0x84>)
 80083b6:	4111      	asrs	r1, r2
 80083b8:	420b      	tst	r3, r1
 80083ba:	d0fa      	beq.n	80083b2 <floorf+0x3a>
 80083bc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80083f4 <floorf+0x7c>
 80083c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80083c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083cc:	ddef      	ble.n	80083ae <floorf+0x36>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bfbe      	ittt	lt
 80083d2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80083d6:	fa40 f202 	asrlt.w	r2, r0, r2
 80083da:	189b      	addlt	r3, r3, r2
 80083dc:	ea23 0301 	bic.w	r3, r3, r1
 80083e0:	e7e5      	b.n	80083ae <floorf+0x36>
 80083e2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80083e6:	d3e4      	bcc.n	80083b2 <floorf+0x3a>
 80083e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80083ec:	4770      	bx	lr
 80083ee:	2300      	movs	r3, #0
 80083f0:	e7dd      	b.n	80083ae <floorf+0x36>
 80083f2:	bf00      	nop
 80083f4:	7149f2ca 	.word	0x7149f2ca
 80083f8:	bf800000 	.word	0xbf800000
 80083fc:	007fffff 	.word	0x007fffff

08008400 <_init>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr

0800840c <_fini>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr
