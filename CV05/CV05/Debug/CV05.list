
CV05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08004174  08004174  00005174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043fc  080043fc  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  080043fc  080043fc  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043fc  080043fc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043fc  080043fc  000053fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004404  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000068  0800446c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800446c  00006494  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b512  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6b  00000000  00000000  000115a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  00013310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007de  00000000  00000000  00013d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b3b  00000000  00000000  0001450e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e475  00000000  00000000  00025049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fce7  00000000  00000000  000334be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000931a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d60  00000000  00000000  000931e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00095f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800415c 	.word	0x0800415c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800415c 	.word	0x0800415c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <uart_process_command>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void uart_process_command(char* cmd)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	//printf("received: '%s'\n", cmd);

	char *token;
	token = strtok(cmd, " ");
 800023c:	4a5b      	ldr	r2, [pc, #364]	@ (80003ac <uart_process_command+0x178>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f003 f908 	bl	8003458 <strtok>
 8000248:	0003      	movs	r3, r0
 800024a:	60fb      	str	r3, [r7, #12]

	if (strcasecmp(token, "HELLO") == 0) {
 800024c:	4a58      	ldr	r2, [pc, #352]	@ (80003b0 <uart_process_command+0x17c>)
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f003 f8e6 	bl	8003424 <strcasecmp>
 8000258:	1e03      	subs	r3, r0, #0
 800025a:	d104      	bne.n	8000266 <uart_process_command+0x32>
		printf("Communication OK\n");
 800025c:	4b55      	ldr	r3, [pc, #340]	@ (80003b4 <uart_process_command+0x180>)
 800025e:	0018      	movs	r0, r3
 8000260:	f002 ffe2 	bl	8003228 <puts>
		else
			printf("LED2 OFF\n");

	}

}
 8000264:	e09e      	b.n	80003a4 <uart_process_command+0x170>
	else if (strcasecmp(token, "LED1") == 0) {
 8000266:	4a54      	ldr	r2, [pc, #336]	@ (80003b8 <uart_process_command+0x184>)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f003 f8d9 	bl	8003424 <strcasecmp>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d12f      	bne.n	80002d6 <uart_process_command+0xa2>
		token = strtok(NULL, " ");
 8000276:	4b4d      	ldr	r3, [pc, #308]	@ (80003ac <uart_process_command+0x178>)
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f003 f8ec 	bl	8003458 <strtok>
 8000280:	0003      	movs	r3, r0
 8000282:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000284:	4a4d      	ldr	r2, [pc, #308]	@ (80003bc <uart_process_command+0x188>)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	0011      	movs	r1, r2
 800028a:	0018      	movs	r0, r3
 800028c:	f003 f8ca 	bl	8003424 <strcasecmp>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d10b      	bne.n	80002ac <uart_process_command+0x78>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000294:	2390      	movs	r3, #144	@ 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2201      	movs	r2, #1
 800029a:	2110      	movs	r1, #16
 800029c:	0018      	movs	r0, r3
 800029e:	f001 f986 	bl	80015ae <HAL_GPIO_WritePin>
			printf("OK\n");
 80002a2:	4b47      	ldr	r3, [pc, #284]	@ (80003c0 <uart_process_command+0x18c>)
 80002a4:	0018      	movs	r0, r3
 80002a6:	f002 ffbf 	bl	8003228 <puts>
}
 80002aa:	e07b      	b.n	80003a4 <uart_process_command+0x170>
		else if (strcasecmp(token, "OFF") == 0)
 80002ac:	4a45      	ldr	r2, [pc, #276]	@ (80003c4 <uart_process_command+0x190>)
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	0011      	movs	r1, r2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f003 f8b6 	bl	8003424 <strcasecmp>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d000      	beq.n	80002be <uart_process_command+0x8a>
 80002bc:	e072      	b.n	80003a4 <uart_process_command+0x170>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80002be:	2390      	movs	r3, #144	@ 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	2200      	movs	r2, #0
 80002c4:	2110      	movs	r1, #16
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 f971 	bl	80015ae <HAL_GPIO_WritePin>
			printf("OK\n");
 80002cc:	4b3c      	ldr	r3, [pc, #240]	@ (80003c0 <uart_process_command+0x18c>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f002 ffaa 	bl	8003228 <puts>
}
 80002d4:	e066      	b.n	80003a4 <uart_process_command+0x170>
	else if (strcasecmp(token, "LED2") == 0)
 80002d6:	4a3c      	ldr	r2, [pc, #240]	@ (80003c8 <uart_process_command+0x194>)
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f003 f8a1 	bl	8003424 <strcasecmp>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d12c      	bne.n	8000340 <uart_process_command+0x10c>
		token = strtok(NULL, " ");
 80002e6:	4b31      	ldr	r3, [pc, #196]	@ (80003ac <uart_process_command+0x178>)
 80002e8:	0019      	movs	r1, r3
 80002ea:	2000      	movs	r0, #0
 80002ec:	f003 f8b4 	bl	8003458 <strtok>
 80002f0:	0003      	movs	r3, r0
 80002f2:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 80002f4:	4a31      	ldr	r2, [pc, #196]	@ (80003bc <uart_process_command+0x188>)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	0011      	movs	r1, r2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f003 f892 	bl	8003424 <strcasecmp>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d10a      	bne.n	800031a <uart_process_command+0xe6>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000304:	4b31      	ldr	r3, [pc, #196]	@ (80003cc <uart_process_command+0x198>)
 8000306:	2201      	movs	r2, #1
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f001 f94f 	bl	80015ae <HAL_GPIO_WritePin>
			printf("OK\n");
 8000310:	4b2b      	ldr	r3, [pc, #172]	@ (80003c0 <uart_process_command+0x18c>)
 8000312:	0018      	movs	r0, r3
 8000314:	f002 ff88 	bl	8003228 <puts>
}
 8000318:	e044      	b.n	80003a4 <uart_process_command+0x170>
		else if (strcasecmp(token, "OFF") == 0)
 800031a:	4a2a      	ldr	r2, [pc, #168]	@ (80003c4 <uart_process_command+0x190>)
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f003 f87f 	bl	8003424 <strcasecmp>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d13c      	bne.n	80003a4 <uart_process_command+0x170>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800032a:	4b28      	ldr	r3, [pc, #160]	@ (80003cc <uart_process_command+0x198>)
 800032c:	2200      	movs	r2, #0
 800032e:	2101      	movs	r1, #1
 8000330:	0018      	movs	r0, r3
 8000332:	f001 f93c 	bl	80015ae <HAL_GPIO_WritePin>
			printf("OK\n");
 8000336:	4b22      	ldr	r3, [pc, #136]	@ (80003c0 <uart_process_command+0x18c>)
 8000338:	0018      	movs	r0, r3
 800033a:	f002 ff75 	bl	8003228 <puts>
}
 800033e:	e031      	b.n	80003a4 <uart_process_command+0x170>
	else if (strcasecmp(token, "STATUS") == 0)
 8000340:	4a23      	ldr	r2, [pc, #140]	@ (80003d0 <uart_process_command+0x19c>)
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	0011      	movs	r1, r2
 8000346:	0018      	movs	r0, r3
 8000348:	f003 f86c 	bl	8003424 <strcasecmp>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d129      	bne.n	80003a4 <uart_process_command+0x170>
		token = strtok(NULL, " ");
 8000350:	4b16      	ldr	r3, [pc, #88]	@ (80003ac <uart_process_command+0x178>)
 8000352:	0019      	movs	r1, r3
 8000354:	2000      	movs	r0, #0
 8000356:	f003 f87f 	bl	8003458 <strtok>
 800035a:	0003      	movs	r3, r0
 800035c:	60fb      	str	r3, [r7, #12]
		if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == 1)
 800035e:	2390      	movs	r3, #144	@ 0x90
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	2110      	movs	r1, #16
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f905 	bl	8001574 <HAL_GPIO_ReadPin>
 800036a:	0003      	movs	r3, r0
 800036c:	2b01      	cmp	r3, #1
 800036e:	d104      	bne.n	800037a <uart_process_command+0x146>
			printf("LED1 ON\n");
 8000370:	4b18      	ldr	r3, [pc, #96]	@ (80003d4 <uart_process_command+0x1a0>)
 8000372:	0018      	movs	r0, r3
 8000374:	f002 ff58 	bl	8003228 <puts>
 8000378:	e003      	b.n	8000382 <uart_process_command+0x14e>
			printf("LED1 OFF\n");
 800037a:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <uart_process_command+0x1a4>)
 800037c:	0018      	movs	r0, r3
 800037e:	f002 ff53 	bl	8003228 <puts>
		if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) == 1)
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <uart_process_command+0x198>)
 8000384:	2101      	movs	r1, #1
 8000386:	0018      	movs	r0, r3
 8000388:	f001 f8f4 	bl	8001574 <HAL_GPIO_ReadPin>
 800038c:	0003      	movs	r3, r0
 800038e:	2b01      	cmp	r3, #1
 8000390:	d104      	bne.n	800039c <uart_process_command+0x168>
			printf("LED2 ON\n");
 8000392:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <uart_process_command+0x1a8>)
 8000394:	0018      	movs	r0, r3
 8000396:	f002 ff47 	bl	8003228 <puts>
}
 800039a:	e003      	b.n	80003a4 <uart_process_command+0x170>
			printf("LED2 OFF\n");
 800039c:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <uart_process_command+0x1ac>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 ff42 	bl	8003228 <puts>
}
 80003a4:	46c0      	nop			@ (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b004      	add	sp, #16
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	08004174 	.word	0x08004174
 80003b0:	08004178 	.word	0x08004178
 80003b4:	08004180 	.word	0x08004180
 80003b8:	08004194 	.word	0x08004194
 80003bc:	0800419c 	.word	0x0800419c
 80003c0:	080041a0 	.word	0x080041a0
 80003c4:	080041a4 	.word	0x080041a4
 80003c8:	080041a8 	.word	0x080041a8
 80003cc:	48000400 	.word	0x48000400
 80003d0:	080041b0 	.word	0x080041b0
 80003d4:	080041b8 	.word	0x080041b8
 80003d8:	080041c0 	.word	0x080041c0
 80003dc:	080041cc 	.word	0x080041cc
 80003e0:	080041d4 	.word	0x080041d4

080003e4 <_write>:

int _write(int file, char const *buf, int n)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	2301      	movs	r3, #1
 80003f6:	425b      	negs	r3, r3
 80003f8:	68b9      	ldr	r1, [r7, #8]
 80003fa:	4804      	ldr	r0, [pc, #16]	@ (800040c <_write+0x28>)
 80003fc:	f001 ffb2 	bl	8002364 <HAL_UART_Transmit>
	return n;
 8000400:	687b      	ldr	r3, [r7, #4]
}
 8000402:	0018      	movs	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	b004      	add	sp, #16
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	20000170 	.word	0x20000170

08000410 <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	0002      	movs	r2, r0
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 800041c:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <uart_byte_available+0x74>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	2bff      	cmp	r3, #255	@ 0xff
 8000422:	d812      	bhi.n	800044a <uart_byte_available+0x3a>
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b1f      	cmp	r3, #31
 800042a:	d90e      	bls.n	800044a <uart_byte_available+0x3a>
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b7e      	cmp	r3, #126	@ 0x7e
 8000432:	d80a      	bhi.n	800044a <uart_byte_available+0x3a>
 8000434:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <uart_byte_available+0x74>)
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	b291      	uxth	r1, r2
 800043c:	4a11      	ldr	r2, [pc, #68]	@ (8000484 <uart_byte_available+0x74>)
 800043e:	8011      	strh	r1, [r2, #0]
 8000440:	0019      	movs	r1, r3
 8000442:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <uart_byte_available+0x78>)
 8000444:	1dfa      	adds	r2, r7, #7
 8000446:	7812      	ldrb	r2, [r2, #0]
 8000448:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0)
 800044a:	1dfb      	adds	r3, r7, #7
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b0a      	cmp	r3, #10
 8000450:	d003      	beq.n	800045a <uart_byte_available+0x4a>
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b0d      	cmp	r3, #13
 8000458:	d110      	bne.n	800047c <uart_byte_available+0x6c>
 800045a:	4b0a      	ldr	r3, [pc, #40]	@ (8000484 <uart_byte_available+0x74>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d00c      	beq.n	800047c <uart_byte_available+0x6c>
	{
		data[cnt] = '\0';
 8000462:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <uart_byte_available+0x74>)
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	001a      	movs	r2, r3
 8000468:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <uart_byte_available+0x78>)
 800046a:	2100      	movs	r1, #0
 800046c:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <uart_byte_available+0x78>)
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff fedf 	bl	8000234 <uart_process_command>
		cnt = 0;
 8000476:	4b03      	ldr	r3, [pc, #12]	@ (8000484 <uart_byte_available+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	801a      	strh	r2, [r3, #0]
	}
}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000023c 	.word	0x2000023c
 8000488:	20000240 	.word	0x20000240

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000492:	f000 fc25 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000496:	f000 f83f 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049a:	f000 f96d 	bl	8000778 <MX_GPIO_Init>
  MX_DMA_Init();
 800049e:	f000 f94d 	bl	800073c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004a2:	f000 f91b 	bl	80006dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004a6:	f000 f899 	bl	80005dc <MX_I2C1_Init>
  MX_I2C2_Init();
 80004aa:	f000 f8d7 	bl	800065c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 80004ae:	4916      	ldr	r1, [pc, #88]	@ (8000508 <main+0x7c>)
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <main+0x80>)
 80004b2:	2240      	movs	r2, #64	@ 0x40
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fff4 	bl	80024a2 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (uart_rx_read_ptr != uart_rx_write_ptr)
 80004ba:	e019      	b.n	80004f0 <main+0x64>
	  {
		  uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 80004bc:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <main+0x84>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	0019      	movs	r1, r3
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	4a10      	ldr	r2, [pc, #64]	@ (8000508 <main+0x7c>)
 80004c8:	5c52      	ldrb	r2, [r2, r1]
 80004ca:	701a      	strb	r2, [r3, #0]
		  // increase read pointer
		  if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0;
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <main+0x84>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	3301      	adds	r3, #1
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <main+0x84>)
 80004d8:	1c19      	adds	r1, r3, #0
 80004da:	8011      	strh	r1, [r2, #0]
 80004dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80004de:	d902      	bls.n	80004e6 <main+0x5a>
 80004e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <main+0x84>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	801a      	strh	r2, [r3, #0]
		  // process every received byte with the RX state machine
		  uart_byte_available(b);
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	0018      	movs	r0, r3
 80004ec:	f7ff ff90 	bl	8000410 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr)
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <main+0x84>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	0019      	movs	r1, r3
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <main+0x88>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	2240      	movs	r2, #64	@ 0x40
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	4299      	cmp	r1, r3
 8000504:	d1da      	bne.n	80004bc <main+0x30>
 8000506:	e7f3      	b.n	80004f0 <main+0x64>
 8000508:	20000084 	.word	0x20000084
 800050c:	20000170 	.word	0x20000170
 8000510:	200000c4 	.word	0x200000c4
 8000514:	200001f8 	.word	0x200001f8

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b095      	sub	sp, #84	@ 0x54
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	2420      	movs	r4, #32
 8000520:	193b      	adds	r3, r7, r4
 8000522:	0018      	movs	r0, r3
 8000524:	2330      	movs	r3, #48	@ 0x30
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f002 ff73 	bl	8003414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052e:	2310      	movs	r3, #16
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	0018      	movs	r0, r3
 8000534:	2310      	movs	r3, #16
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f002 ff6b 	bl	8003414 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053e:	003b      	movs	r3, r7
 8000540:	0018      	movs	r0, r3
 8000542:	2310      	movs	r3, #16
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f002 ff64 	bl	8003414 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	0021      	movs	r1, r4
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2202      	movs	r2, #2
 8000552:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2201      	movs	r2, #1
 8000558:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2210      	movs	r2, #16
 800055e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2202      	movs	r2, #2
 8000564:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	22a0      	movs	r2, #160	@ 0xa0
 8000570:	0392      	lsls	r2, r2, #14
 8000572:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	187b      	adds	r3, r7, r1
 800057c:	0018      	movs	r0, r3
 800057e:	f001 f971 	bl	8001864 <HAL_RCC_OscConfig>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000586:	f000 f989 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	2110      	movs	r1, #16
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2207      	movs	r2, #7
 8000590:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2202      	movs	r2, #2
 8000596:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2101      	movs	r1, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fc75 	bl	8001e98 <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005b2:	f000 f973 	bl	800089c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2220      	movs	r2, #32
 80005ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fdab 	bl	8002120 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005ce:	f000 f965 	bl	800089c <Error_Handler>
  }
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b015      	add	sp, #84	@ 0x54
 80005d8:	bd90      	pop	{r4, r7, pc}
	...

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <MX_I2C1_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000654 <MX_I2C1_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_I2C1_Init+0x74>)
 80005e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000658 <MX_I2C1_Init+0x7c>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005ec:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f2:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_I2C1_Init+0x74>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_I2C1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_I2C1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_I2C1_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_I2C1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_I2C1_Init+0x74>)
 8000618:	0018      	movs	r0, r3
 800061a:	f000 ffe5 	bl	80015e8 <HAL_I2C_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000622:	f000 f93b 	bl	800089c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_I2C1_Init+0x74>)
 8000628:	2100      	movs	r1, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f001 f882 	bl	8001734 <HAL_I2CEx_ConfigAnalogFilter>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000634:	f000 f932 	bl	800089c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <MX_I2C1_Init+0x74>)
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f001 f8c5 	bl	80017cc <HAL_I2CEx_ConfigDigitalFilter>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000646:	f000 f929 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000c8 	.word	0x200000c8
 8000654:	40005400 	.word	0x40005400
 8000658:	00201d2b 	.word	0x00201d2b

0800065c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000660:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_I2C2_Init+0x74>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <MX_I2C2_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_I2C2_Init+0x74>)
 8000668:	4a1b      	ldr	r2, [pc, #108]	@ (80006d8 <MX_I2C2_Init+0x7c>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <MX_I2C2_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_I2C2_Init+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_I2C2_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_I2C2_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2C2_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_I2C2_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_I2C2_Init+0x74>)
 8000698:	0018      	movs	r0, r3
 800069a:	f000 ffa5 	bl	80015e8 <HAL_I2C_Init>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006a2:	f000 f8fb 	bl	800089c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a6:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <MX_I2C2_Init+0x74>)
 80006a8:	2100      	movs	r1, #0
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 f842 	bl	8001734 <HAL_I2CEx_ConfigAnalogFilter>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006b4:	f000 f8f2 	bl	800089c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <MX_I2C2_Init+0x74>)
 80006ba:	2100      	movs	r1, #0
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 f885 	bl	80017cc <HAL_I2CEx_ConfigDigitalFilter>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 f8e9 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000011c 	.word	0x2000011c
 80006d4:	40005800 	.word	0x40005800
 80006d8:	10805d88 	.word	0x10805d88

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <MX_USART2_UART_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006e8:	2296      	movs	r2, #150	@ 0x96
 80006ea:	0212      	lsls	r2, r2, #8
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <MX_USART2_UART_Init+0x58>)
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fdcb 	bl	80022bc <HAL_UART_Init>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f8b7 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000170 	.word	0x20000170
 8000738:	40004400 	.word	0x40004400

0800073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_DMA_Init+0x38>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_DMA_Init+0x38>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_DMA_Init+0x38>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	200b      	movs	r0, #11
 8000760:	f000 fbce 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000764:	200b      	movs	r0, #11
 8000766:	f000 fbe0 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b08b      	sub	sp, #44	@ 0x2c
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	2414      	movs	r4, #20
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 fe43 	bl	8003414 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <MX_GPIO_Init+0x118>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <MX_GPIO_Init+0x118>)
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	0309      	lsls	r1, r1, #12
 8000798:	430a      	orrs	r2, r1
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <MX_GPIO_Init+0x118>)
 800079e:	695a      	ldr	r2, [r3, #20]
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	031b      	lsls	r3, r3, #12
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b39      	ldr	r3, [pc, #228]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b38      	ldr	r3, [pc, #224]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	03c9      	lsls	r1, r1, #15
 80007b4:	430a      	orrs	r2, r1
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	03db      	lsls	r3, r3, #15
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b32      	ldr	r3, [pc, #200]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007cc:	2180      	movs	r1, #128	@ 0x80
 80007ce:	0289      	lsls	r1, r1, #10
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	029b      	lsls	r3, r3, #10
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007e4:	695a      	ldr	r2, [r3, #20]
 80007e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	02c9      	lsls	r1, r1, #11
 80007ec:	430a      	orrs	r2, r1
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <MX_GPIO_Init+0x118>)
 80007f2:	695a      	ldr	r2, [r3, #20]
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	02db      	lsls	r3, r3, #11
 80007f8:	4013      	ands	r3, r2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2390      	movs	r3, #144	@ 0x90
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	2200      	movs	r2, #0
 8000804:	2130      	movs	r1, #48	@ 0x30
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fed1 	bl	80015ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800080c:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_GPIO_Init+0x11c>)
 800080e:	2200      	movs	r2, #0
 8000810:	2101      	movs	r1, #1
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fecb 	bl	80015ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	0192      	lsls	r2, r2, #6
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2284      	movs	r2, #132	@ 0x84
 8000824:	0392      	lsls	r2, r2, #14
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082e:	193b      	adds	r3, r7, r4
 8000830:	4a19      	ldr	r2, [pc, #100]	@ (8000898 <MX_GPIO_Init+0x120>)
 8000832:	0019      	movs	r1, r3
 8000834:	0010      	movs	r0, r2
 8000836:	f000 fd2d 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2230      	movs	r2, #48	@ 0x30
 800083e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2201      	movs	r2, #1
 8000844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	193a      	adds	r2, r7, r4
 8000854:	2390      	movs	r3, #144	@ 0x90
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	0011      	movs	r1, r2
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fd1a 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000860:	0021      	movs	r1, r4
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2201      	movs	r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800087a:	187b      	adds	r3, r7, r1
 800087c:	4a05      	ldr	r2, [pc, #20]	@ (8000894 <MX_GPIO_Init+0x11c>)
 800087e:	0019      	movs	r1, r3
 8000880:	0010      	movs	r0, r2
 8000882:	f000 fd07 	bl	8001294 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b00b      	add	sp, #44	@ 0x2c
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400
 8000898:	48000800 	.word	0x48000800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_MspInit+0x44>)
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_MspInit+0x44>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	619a      	str	r2, [r3, #24]
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_MspInit+0x44>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_MspInit+0x44>)
 80008c8:	69da      	ldr	r2, [r3, #28]
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_MspInit+0x44>)
 80008cc:	2180      	movs	r1, #128	@ 0x80
 80008ce:	0549      	lsls	r1, r1, #21
 80008d0:	430a      	orrs	r2, r1
 80008d2:	61da      	str	r2, [r3, #28]
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <HAL_MspInit+0x44>)
 80008d6:	69da      	ldr	r2, [r3, #28]
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	055b      	lsls	r3, r3, #21
 80008dc:	4013      	ands	r3, r2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b08d      	sub	sp, #52	@ 0x34
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	241c      	movs	r4, #28
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	0018      	movs	r0, r3
 80008fe:	2314      	movs	r3, #20
 8000900:	001a      	movs	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	f002 fd86 	bl	8003414 <memset>
  if(hi2c->Instance==I2C1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a39      	ldr	r2, [pc, #228]	@ (80009f4 <HAL_I2C_MspInit+0x104>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d133      	bne.n	800097a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b39      	ldr	r3, [pc, #228]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 8000918:	2180      	movs	r1, #128	@ 0x80
 800091a:	02c9      	lsls	r1, r1, #11
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b35      	ldr	r3, [pc, #212]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	02db      	lsls	r3, r3, #11
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	22c0      	movs	r2, #192	@ 0xc0
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2212      	movs	r2, #18
 800093c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2203      	movs	r2, #3
 8000948:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2201      	movs	r2, #1
 800094e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	187b      	adds	r3, r7, r1
 8000952:	4a2a      	ldr	r2, [pc, #168]	@ (80009fc <HAL_I2C_MspInit+0x10c>)
 8000954:	0019      	movs	r1, r3
 8000956:	0010      	movs	r0, r2
 8000958:	f000 fc9c 	bl	8001294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 800095e:	69da      	ldr	r2, [r3, #28]
 8000960:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	0389      	lsls	r1, r1, #14
 8000966:	430a      	orrs	r2, r1
 8000968:	61da      	str	r2, [r3, #28]
 800096a:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 800096c:	69da      	ldr	r2, [r3, #28]
 800096e:	2380      	movs	r3, #128	@ 0x80
 8000970:	039b      	lsls	r3, r3, #14
 8000972:	4013      	ands	r3, r2
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000978:	e037      	b.n	80009ea <HAL_I2C_MspInit+0xfa>
  else if(hi2c->Instance==I2C2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a20      	ldr	r2, [pc, #128]	@ (8000a00 <HAL_I2C_MspInit+0x110>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d132      	bne.n	80009ea <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 800098a:	2180      	movs	r1, #128	@ 0x80
 800098c:	02c9      	lsls	r1, r1, #11
 800098e:	430a      	orrs	r2, r1
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	2380      	movs	r3, #128	@ 0x80
 8000998:	02db      	lsls	r3, r3, #11
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009a0:	211c      	movs	r1, #28
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	22c0      	movs	r2, #192	@ 0xc0
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2212      	movs	r2, #18
 80009ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2203      	movs	r2, #3
 80009ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2201      	movs	r2, #1
 80009c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <HAL_I2C_MspInit+0x10c>)
 80009c6:	0019      	movs	r1, r3
 80009c8:	0010      	movs	r0, r2
 80009ca:	f000 fc63 	bl	8001294 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 80009d0:	69da      	ldr	r2, [r3, #28]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 80009d4:	2180      	movs	r1, #128	@ 0x80
 80009d6:	03c9      	lsls	r1, r1, #15
 80009d8:	430a      	orrs	r2, r1
 80009da:	61da      	str	r2, [r3, #28]
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_I2C_MspInit+0x108>)
 80009de:	69da      	ldr	r2, [r3, #28]
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	03db      	lsls	r3, r3, #15
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b00d      	add	sp, #52	@ 0x34
 80009f0:	bd90      	pop	{r4, r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000400 	.word	0x48000400
 8000a00:	40005800 	.word	0x40005800

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08b      	sub	sp, #44	@ 0x2c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	2414      	movs	r4, #20
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f002 fcfc 	bl	8003414 <memset>
  if(huart->Instance==USART2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae0 <HAL_UART_MspInit+0xdc>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d158      	bne.n	8000ad8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <HAL_UART_MspInit+0xe0>)
 8000a28:	69da      	ldr	r2, [r3, #28]
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <HAL_UART_MspInit+0xe0>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	0289      	lsls	r1, r1, #10
 8000a30:	430a      	orrs	r2, r1
 8000a32:	61da      	str	r2, [r3, #28]
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <HAL_UART_MspInit+0xe0>)
 8000a36:	69da      	ldr	r2, [r3, #28]
 8000a38:	2380      	movs	r3, #128	@ 0x80
 8000a3a:	029b      	lsls	r3, r3, #10
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <HAL_UART_MspInit+0xe0>)
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <HAL_UART_MspInit+0xe0>)
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	0289      	lsls	r1, r1, #10
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <HAL_UART_MspInit+0xe0>)
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	029b      	lsls	r3, r3, #10
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5e:	0021      	movs	r1, r4
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2202      	movs	r2, #2
 8000a6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	187a      	adds	r2, r7, r1
 8000a80:	2390      	movs	r3, #144	@ 0x90
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 fc04 	bl	8001294 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a8e:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_UART_MspInit+0xe8>)
 8000a90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000abc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 fa50 	bl	8000f64 <HAL_DMA_Init>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000ac8:	f7ff fee8 	bl	800089c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a06      	ldr	r2, [pc, #24]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000ad0:	675a      	str	r2, [r3, #116]	@ 0x74
 8000ad2:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b00b      	add	sp, #44	@ 0x2c
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	40004400 	.word	0x40004400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	200001f8 	.word	0x200001f8
 8000aec:	40020058 	.word	0x40020058

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	46c0      	nop			@ (mov r8, r8)
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f92a 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fac8 	bl	80010c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	200001f8 	.word	0x200001f8

08000b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  return 1;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_kill>:

int _kill(int pid, int sig)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b52:	f002 fd2f 	bl	80035b4 <__errno>
 8000b56:	0003      	movs	r3, r0
 8000b58:	2216      	movs	r2, #22
 8000b5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_exit>:

void _exit (int status)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b70:	2301      	movs	r3, #1
 8000b72:	425a      	negs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ffe5 	bl	8000b48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	e7fd      	b.n	8000b7e <_exit+0x16>

08000b82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e00a      	b.n	8000baa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b94:	e000      	b.n	8000b98 <_read+0x16>
 8000b96:	bf00      	nop
 8000b98:	0001      	movs	r1, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	60ba      	str	r2, [r7, #8]
 8000ba0:	b2ca      	uxtb	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dbf0      	blt.n	8000b94 <_read+0x12>
  }

  return len;
 8000bb2:	687b      	ldr	r3, [r7, #4]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b006      	add	sp, #24
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	425b      	negs	r3, r3
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	0192      	lsls	r2, r2, #6
 8000be0:	605a      	str	r2, [r3, #4]
  return 0;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_isatty>:

int _isatty(int file)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b004      	add	sp, #16
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f002 fcb6 	bl	80035b4 <__errno>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	18d2      	adds	r2, r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <_sbrk+0x64>)
 8000c64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b006      	add	sp, #24
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20002000 	.word	0x20002000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000340 	.word	0x20000340
 8000c7c:	20000498 	.word	0x20000498

08000c80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c8c:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c90:	f7ff fff6 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cba:	f002 fc81 	bl	80035c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cbe:	f7ff fbe5 	bl	800048c <main>

08000cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   r0, =_estack
 8000cc4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cd0:	08004404 	.word	0x08004404
  ldr r2, =_sbss
 8000cd4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cd8:	20000494 	.word	0x20000494

08000cdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <HAL_Init+0x24>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_Init+0x24>)
 8000cea:	2110      	movs	r1, #16
 8000cec:	430a      	orrs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 f809 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf6:	f7ff fdd7 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <HAL_InitTick+0x5c>)
 8000d12:	681c      	ldr	r4, [r3, #0]
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	0019      	movs	r1, r3
 8000d1a:	23fa      	movs	r3, #250	@ 0xfa
 8000d1c:	0098      	lsls	r0, r3, #2
 8000d1e:	f7ff f9fd 	bl	800011c <__udivsi3>
 8000d22:	0003      	movs	r3, r0
 8000d24:	0019      	movs	r1, r3
 8000d26:	0020      	movs	r0, r4
 8000d28:	f7ff f9f8 	bl	800011c <__udivsi3>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f90b 	bl	8000f4a <HAL_SYSTICK_Config>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e00f      	b.n	8000d5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d80b      	bhi.n	8000d5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f8d8 	bl	8000f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_InitTick+0x64>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b003      	add	sp, #12
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000344 	.word	0x20000344

08000d94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	@ (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	20000344 	.word	0x20000344

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dba:	d809      	bhi.n	8000dd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_EnableIRQ+0x30>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	000a      	movs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
  }
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	0002      	movs	r2, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000df0:	d828      	bhi.n	8000e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df2:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	33c0      	adds	r3, #192	@ 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	589b      	ldr	r3, [r3, r2]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	@ 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	@ 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	481f      	ldr	r0, [pc, #124]	@ (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	33c0      	adds	r3, #192	@ 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e42:	e031      	b.n	8000ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	400b      	ands	r3, r1
 8000e50:	3b08      	subs	r3, #8
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3306      	adds	r3, #6
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	@ 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	@ 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001c      	movs	r4, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	4023      	ands	r3, r4
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	3306      	adds	r3, #6
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	18c3      	adds	r3, r0, r3
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	045b      	lsls	r3, r3, #17
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d301      	bcc.n	8000ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e010      	b.n	8000ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <SysTick_Config+0x44>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	3a01      	subs	r2, #1
 8000ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2103      	movs	r1, #3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff ff7c 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <SysTick_Config+0x44>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <SysTick_Config+0x44>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	0002      	movs	r2, r0
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ffaf 	bl	8000eb8 <SysTick_Config>
 8000f5a:	0003      	movs	r3, r0
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e036      	b.n	8000fe8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2221      	movs	r2, #33	@ 0x21
 8000f7e:	2102      	movs	r1, #2
 8000f80:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <HAL_DMA_Init+0x8c>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 f946 	bl	800125c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2221      	movs	r2, #33	@ 0x21
 8000fda:	2101      	movs	r1, #1
 8000fdc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b004      	add	sp, #16
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	ffffc00f 	.word	0xffffc00f

08000ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2317      	movs	r3, #23
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2220      	movs	r2, #32
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_DMA_Start_IT+0x24>
 8001014:	2302      	movs	r3, #2
 8001016:	e04f      	b.n	80010b8 <HAL_DMA_Start_IT+0xc4>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2220      	movs	r2, #32
 800101c:	2101      	movs	r1, #1
 800101e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2221      	movs	r2, #33	@ 0x21
 8001024:	5c9b      	ldrb	r3, [r3, r2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d13a      	bne.n	80010a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2221      	movs	r2, #33	@ 0x21
 8001030:	2102      	movs	r1, #2
 8001032:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	438a      	bics	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f8d7 	bl	8001204 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	210e      	movs	r1, #14
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e00f      	b.n	8001090 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	210a      	movs	r1, #10
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2104      	movs	r1, #4
 800108c:	438a      	bics	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2101      	movs	r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010aa:	2317      	movs	r3, #23
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80010b2:	2317      	movs	r3, #23
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	781b      	ldrb	r3, [r3, #0]
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b006      	add	sp, #24
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	2204      	movs	r2, #4
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4013      	ands	r3, r2
 80010e6:	d024      	beq.n	8001132 <HAL_DMA_IRQHandler+0x72>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2204      	movs	r2, #4
 80010ec:	4013      	ands	r3, r2
 80010ee:	d020      	beq.n	8001132 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2220      	movs	r2, #32
 80010f8:	4013      	ands	r3, r2
 80010fa:	d107      	bne.n	800110c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2104      	movs	r1, #4
 8001108:	438a      	bics	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001114:	2104      	movs	r1, #4
 8001116:	4091      	lsls	r1, r2
 8001118:	000a      	movs	r2, r1
 800111a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001120:	2b00      	cmp	r3, #0
 8001122:	d100      	bne.n	8001126 <HAL_DMA_IRQHandler+0x66>
 8001124:	e06a      	b.n	80011fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	0010      	movs	r0, r2
 800112e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001130:	e064      	b.n	80011fc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	2202      	movs	r2, #2
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	d02b      	beq.n	800119a <HAL_DMA_IRQHandler+0xda>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d027      	beq.n	800119a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2220      	movs	r2, #32
 8001152:	4013      	ands	r3, r2
 8001154:	d10b      	bne.n	800116e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	210a      	movs	r1, #10
 8001162:	438a      	bics	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2221      	movs	r2, #33	@ 0x21
 800116a:	2101      	movs	r1, #1
 800116c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001176:	2102      	movs	r1, #2
 8001178:	4091      	lsls	r1, r2
 800117a:	000a      	movs	r2, r1
 800117c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2220      	movs	r2, #32
 8001182:	2100      	movs	r1, #0
 8001184:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118a:	2b00      	cmp	r3, #0
 800118c:	d036      	beq.n	80011fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	0010      	movs	r0, r2
 8001196:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001198:	e030      	b.n	80011fc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	2208      	movs	r2, #8
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	d028      	beq.n	80011fc <HAL_DMA_IRQHandler+0x13c>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2208      	movs	r2, #8
 80011ae:	4013      	ands	r3, r2
 80011b0:	d024      	beq.n	80011fc <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	210e      	movs	r1, #14
 80011be:	438a      	bics	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ca:	2101      	movs	r1, #1
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2221      	movs	r2, #33	@ 0x21
 80011dc:	2101      	movs	r1, #1
 80011de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	0010      	movs	r0, r2
 80011f8:	4798      	blx	r3
    }
  }
}
 80011fa:	e7ff      	b.n	80011fc <HAL_DMA_IRQHandler+0x13c>
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}

08001204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800121a:	2101      	movs	r1, #1
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d108      	bne.n	8001244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001242:	e007      	b.n	8001254 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b004      	add	sp, #16
 800125a:	bd80      	pop	{r7, pc}

0800125c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a08      	ldr	r2, [pc, #32]	@ (800128c <DMA_CalcBaseAndBitshift+0x30>)
 800126a:	4694      	mov	ip, r2
 800126c:	4463      	add	r3, ip
 800126e:	2114      	movs	r1, #20
 8001270:	0018      	movs	r0, r3
 8001272:	f7fe ff53 	bl	800011c <__udivsi3>
 8001276:	0003      	movs	r3, r0
 8001278:	009a      	lsls	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a03      	ldr	r2, [pc, #12]	@ (8001290 <DMA_CalcBaseAndBitshift+0x34>)
 8001282:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}
 800128c:	bffdfff8 	.word	0xbffdfff8
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e14f      	b.n	8001544 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2101      	movs	r1, #1
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4091      	lsls	r1, r2
 80012ae:	000a      	movs	r2, r1
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d100      	bne.n	80012bc <HAL_GPIO_Init+0x28>
 80012ba:	e140      	b.n	800153e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2203      	movs	r2, #3
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d005      	beq.n	80012d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	43da      	mvns	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	2201      	movs	r2, #1
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2203      	movs	r2, #3
 800133c:	4013      	ands	r3, r2
 800133e:	2b03      	cmp	r3, #3
 8001340:	d017      	beq.n	8001372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2203      	movs	r2, #3
 8001378:	4013      	ands	r3, r2
 800137a:	2b02      	cmp	r3, #2
 800137c:	d123      	bne.n	80013c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	58d3      	ldr	r3, [r2, r3]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2207      	movs	r2, #7
 8001390:	4013      	ands	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	691a      	ldr	r2, [r3, #16]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2107      	movs	r1, #7
 80013aa:	400b      	ands	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	6939      	ldr	r1, [r7, #16]
 80013c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2203      	movs	r2, #3
 80013e4:	401a      	ands	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	23c0      	movs	r3, #192	@ 0xc0
 8001400:	029b      	lsls	r3, r3, #10
 8001402:	4013      	ands	r3, r2
 8001404:	d100      	bne.n	8001408 <HAL_GPIO_Init+0x174>
 8001406:	e09a      	b.n	800153e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001408:	4b54      	ldr	r3, [pc, #336]	@ (800155c <HAL_GPIO_Init+0x2c8>)
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	4b53      	ldr	r3, [pc, #332]	@ (800155c <HAL_GPIO_Init+0x2c8>)
 800140e:	2101      	movs	r1, #1
 8001410:	430a      	orrs	r2, r1
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	4b51      	ldr	r3, [pc, #324]	@ (800155c <HAL_GPIO_Init+0x2c8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001420:	4a4f      	ldr	r2, [pc, #316]	@ (8001560 <HAL_GPIO_Init+0x2cc>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	589b      	ldr	r3, [r3, r2]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2203      	movs	r2, #3
 8001432:	4013      	ands	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	409a      	lsls	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	43da      	mvns	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	2390      	movs	r3, #144	@ 0x90
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	429a      	cmp	r2, r3
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x1e2>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a44      	ldr	r2, [pc, #272]	@ (8001564 <HAL_GPIO_Init+0x2d0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00d      	beq.n	8001472 <HAL_GPIO_Init+0x1de>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a43      	ldr	r2, [pc, #268]	@ (8001568 <HAL_GPIO_Init+0x2d4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x1da>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a42      	ldr	r2, [pc, #264]	@ (800156c <HAL_GPIO_Init+0x2d8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_GPIO_Init+0x1d6>
 8001466:	2303      	movs	r3, #3
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x1e4>
 800146a:	2305      	movs	r3, #5
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x1e4>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x1e4>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x1e4>
 8001476:	2300      	movs	r3, #0
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	2103      	movs	r1, #3
 800147c:	400a      	ands	r2, r1
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4093      	lsls	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001488:	4935      	ldr	r1, [pc, #212]	@ (8001560 <HAL_GPIO_Init+0x2cc>)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001496:	4b36      	ldr	r3, [pc, #216]	@ (8001570 <HAL_GPIO_Init+0x2dc>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	2380      	movs	r3, #128	@ 0x80
 80014ac:	035b      	lsls	r3, r3, #13
 80014ae:	4013      	ands	r3, r2
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <HAL_GPIO_Init+0x2dc>)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <HAL_GPIO_Init+0x2dc>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	039b      	lsls	r3, r3, #14
 80014d8:	4013      	ands	r3, r2
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014e4:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <HAL_GPIO_Init+0x2dc>)
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014ea:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <HAL_GPIO_Init+0x2dc>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43da      	mvns	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	029b      	lsls	r3, r3, #10
 8001502:	4013      	ands	r3, r2
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_GPIO_Init+0x2dc>)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_GPIO_Init+0x2dc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43da      	mvns	r2, r3
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	2380      	movs	r3, #128	@ 0x80
 800152a:	025b      	lsls	r3, r3, #9
 800152c:	4013      	ands	r3, r2
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001538:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <HAL_GPIO_Init+0x2dc>)
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	40da      	lsrs	r2, r3
 800154c:	1e13      	subs	r3, r2, #0
 800154e:	d000      	beq.n	8001552 <HAL_GPIO_Init+0x2be>
 8001550:	e6a8      	b.n	80012a4 <HAL_GPIO_Init+0x10>
  } 
}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	46c0      	nop			@ (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b006      	add	sp, #24
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	48000400 	.word	0x48000400
 8001568:	48000800 	.word	0x48000800
 800156c:	48000c00 	.word	0x48000c00
 8001570:	40010400 	.word	0x40010400

08001574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	000a      	movs	r2, r1
 800157e:	1cbb      	adds	r3, r7, #2
 8001580:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	1cba      	adds	r2, r7, #2
 8001588:	8812      	ldrh	r2, [r2, #0]
 800158a:	4013      	ands	r3, r2
 800158c:	d004      	beq.n	8001598 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e003      	b.n	80015a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001598:	230f      	movs	r3, #15
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015a0:	230f      	movs	r3, #15
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	781b      	ldrb	r3, [r3, #0]
  }
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	0008      	movs	r0, r1
 80015b8:	0011      	movs	r1, r2
 80015ba:	1cbb      	adds	r3, r7, #2
 80015bc:	1c02      	adds	r2, r0, #0
 80015be:	801a      	strh	r2, [r3, #0]
 80015c0:	1c7b      	adds	r3, r7, #1
 80015c2:	1c0a      	adds	r2, r1, #0
 80015c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c6:	1c7b      	adds	r3, r7, #1
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ce:	1cbb      	adds	r3, r7, #2
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015d6:	e003      	b.n	80015e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015d8:	1cbb      	adds	r3, r7, #2
 80015da:	881a      	ldrh	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e08f      	b.n	800171a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2241      	movs	r2, #65	@ 0x41
 80015fe:	5c9b      	ldrb	r3, [r3, r2]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2240      	movs	r2, #64	@ 0x40
 800160a:	2100      	movs	r1, #0
 800160c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff f96d 	bl	80008f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2241      	movs	r2, #65	@ 0x41
 800161a:	2124      	movs	r1, #36	@ 0x24
 800161c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	438a      	bics	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	493b      	ldr	r1, [pc, #236]	@ (8001724 <HAL_I2C_Init+0x13c>)
 8001638:	400a      	ands	r2, r1
 800163a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4938      	ldr	r1, [pc, #224]	@ (8001728 <HAL_I2C_Init+0x140>)
 8001648:	400a      	ands	r2, r1
 800164a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2180      	movs	r1, #128	@ 0x80
 800165e:	0209      	lsls	r1, r1, #8
 8001660:	430a      	orrs	r2, r1
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	e007      	b.n	8001676 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2184      	movs	r1, #132	@ 0x84
 8001670:	0209      	lsls	r1, r1, #8
 8001672:	430a      	orrs	r2, r1
 8001674:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d109      	bne.n	8001692 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2180      	movs	r1, #128	@ 0x80
 800168a:	0109      	lsls	r1, r1, #4
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	e007      	b.n	80016a2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4923      	ldr	r1, [pc, #140]	@ (800172c <HAL_I2C_Init+0x144>)
 800169e:	400a      	ands	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4920      	ldr	r1, [pc, #128]	@ (8001730 <HAL_I2C_Init+0x148>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	491a      	ldr	r1, [pc, #104]	@ (8001728 <HAL_I2C_Init+0x140>)
 80016be:	400a      	ands	r2, r1
 80016c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69d9      	ldr	r1, [r3, #28]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1a      	ldr	r2, [r3, #32]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2101      	movs	r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2241      	movs	r2, #65	@ 0x41
 8001706:	2120      	movs	r1, #32
 8001708:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2242      	movs	r2, #66	@ 0x42
 8001714:	2100      	movs	r1, #0
 8001716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	f0ffffff 	.word	0xf0ffffff
 8001728:	ffff7fff 	.word	0xffff7fff
 800172c:	fffff7ff 	.word	0xfffff7ff
 8001730:	02008000 	.word	0x02008000

08001734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2241      	movs	r2, #65	@ 0x41
 8001742:	5c9b      	ldrb	r3, [r3, r2]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b20      	cmp	r3, #32
 8001748:	d138      	bne.n	80017bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2240      	movs	r2, #64	@ 0x40
 800174e:	5c9b      	ldrb	r3, [r3, r2]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001754:	2302      	movs	r3, #2
 8001756:	e032      	b.n	80017be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2240      	movs	r2, #64	@ 0x40
 800175c:	2101      	movs	r1, #1
 800175e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2241      	movs	r2, #65	@ 0x41
 8001764:	2124      	movs	r1, #36	@ 0x24
 8001766:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2101      	movs	r1, #1
 8001774:	438a      	bics	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4911      	ldr	r1, [pc, #68]	@ (80017c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001784:	400a      	ands	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2241      	movs	r2, #65	@ 0x41
 80017ac:	2120      	movs	r1, #32
 80017ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2240      	movs	r2, #64	@ 0x40
 80017b4:	2100      	movs	r1, #0
 80017b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e000      	b.n	80017be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017bc:	2302      	movs	r3, #2
  }
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	ffffefff 	.word	0xffffefff

080017cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2241      	movs	r2, #65	@ 0x41
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b20      	cmp	r3, #32
 80017e0:	d139      	bne.n	8001856 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2240      	movs	r2, #64	@ 0x40
 80017e6:	5c9b      	ldrb	r3, [r3, r2]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e033      	b.n	8001858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2240      	movs	r2, #64	@ 0x40
 80017f4:	2101      	movs	r1, #1
 80017f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2241      	movs	r2, #65	@ 0x41
 80017fc:	2124      	movs	r1, #36	@ 0x24
 80017fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2101      	movs	r1, #1
 800180c:	438a      	bics	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a11      	ldr	r2, [pc, #68]	@ (8001860 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2241      	movs	r2, #65	@ 0x41
 8001846:	2120      	movs	r1, #32
 8001848:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2240      	movs	r2, #64	@ 0x40
 800184e:	2100      	movs	r1, #0
 8001850:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001856:	2302      	movs	r3, #2
  }
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b004      	add	sp, #16
 800185e:	bd80      	pop	{r7, pc}
 8001860:	fffff0ff 	.word	0xfffff0ff

08001864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e301      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2201      	movs	r2, #1
 800187c:	4013      	ands	r3, r2
 800187e:	d100      	bne.n	8001882 <HAL_RCC_OscConfig+0x1e>
 8001880:	e08d      	b.n	800199e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001882:	4bc3      	ldr	r3, [pc, #780]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	220c      	movs	r2, #12
 8001888:	4013      	ands	r3, r2
 800188a:	2b04      	cmp	r3, #4
 800188c:	d00e      	beq.n	80018ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188e:	4bc0      	ldr	r3, [pc, #768]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	220c      	movs	r2, #12
 8001894:	4013      	ands	r3, r2
 8001896:	2b08      	cmp	r3, #8
 8001898:	d116      	bne.n	80018c8 <HAL_RCC_OscConfig+0x64>
 800189a:	4bbd      	ldr	r3, [pc, #756]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	401a      	ands	r2, r3
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d10d      	bne.n	80018c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4bb8      	ldr	r3, [pc, #736]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	029b      	lsls	r3, r3, #10
 80018b4:	4013      	ands	r3, r2
 80018b6:	d100      	bne.n	80018ba <HAL_RCC_OscConfig+0x56>
 80018b8:	e070      	b.n	800199c <HAL_RCC_OscConfig+0x138>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d000      	beq.n	80018c4 <HAL_RCC_OscConfig+0x60>
 80018c2:	e06b      	b.n	800199c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e2d8      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x7c>
 80018d0:	4baf      	ldr	r3, [pc, #700]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4bae      	ldr	r3, [pc, #696]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	2180      	movs	r1, #128	@ 0x80
 80018d8:	0249      	lsls	r1, r1, #9
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e02f      	b.n	8001940 <HAL_RCC_OscConfig+0xdc>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x9e>
 80018e8:	4ba9      	ldr	r3, [pc, #676]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4ba8      	ldr	r3, [pc, #672]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80018ee:	49a9      	ldr	r1, [pc, #676]	@ (8001b94 <HAL_RCC_OscConfig+0x330>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	4ba6      	ldr	r3, [pc, #664]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4ba5      	ldr	r3, [pc, #660]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	49a7      	ldr	r1, [pc, #668]	@ (8001b98 <HAL_RCC_OscConfig+0x334>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e01e      	b.n	8001940 <HAL_RCC_OscConfig+0xdc>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d10e      	bne.n	8001928 <HAL_RCC_OscConfig+0xc4>
 800190a:	4ba1      	ldr	r3, [pc, #644]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4ba0      	ldr	r3, [pc, #640]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001910:	2180      	movs	r1, #128	@ 0x80
 8001912:	02c9      	lsls	r1, r1, #11
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	4b9d      	ldr	r3, [pc, #628]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b9c      	ldr	r3, [pc, #624]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 800191e:	2180      	movs	r1, #128	@ 0x80
 8001920:	0249      	lsls	r1, r1, #9
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xdc>
 8001928:	4b99      	ldr	r3, [pc, #612]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b98      	ldr	r3, [pc, #608]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 800192e:	4999      	ldr	r1, [pc, #612]	@ (8001b94 <HAL_RCC_OscConfig+0x330>)
 8001930:	400a      	ands	r2, r1
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	4b96      	ldr	r3, [pc, #600]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b95      	ldr	r3, [pc, #596]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 800193a:	4997      	ldr	r1, [pc, #604]	@ (8001b98 <HAL_RCC_OscConfig+0x334>)
 800193c:	400a      	ands	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d014      	beq.n	8001972 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fa24 	bl	8000d94 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001952:	f7ff fa1f 	bl	8000d94 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	@ 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e28a      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001964:	4b8a      	ldr	r3, [pc, #552]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0xee>
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff fa0f 	bl	8000d94 <HAL_GetTick>
 8001976:	0003      	movs	r3, r0
 8001978:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fa0a 	bl	8000d94 <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	@ 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e275      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	4b80      	ldr	r3, [pc, #512]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	2380      	movs	r3, #128	@ 0x80
 8001994:	029b      	lsls	r3, r3, #10
 8001996:	4013      	ands	r3, r2
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x118>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_OscConfig+0x146>
 80019a8:	e069      	b.n	8001a7e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019aa:	4b79      	ldr	r3, [pc, #484]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	220c      	movs	r2, #12
 80019b0:	4013      	ands	r3, r2
 80019b2:	d00b      	beq.n	80019cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b4:	4b76      	ldr	r3, [pc, #472]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	220c      	movs	r2, #12
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d11c      	bne.n	80019fa <HAL_RCC_OscConfig+0x196>
 80019c0:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	4013      	ands	r3, r2
 80019ca:	d116      	bne.n	80019fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019cc:	4b70      	ldr	r3, [pc, #448]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e24b      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	22f8      	movs	r2, #248	@ 0xf8
 80019e8:	4393      	bics	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	00da      	lsls	r2, r3, #3
 80019f2:	4b67      	ldr	r3, [pc, #412]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f8:	e041      	b.n	8001a7e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d024      	beq.n	8001a4c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a02:	4b63      	ldr	r3, [pc, #396]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b62      	ldr	r3, [pc, #392]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a08:	2101      	movs	r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f9c1 	bl	8000d94 <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a18:	f7ff f9bc 	bl	8000d94 <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e227      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d0f1      	beq.n	8001a18 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b56      	ldr	r3, [pc, #344]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	22f8      	movs	r2, #248	@ 0xf8
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00da      	lsls	r2, r3, #3
 8001a44:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e018      	b.n	8001a7e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4c:	4b50      	ldr	r3, [pc, #320]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b4f      	ldr	r3, [pc, #316]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	438a      	bics	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f99c 	bl	8000d94 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f997 	bl	8000d94 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e202      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a74:	4b46      	ldr	r3, [pc, #280]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d1f1      	bne.n	8001a62 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2208      	movs	r2, #8
 8001a84:	4013      	ands	r3, r2
 8001a86:	d036      	beq.n	8001af6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d019      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a90:	4b3f      	ldr	r3, [pc, #252]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a94:	4b3e      	ldr	r3, [pc, #248]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f97a 	bl	8000d94 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f975 	bl	8000d94 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1e0      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab8:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	2202      	movs	r2, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d0f1      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x242>
 8001ac2:	e018      	b.n	8001af6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac4:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ac8:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	438a      	bics	r2, r1
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f960 	bl	8000d94 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ada:	f7ff f95b 	bl	8000d94 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1c6      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	2202      	movs	r2, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d1f1      	bne.n	8001ada <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_OscConfig+0x29e>
 8001b00:	e0b4      	b.n	8001c6c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	201f      	movs	r0, #31
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	055b      	lsls	r3, r3, #21
 8001b12:	4013      	ands	r3, r2
 8001b14:	d110      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	0549      	lsls	r1, r1, #21
 8001b20:	430a      	orrs	r2, r1
 8001b22:	61da      	str	r2, [r3, #28]
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	055b      	lsls	r3, r3, #21
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_RCC_OscConfig+0x338>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	d11a      	bne.n	8001b7a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_RCC_OscConfig+0x338>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <HAL_RCC_OscConfig+0x338>)
 8001b4a:	2180      	movs	r1, #128	@ 0x80
 8001b4c:	0049      	lsls	r1, r1, #1
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b52:	f7ff f91f 	bl	8000d94 <HAL_GetTick>
 8001b56:	0003      	movs	r3, r0
 8001b58:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7ff f91a 	bl	8000d94 <HAL_GetTick>
 8001b60:	0002      	movs	r2, r0
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e185      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_OscConfig+0x338>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d10e      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x33c>
 8001b82:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	6a1a      	ldr	r2, [r3, #32]
 8001b86:	4b02      	ldr	r3, [pc, #8]	@ (8001b90 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	621a      	str	r2, [r3, #32]
 8001b8e:	e035      	b.n	8001bfc <HAL_RCC_OscConfig+0x398>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	fffeffff 	.word	0xfffeffff
 8001b98:	fffbffff 	.word	0xfffbffff
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x35e>
 8001ba8:	4bb6      	ldr	r3, [pc, #728]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001baa:	6a1a      	ldr	r2, [r3, #32]
 8001bac:	4bb5      	ldr	r3, [pc, #724]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	438a      	bics	r2, r1
 8001bb2:	621a      	str	r2, [r3, #32]
 8001bb4:	4bb3      	ldr	r3, [pc, #716]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	4bb2      	ldr	r3, [pc, #712]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bba:	2104      	movs	r1, #4
 8001bbc:	438a      	bics	r2, r1
 8001bbe:	621a      	str	r2, [r3, #32]
 8001bc0:	e01c      	b.n	8001bfc <HAL_RCC_OscConfig+0x398>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x380>
 8001bca:	4bae      	ldr	r3, [pc, #696]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bcc:	6a1a      	ldr	r2, [r3, #32]
 8001bce:	4bad      	ldr	r3, [pc, #692]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	621a      	str	r2, [r3, #32]
 8001bd6:	4bab      	ldr	r3, [pc, #684]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	4baa      	ldr	r3, [pc, #680]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bdc:	2101      	movs	r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	621a      	str	r2, [r3, #32]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0x398>
 8001be4:	4ba7      	ldr	r3, [pc, #668]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001be6:	6a1a      	ldr	r2, [r3, #32]
 8001be8:	4ba6      	ldr	r3, [pc, #664]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	621a      	str	r2, [r3, #32]
 8001bf0:	4ba4      	ldr	r3, [pc, #656]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	6a1a      	ldr	r2, [r3, #32]
 8001bf4:	4ba3      	ldr	r3, [pc, #652]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d014      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff f8c6 	bl	8000d94 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7ff f8c1 	bl	8000d94 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4a9b      	ldr	r2, [pc, #620]	@ (8001e88 <HAL_RCC_OscConfig+0x624>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e12b      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c22:	4b98      	ldr	r3, [pc, #608]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
 8001c2c:	e013      	b.n	8001c56 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8b1 	bl	8000d94 <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c36:	e009      	b.n	8001c4c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7ff f8ac 	bl	8000d94 <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4a91      	ldr	r2, [pc, #580]	@ (8001e88 <HAL_RCC_OscConfig+0x624>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e116      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c56:	231f      	movs	r3, #31
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4b88      	ldr	r3, [pc, #544]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	4b87      	ldr	r3, [pc, #540]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001c66:	4989      	ldr	r1, [pc, #548]	@ (8001e8c <HAL_RCC_OscConfig+0x628>)
 8001c68:	400a      	ands	r2, r1
 8001c6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2210      	movs	r2, #16
 8001c72:	4013      	ands	r3, r2
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d12a      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c7e:	4b81      	ldr	r3, [pc, #516]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c82:	4b80      	ldr	r3, [pc, #512]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001c84:	2104      	movs	r1, #4
 8001c86:	430a      	orrs	r2, r1
 8001c88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c8a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff f87d 	bl	8000d94 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ca0:	f7ff f878 	bl	8000d94 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e0e3      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cb2:	4b74      	ldr	r3, [pc, #464]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0f1      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cbc:	4b71      	ldr	r3, [pc, #452]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	22f8      	movs	r2, #248	@ 0xf8
 8001cc2:	4393      	bics	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	00da      	lsls	r2, r3, #3
 8001ccc:	4b6d      	ldr	r3, [pc, #436]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cd2:	e034      	b.n	8001d3e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	3305      	adds	r3, #5
 8001cda:	d111      	bne.n	8001d00 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cdc:	4b69      	ldr	r3, [pc, #420]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ce0:	4b68      	ldr	r3, [pc, #416]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ce8:	4b66      	ldr	r3, [pc, #408]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cec:	22f8      	movs	r2, #248	@ 0xf8
 8001cee:	4393      	bics	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	00da      	lsls	r2, r3, #3
 8001cf8:	4b62      	ldr	r3, [pc, #392]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cfe:	e01e      	b.n	8001d3e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d00:	4b60      	ldr	r3, [pc, #384]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d04:	4b5f      	ldr	r3, [pc, #380]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d06:	2104      	movs	r1, #4
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d10:	4b5c      	ldr	r3, [pc, #368]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	438a      	bics	r2, r1
 8001d16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff f83c 	bl	8000d94 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d22:	f7ff f837 	bl	8000d94 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0a2      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d34:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d1f1      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d100      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4e4>
 8001d46:	e097      	b.n	8001e78 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d48:	4b4e      	ldr	r3, [pc, #312]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	220c      	movs	r2, #12
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4f2>
 8001d54:	e06b      	b.n	8001e2e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d14c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b49      	ldr	r3, [pc, #292]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b48      	ldr	r3, [pc, #288]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d64:	494a      	ldr	r1, [pc, #296]	@ (8001e90 <HAL_RCC_OscConfig+0x62c>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f813 	bl	8000d94 <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f80e 	bl	8000d94 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e079      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	4b3f      	ldr	r3, [pc, #252]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	049b      	lsls	r3, r3, #18
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d92:	4b3c      	ldr	r3, [pc, #240]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	220f      	movs	r2, #15
 8001d98:	4393      	bics	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da0:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001da6:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a3a      	ldr	r2, [pc, #232]	@ (8001e94 <HAL_RCC_OscConfig+0x630>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	431a      	orrs	r2, r3
 8001dba:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b30      	ldr	r3, [pc, #192]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	0449      	lsls	r1, r1, #17
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7fe ffe1 	bl	8000d94 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe ffdc 	bl	8000d94 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e047      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dea:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	049b      	lsls	r3, r3, #18
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x574>
 8001df6:	e03f      	b.n	8001e78 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001dfe:	4924      	ldr	r1, [pc, #144]	@ (8001e90 <HAL_RCC_OscConfig+0x62c>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe ffc6 	bl	8000d94 <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe ffc1 	bl	8000d94 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e02c      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	049b      	lsls	r3, r3, #18
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5aa>
 8001e2c:	e024      	b.n	8001e78 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e01f      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e3a:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e40:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_RCC_OscConfig+0x620>)
 8001e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e44:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	025b      	lsls	r3, r3, #9
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d10e      	bne.n	8001e74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	220f      	movs	r2, #15
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	23f0      	movs	r3, #240	@ 0xf0
 8001e68:	039b      	lsls	r3, r3, #14
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b008      	add	sp, #32
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	40021000 	.word	0x40021000
 8001e88:	00001388 	.word	0x00001388
 8001e8c:	efffffff 	.word	0xefffffff
 8001e90:	feffffff 	.word	0xfeffffff
 8001e94:	ffc2ffff 	.word	0xffc2ffff

08001e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b3      	b.n	8002014 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b5b      	ldr	r3, [pc, #364]	@ (800201c <HAL_RCC_ClockConfig+0x184>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d911      	bls.n	8001ede <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b58      	ldr	r3, [pc, #352]	@ (800201c <HAL_RCC_ClockConfig+0x184>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	4b55      	ldr	r3, [pc, #340]	@ (800201c <HAL_RCC_ClockConfig+0x184>)
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ecc:	4b53      	ldr	r3, [pc, #332]	@ (800201c <HAL_RCC_ClockConfig+0x184>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e09a      	b.n	8002014 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d015      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2204      	movs	r2, #4
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d006      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001ef8:	21e0      	movs	r1, #224	@ 0xe0
 8001efa:	00c9      	lsls	r1, r1, #3
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f00:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	22f0      	movs	r2, #240	@ 0xf0
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b44      	ldr	r3, [pc, #272]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d040      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b3e      	ldr	r3, [pc, #248]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	@ 0x80
 8001f2c:	029b      	lsls	r3, r3, #10
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d114      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06e      	b.n	8002014 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	049b      	lsls	r3, r3, #18
 8001f46:	4013      	ands	r3, r2
 8001f48:	d108      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e062      	b.n	8002014 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e05b      	b.n	8002014 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5c:	4b30      	ldr	r3, [pc, #192]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	4393      	bics	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7fe ff10 	bl	8000d94 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7fe ff0b 	bl	8000d94 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <HAL_RCC_ClockConfig+0x18c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e042      	b.n	8002014 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	220c      	movs	r2, #12
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1ec      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <HAL_RCC_ClockConfig+0x184>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d211      	bcs.n	8001fd2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_RCC_ClockConfig+0x184>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_RCC_ClockConfig+0x184>)
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc0:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_RCC_ClockConfig+0x184>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e020      	b.n	8002014 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a11      	ldr	r2, [pc, #68]	@ (8002028 <HAL_RCC_ClockConfig+0x190>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ff0:	f000 f820 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001ff4:	0001      	movs	r1, r0
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_RCC_ClockConfig+0x188>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	4013      	ands	r3, r2
 8002000:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <HAL_RCC_ClockConfig+0x194>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	000a      	movs	r2, r1
 8002006:	40da      	lsrs	r2, r3
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_RCC_ClockConfig+0x198>)
 800200a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800200c:	2000      	movs	r0, #0
 800200e:	f7fe fe7b 	bl	8000d08 <HAL_InitTick>
  
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
 8002024:	00001388 	.word	0x00001388
 8002028:	fffff8ff 	.word	0xfffff8ff
 800202c:	080041e0 	.word	0x080041e0
 8002030:	20000000 	.word	0x20000000

08002034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	220c      	movs	r2, #12
 8002058:	4013      	ands	r3, r2
 800205a:	2b04      	cmp	r3, #4
 800205c:	d002      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x30>
 800205e:	2b08      	cmp	r3, #8
 8002060:	d003      	beq.n	800206a <HAL_RCC_GetSysClockFreq+0x36>
 8002062:	e02c      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002066:	613b      	str	r3, [r7, #16]
      break;
 8002068:	e02c      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	0c9b      	lsrs	r3, r3, #18
 800206e:	220f      	movs	r2, #15
 8002070:	4013      	ands	r3, r2
 8002072:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002074:	5cd3      	ldrb	r3, [r2, r3]
 8002076:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002078:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	220f      	movs	r2, #15
 800207e:	4013      	ands	r3, r2
 8002080:	4a16      	ldr	r2, [pc, #88]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	4013      	ands	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	4810      	ldr	r0, [pc, #64]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002094:	f7fe f842 	bl	800011c <__udivsi3>
 8002098:	0003      	movs	r3, r0
 800209a:	001a      	movs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4353      	muls	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e009      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	000a      	movs	r2, r1
 80020a8:	0152      	lsls	r2, r2, #5
 80020aa:	1a52      	subs	r2, r2, r1
 80020ac:	0193      	lsls	r3, r2, #6
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	185b      	adds	r3, r3, r1
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
      break;
 80020bc:	e002      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020c0:	613b      	str	r3, [r7, #16]
      break;
 80020c2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020c4:	693b      	ldr	r3, [r7, #16]
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b006      	add	sp, #24
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	40021000 	.word	0x40021000
 80020d4:	007a1200 	.word	0x007a1200
 80020d8:	080041f8 	.word	0x080041f8
 80020dc:	08004208 	.word	0x08004208

080020e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e4:	4b02      	ldr	r3, [pc, #8]	@ (80020f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	20000000 	.word	0x20000000

080020f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80020f8:	f7ff fff2 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 80020fc:	0001      	movs	r1, r0
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	2207      	movs	r2, #7
 8002106:	4013      	ands	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_RCC_GetPCLK1Freq+0x28>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	40d9      	lsrs	r1, r3
 800210e:	000b      	movs	r3, r1
}    
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	40021000 	.word	0x40021000
 800211c:	080041f0 	.word	0x080041f0

08002120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	4013      	ands	r3, r2
 800213a:	d100      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800213c:	e08e      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800213e:	2017      	movs	r0, #23
 8002140:	183b      	adds	r3, r7, r0
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b57      	ldr	r3, [pc, #348]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	4013      	ands	r3, r2
 8002150:	d110      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b54      	ldr	r3, [pc, #336]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	4b53      	ldr	r3, [pc, #332]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	0549      	lsls	r1, r1, #21
 800215c:	430a      	orrs	r2, r1
 800215e:	61da      	str	r2, [r3, #28]
 8002160:	4b50      	ldr	r3, [pc, #320]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002162:	69da      	ldr	r2, [r3, #28]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	055b      	lsls	r3, r3, #21
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	183b      	adds	r3, r7, r0
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	4b4c      	ldr	r3, [pc, #304]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d11a      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002180:	4b49      	ldr	r3, [pc, #292]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b48      	ldr	r3, [pc, #288]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	0049      	lsls	r1, r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7fe fe01 	bl	8000d94 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	e008      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe fdfc 	bl	8000d94 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	@ 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e077      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b3f      	ldr	r3, [pc, #252]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021b6:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	23c0      	movs	r3, #192	@ 0xc0
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d034      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	23c0      	movs	r3, #192	@ 0xc0
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d02c      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021d8:	4b32      	ldr	r3, [pc, #200]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a33      	ldr	r2, [pc, #204]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021e2:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021e8:	2180      	movs	r1, #128	@ 0x80
 80021ea:	0249      	lsls	r1, r1, #9
 80021ec:	430a      	orrs	r2, r1
 80021ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021f0:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021f2:	6a1a      	ldr	r2, [r3, #32]
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021f6:	492e      	ldr	r1, [pc, #184]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021fc:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fdc3 	bl	8000d94 <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	e009      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7fe fdbe 	bl	8000d94 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4a25      	ldr	r2, [pc, #148]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e038      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d0f0      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002232:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a1d      	ldr	r2, [pc, #116]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002238:	4013      	ands	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002242:	430a      	orrs	r2, r1
 8002244:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002246:	2317      	movs	r3, #23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002256:	4918      	ldr	r1, [pc, #96]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002258:	400a      	ands	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002266:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	2203      	movs	r2, #3
 800226c:	4393      	bics	r3, r2
 800226e:	0019      	movs	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002276:	430a      	orrs	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2220      	movs	r2, #32
 8002280:	4013      	ands	r3, r2
 8002282:	d009      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	2210      	movs	r2, #16
 800228a:	4393      	bics	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002294:	430a      	orrs	r2, r1
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b006      	add	sp, #24
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40007000 	.word	0x40007000
 80022ac:	fffffcff 	.word	0xfffffcff
 80022b0:	fffeffff 	.word	0xfffeffff
 80022b4:	00001388 	.word	0x00001388
 80022b8:	efffffff 	.word	0xefffffff

080022bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e044      	b.n	8002358 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2278      	movs	r2, #120	@ 0x78
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe fb8f 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2224      	movs	r2, #36	@ 0x24
 80022ea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	0018      	movs	r0, r3
 8002308:	f000 fa86 	bl	8002818 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f942 	bl	8002598 <UART_SetConfig>
 8002314:	0003      	movs	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e01c      	b.n	8002358 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	490d      	ldr	r1, [pc, #52]	@ (8002360 <HAL_UART_Init+0xa4>)
 800232a:	400a      	ands	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2108      	movs	r1, #8
 800233a:	438a      	bics	r2, r1
 800233c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fb15 	bl	8002980 <UART_CheckIdleState>
 8002356:	0003      	movs	r3, r0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	fffff7ff 	.word	0xfffff7ff

08002364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	@ 0x28
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	1dbb      	adds	r3, r7, #6
 8002372:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002378:	2b20      	cmp	r3, #32
 800237a:	d000      	beq.n	800237e <HAL_UART_Transmit+0x1a>
 800237c:	e08c      	b.n	8002498 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_UART_Transmit+0x28>
 8002384:	1dbb      	adds	r3, r7, #6
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e084      	b.n	800249a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	429a      	cmp	r2, r3
 800239a:	d109      	bne.n	80023b0 <HAL_UART_Transmit+0x4c>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d001      	beq.n	80023b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e074      	b.n	800249a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2284      	movs	r2, #132	@ 0x84
 80023b4:	2100      	movs	r1, #0
 80023b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2221      	movs	r2, #33	@ 0x21
 80023bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023be:	f7fe fce9 	bl	8000d94 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1dba      	adds	r2, r7, #6
 80023ca:	2150      	movs	r1, #80	@ 0x50
 80023cc:	8812      	ldrh	r2, [r2, #0]
 80023ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1dba      	adds	r2, r7, #6
 80023d4:	2152      	movs	r1, #82	@ 0x52
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	015b      	lsls	r3, r3, #5
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d108      	bne.n	80023f8 <HAL_UART_Transmit+0x94>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d104      	bne.n	80023f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	e003      	b.n	8002400 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002400:	e02f      	b.n	8002462 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	0013      	movs	r3, r2
 800240c:	2200      	movs	r2, #0
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	f000 fb5e 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 8002414:	1e03      	subs	r3, r0, #0
 8002416:	d004      	beq.n	8002422 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e03b      	b.n	800249a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	05d2      	lsls	r2, r2, #23
 8002432:	0dd2      	lsrs	r2, r2, #23
 8002434:	b292      	uxth	r2, r2
 8002436:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	3302      	adds	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e007      	b.n	8002450 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3301      	adds	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2252      	movs	r2, #82	@ 0x52
 8002454:	5a9b      	ldrh	r3, [r3, r2]
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b299      	uxth	r1, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2252      	movs	r2, #82	@ 0x52
 8002460:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2252      	movs	r2, #82	@ 0x52
 8002466:	5a9b      	ldrh	r3, [r3, r2]
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1c9      	bne.n	8002402 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	0013      	movs	r3, r2
 8002478:	2200      	movs	r2, #0
 800247a:	2140      	movs	r1, #64	@ 0x40
 800247c:	f000 fb28 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 8002480:	1e03      	subs	r3, r0, #0
 8002482:	d004      	beq.n	800248e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e005      	b.n	800249a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b008      	add	sp, #32
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b088      	sub	sp, #32
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	1dbb      	adds	r3, r7, #6
 80024ae:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2280      	movs	r2, #128	@ 0x80
 80024b4:	589b      	ldr	r3, [r3, r2]
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d145      	bne.n	8002546 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_UART_Receive_DMA+0x26>
 80024c0:	1dbb      	adds	r3, r7, #6
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e03d      	b.n	8002548 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	015b      	lsls	r3, r3, #5
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d109      	bne.n	80024ec <HAL_UART_Receive_DMA+0x4a>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d001      	beq.n	80024ec <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e02d      	b.n	8002548 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	4013      	ands	r3, r2
 80024fe:	d019      	beq.n	8002534 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002500:	f3ef 8310 	mrs	r3, PRIMASK
 8002504:	613b      	str	r3, [r7, #16]
  return(result);
 8002506:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	2301      	movs	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f383 8810 	msr	PRIMASK, r3
}
 8002514:	46c0      	nop			@ (mov r8, r8)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2180      	movs	r1, #128	@ 0x80
 8002522:	04c9      	lsls	r1, r1, #19
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f383 8810 	msr	PRIMASK, r3
}
 8002532:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002534:	1dbb      	adds	r3, r7, #6
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fb37 	bl	8002bb0 <UART_Start_Receive_DMA>
 8002542:	0003      	movs	r3, r0
 8002544:	e000      	b.n	8002548 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b008      	add	sp, #32
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002558:	46c0      	nop			@ (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	000a      	movs	r2, r1
 800258a:	1cbb      	adds	r3, r7, #2
 800258c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	b002      	add	sp, #8
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025a0:	231e      	movs	r3, #30
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a8d      	ldr	r2, [pc, #564]	@ (80027fc <UART_SetConfig+0x264>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a88      	ldr	r2, [pc, #544]	@ (8002800 <UART_SetConfig+0x268>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4a7f      	ldr	r2, [pc, #508]	@ (8002804 <UART_SetConfig+0x26c>)
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	430a      	orrs	r2, r1
 8002612:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7b      	ldr	r2, [pc, #492]	@ (8002808 <UART_SetConfig+0x270>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d127      	bne.n	800266e <UART_SetConfig+0xd6>
 800261e:	4b7b      	ldr	r3, [pc, #492]	@ (800280c <UART_SetConfig+0x274>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	2203      	movs	r2, #3
 8002624:	4013      	ands	r3, r2
 8002626:	2b03      	cmp	r3, #3
 8002628:	d00d      	beq.n	8002646 <UART_SetConfig+0xae>
 800262a:	d81b      	bhi.n	8002664 <UART_SetConfig+0xcc>
 800262c:	2b02      	cmp	r3, #2
 800262e:	d014      	beq.n	800265a <UART_SetConfig+0xc2>
 8002630:	d818      	bhi.n	8002664 <UART_SetConfig+0xcc>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <UART_SetConfig+0xa4>
 8002636:	2b01      	cmp	r3, #1
 8002638:	d00a      	beq.n	8002650 <UART_SetConfig+0xb8>
 800263a:	e013      	b.n	8002664 <UART_SetConfig+0xcc>
 800263c:	231f      	movs	r3, #31
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e021      	b.n	800268a <UART_SetConfig+0xf2>
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e01c      	b.n	800268a <UART_SetConfig+0xf2>
 8002650:	231f      	movs	r3, #31
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2204      	movs	r2, #4
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e017      	b.n	800268a <UART_SetConfig+0xf2>
 800265a:	231f      	movs	r3, #31
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2208      	movs	r2, #8
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e012      	b.n	800268a <UART_SetConfig+0xf2>
 8002664:	231f      	movs	r3, #31
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2210      	movs	r2, #16
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e00d      	b.n	800268a <UART_SetConfig+0xf2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a67      	ldr	r2, [pc, #412]	@ (8002810 <UART_SetConfig+0x278>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d104      	bne.n	8002682 <UART_SetConfig+0xea>
 8002678:	231f      	movs	r3, #31
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e003      	b.n	800268a <UART_SetConfig+0xf2>
 8002682:	231f      	movs	r3, #31
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2210      	movs	r2, #16
 8002688:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	429a      	cmp	r2, r3
 8002694:	d15c      	bne.n	8002750 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002696:	231f      	movs	r3, #31
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d015      	beq.n	80026cc <UART_SetConfig+0x134>
 80026a0:	dc18      	bgt.n	80026d4 <UART_SetConfig+0x13c>
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d00d      	beq.n	80026c2 <UART_SetConfig+0x12a>
 80026a6:	dc15      	bgt.n	80026d4 <UART_SetConfig+0x13c>
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <UART_SetConfig+0x11a>
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d005      	beq.n	80026bc <UART_SetConfig+0x124>
 80026b0:	e010      	b.n	80026d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026b2:	f7ff fd1f 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]
        break;
 80026ba:	e012      	b.n	80026e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026bc:	4b55      	ldr	r3, [pc, #340]	@ (8002814 <UART_SetConfig+0x27c>)
 80026be:	61bb      	str	r3, [r7, #24]
        break;
 80026c0:	e00f      	b.n	80026e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026c2:	f7ff fcb7 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 80026c6:	0003      	movs	r3, r0
 80026c8:	61bb      	str	r3, [r7, #24]
        break;
 80026ca:	e00a      	b.n	80026e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	61bb      	str	r3, [r7, #24]
        break;
 80026d2:	e006      	b.n	80026e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026d8:	231e      	movs	r3, #30
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
        break;
 80026e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d100      	bne.n	80026ea <UART_SetConfig+0x152>
 80026e8:	e07a      	b.n	80027e0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	005a      	lsls	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	18d2      	adds	r2, r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0019      	movs	r1, r3
 80026fc:	0010      	movs	r0, r2
 80026fe:	f7fd fd0d 	bl	800011c <__udivsi3>
 8002702:	0003      	movs	r3, r0
 8002704:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d91c      	bls.n	8002746 <UART_SetConfig+0x1ae>
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	025b      	lsls	r3, r3, #9
 8002712:	429a      	cmp	r2, r3
 8002714:	d217      	bcs.n	8002746 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	b29a      	uxth	r2, r3
 800271a:	200e      	movs	r0, #14
 800271c:	183b      	adds	r3, r7, r0
 800271e:	210f      	movs	r1, #15
 8002720:	438a      	bics	r2, r1
 8002722:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	b29b      	uxth	r3, r3
 800272a:	2207      	movs	r2, #7
 800272c:	4013      	ands	r3, r2
 800272e:	b299      	uxth	r1, r3
 8002730:	183b      	adds	r3, r7, r0
 8002732:	183a      	adds	r2, r7, r0
 8002734:	8812      	ldrh	r2, [r2, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	183a      	adds	r2, r7, r0
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	e04c      	b.n	80027e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002746:	231e      	movs	r3, #30
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e047      	b.n	80027e0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002750:	231f      	movs	r3, #31
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b08      	cmp	r3, #8
 8002758:	d015      	beq.n	8002786 <UART_SetConfig+0x1ee>
 800275a:	dc18      	bgt.n	800278e <UART_SetConfig+0x1f6>
 800275c:	2b04      	cmp	r3, #4
 800275e:	d00d      	beq.n	800277c <UART_SetConfig+0x1e4>
 8002760:	dc15      	bgt.n	800278e <UART_SetConfig+0x1f6>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <UART_SetConfig+0x1d4>
 8002766:	2b02      	cmp	r3, #2
 8002768:	d005      	beq.n	8002776 <UART_SetConfig+0x1de>
 800276a:	e010      	b.n	800278e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800276c:	f7ff fcc2 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8002770:	0003      	movs	r3, r0
 8002772:	61bb      	str	r3, [r7, #24]
        break;
 8002774:	e012      	b.n	800279c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002776:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <UART_SetConfig+0x27c>)
 8002778:	61bb      	str	r3, [r7, #24]
        break;
 800277a:	e00f      	b.n	800279c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277c:	f7ff fc5a 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8002780:	0003      	movs	r3, r0
 8002782:	61bb      	str	r3, [r7, #24]
        break;
 8002784:	e00a      	b.n	800279c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	61bb      	str	r3, [r7, #24]
        break;
 800278c:	e006      	b.n	800279c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002792:	231e      	movs	r3, #30
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
        break;
 800279a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01e      	beq.n	80027e0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	085a      	lsrs	r2, r3, #1
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	18d2      	adds	r2, r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0019      	movs	r1, r3
 80027b2:	0010      	movs	r0, r2
 80027b4:	f7fd fcb2 	bl	800011c <__udivsi3>
 80027b8:	0003      	movs	r3, r0
 80027ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	d90a      	bls.n	80027d8 <UART_SetConfig+0x240>
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	025b      	lsls	r3, r3, #9
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d205      	bcs.n	80027d8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	e003      	b.n	80027e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80027d8:	231e      	movs	r3, #30
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80027ec:	231e      	movs	r3, #30
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	781b      	ldrb	r3, [r3, #0]
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b008      	add	sp, #32
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	ffff69f3 	.word	0xffff69f3
 8002800:	ffffcfff 	.word	0xffffcfff
 8002804:	fffff4ff 	.word	0xfffff4ff
 8002808:	40013800 	.word	0x40013800
 800280c:	40021000 	.word	0x40021000
 8002810:	40004400 	.word	0x40004400
 8002814:	007a1200 	.word	0x007a1200

08002818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	2208      	movs	r2, #8
 8002826:	4013      	ands	r3, r2
 8002828:	d00b      	beq.n	8002842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a4a      	ldr	r2, [pc, #296]	@ (800295c <UART_AdvFeatureConfig+0x144>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	2201      	movs	r2, #1
 8002848:	4013      	ands	r3, r2
 800284a:	d00b      	beq.n	8002864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a43      	ldr	r2, [pc, #268]	@ (8002960 <UART_AdvFeatureConfig+0x148>)
 8002854:	4013      	ands	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	2202      	movs	r2, #2
 800286a:	4013      	ands	r3, r2
 800286c:	d00b      	beq.n	8002886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a3b      	ldr	r2, [pc, #236]	@ (8002964 <UART_AdvFeatureConfig+0x14c>)
 8002876:	4013      	ands	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2204      	movs	r2, #4
 800288c:	4013      	ands	r3, r2
 800288e:	d00b      	beq.n	80028a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a34      	ldr	r2, [pc, #208]	@ (8002968 <UART_AdvFeatureConfig+0x150>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	2210      	movs	r2, #16
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00b      	beq.n	80028ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a2c      	ldr	r2, [pc, #176]	@ (800296c <UART_AdvFeatureConfig+0x154>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	2220      	movs	r2, #32
 80028d0:	4013      	ands	r3, r2
 80028d2:	d00b      	beq.n	80028ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a25      	ldr	r2, [pc, #148]	@ (8002970 <UART_AdvFeatureConfig+0x158>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	2240      	movs	r2, #64	@ 0x40
 80028f2:	4013      	ands	r3, r2
 80028f4:	d01d      	beq.n	8002932 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002974 <UART_AdvFeatureConfig+0x15c>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	035b      	lsls	r3, r3, #13
 8002916:	429a      	cmp	r2, r3
 8002918:	d10b      	bne.n	8002932 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a15      	ldr	r2, [pc, #84]	@ (8002978 <UART_AdvFeatureConfig+0x160>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	2280      	movs	r2, #128	@ 0x80
 8002938:	4013      	ands	r3, r2
 800293a:	d00b      	beq.n	8002954 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a0e      	ldr	r2, [pc, #56]	@ (800297c <UART_AdvFeatureConfig+0x164>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]
  }
}
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}
 800295c:	ffff7fff 	.word	0xffff7fff
 8002960:	fffdffff 	.word	0xfffdffff
 8002964:	fffeffff 	.word	0xfffeffff
 8002968:	fffbffff 	.word	0xfffbffff
 800296c:	ffffefff 	.word	0xffffefff
 8002970:	ffffdfff 	.word	0xffffdfff
 8002974:	ffefffff 	.word	0xffefffff
 8002978:	ff9fffff 	.word	0xff9fffff
 800297c:	fff7ffff 	.word	0xfff7ffff

08002980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b092      	sub	sp, #72	@ 0x48
 8002984:	af02      	add	r7, sp, #8
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2284      	movs	r2, #132	@ 0x84
 800298c:	2100      	movs	r1, #0
 800298e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002990:	f7fe fa00 	bl	8000d94 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2208      	movs	r2, #8
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d12c      	bne.n	8002a00 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0391      	lsls	r1, r2, #14
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4a46      	ldr	r2, [pc, #280]	@ (8002ac8 <UART_CheckIdleState+0x148>)
 80029b0:	9200      	str	r2, [sp, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f000 f88c 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d021      	beq.n	8002a00 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029bc:	f3ef 8310 	mrs	r3, PRIMASK
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029c6:	2301      	movs	r3, #1
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029cc:	f383 8810 	msr	PRIMASK, r3
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2180      	movs	r1, #128	@ 0x80
 80029de:	438a      	bics	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e8:	f383 8810 	msr	PRIMASK, r3
}
 80029ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2278      	movs	r2, #120	@ 0x78
 80029f8:	2100      	movs	r1, #0
 80029fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e05f      	b.n	8002ac0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2204      	movs	r2, #4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d146      	bne.n	8002a9c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a10:	2280      	movs	r2, #128	@ 0x80
 8002a12:	03d1      	lsls	r1, r2, #15
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac8 <UART_CheckIdleState+0x148>)
 8002a18:	9200      	str	r2, [sp, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f000 f858 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d03b      	beq.n	8002a9c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a24:	f3ef 8310 	mrs	r3, PRIMASK
 8002a28:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a2e:	2301      	movs	r3, #1
 8002a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f383 8810 	msr	PRIMASK, r3
}
 8002a38:	46c0      	nop			@ (mov r8, r8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4921      	ldr	r1, [pc, #132]	@ (8002acc <UART_CheckIdleState+0x14c>)
 8002a46:	400a      	ands	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f383 8810 	msr	PRIMASK, r3
}
 8002a54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a56:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a5c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a60:	2301      	movs	r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2101      	movs	r1, #1
 8002a78:	438a      	bics	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	f383 8810 	msr	PRIMASK, r3
}
 8002a86:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2280      	movs	r2, #128	@ 0x80
 8002a8c:	2120      	movs	r1, #32
 8002a8e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2278      	movs	r2, #120	@ 0x78
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e011      	b.n	8002ac0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2280      	movs	r2, #128	@ 0x80
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2278      	movs	r2, #120	@ 0x78
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b010      	add	sp, #64	@ 0x40
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	01ffffff 	.word	0x01ffffff
 8002acc:	fffffedf 	.word	0xfffffedf

08002ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae0:	e051      	b.n	8002b86 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	d04e      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae8:	f7fe f954 	bl	8000d94 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d302      	bcc.n	8002afe <UART_WaitOnFlagUntilTimeout+0x2e>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e051      	b.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d03b      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b80      	cmp	r3, #128	@ 0x80
 8002b12:	d038      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b40      	cmp	r3, #64	@ 0x40
 8002b18:	d035      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2208      	movs	r2, #8
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d111      	bne.n	8002b4c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 f900 	bl	8002d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2284      	movs	r2, #132	@ 0x84
 8002b3c:	2108      	movs	r1, #8
 8002b3e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2278      	movs	r2, #120	@ 0x78
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e02c      	b.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	401a      	ands	r2, r3
 8002b58:	2380      	movs	r3, #128	@ 0x80
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d112      	bne.n	8002b86 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2280      	movs	r2, #128	@ 0x80
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 f8e3 	bl	8002d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2284      	movs	r2, #132	@ 0x84
 8002b76:	2120      	movs	r1, #32
 8002b78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2278      	movs	r2, #120	@ 0x78
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e00f      	b.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	425a      	negs	r2, r3
 8002b96:	4153      	adcs	r3, r2
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	1dfb      	adds	r3, r7, #7
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d09e      	beq.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b004      	add	sp, #16
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b090      	sub	sp, #64	@ 0x40
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	1dbb      	adds	r3, r7, #6
 8002bbc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1dba      	adds	r2, r7, #6
 8002bc8:	2158      	movs	r1, #88	@ 0x58
 8002bca:	8812      	ldrh	r2, [r2, #0]
 8002bcc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2284      	movs	r2, #132	@ 0x84
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	2122      	movs	r1, #34	@ 0x22
 8002bdc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d028      	beq.n	8002c38 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bea:	4a3e      	ldr	r2, [pc, #248]	@ (8002ce4 <UART_Start_Receive_DMA+0x134>)
 8002bec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce8 <UART_Start_Receive_DMA+0x138>)
 8002bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfa:	4a3c      	ldr	r2, [pc, #240]	@ (8002cec <UART_Start_Receive_DMA+0x13c>)
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c02:	2200      	movs	r2, #0
 8002c04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3324      	adds	r3, #36	@ 0x24
 8002c10:	0019      	movs	r1, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c16:	001a      	movs	r2, r3
 8002c18:	1dbb      	adds	r3, r7, #6
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	f7fe f9ea 	bl	8000ff4 <HAL_DMA_Start_IT>
 8002c20:	1e03      	subs	r3, r0, #0
 8002c22:	d009      	beq.n	8002c38 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2284      	movs	r2, #132	@ 0x84
 8002c28:	2110      	movs	r1, #16
 8002c2a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2280      	movs	r2, #128	@ 0x80
 8002c30:	2120      	movs	r1, #32
 8002c32:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e050      	b.n	8002cda <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d019      	beq.n	8002c74 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c40:	f3ef 8310 	mrs	r3, PRIMASK
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	f383 8810 	msr	PRIMASK, r3
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2180      	movs	r1, #128	@ 0x80
 8002c62:	0049      	lsls	r1, r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6e:	f383 8810 	msr	PRIMASK, r3
}
 8002c72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c74:	f3ef 8310 	mrs	r3, PRIMASK
 8002c78:	613b      	str	r3, [r7, #16]
  return(result);
 8002c7a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c7e:	2301      	movs	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8002caa:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cac:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2140      	movs	r1, #64	@ 0x40
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b010      	add	sp, #64	@ 0x40
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	08002e01 	.word	0x08002e01
 8002ce8:	08002f2d 	.word	0x08002f2d
 8002cec:	08002f6f 	.word	0x08002f6f

08002cf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	2301      	movs	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	21c0      	movs	r1, #192	@ 0xc0
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002d30:	46c0      	nop			@ (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b006      	add	sp, #24
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	@ 0x38
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d40:	f3ef 8310 	mrs	r3, PRIMASK
 8002d44:	617b      	str	r3, [r7, #20]
  return(result);
 8002d46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f383 8810 	msr	PRIMASK, r3
}
 8002d54:	46c0      	nop			@ (mov r8, r8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4926      	ldr	r1, [pc, #152]	@ (8002dfc <UART_EndRxTransfer+0xc4>)
 8002d62:	400a      	ands	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d72:	f3ef 8310 	mrs	r3, PRIMASK
 8002d76:	623b      	str	r3, [r7, #32]
  return(result);
 8002d78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	f383 8810 	msr	PRIMASK, r3
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d118      	bne.n	8002dde <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dac:	f3ef 8310 	mrs	r3, PRIMASK
 8002db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002db2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db6:	2301      	movs	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f383 8810 	msr	PRIMASK, r3
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2110      	movs	r1, #16
 8002dce:	438a      	bics	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f383 8810 	msr	PRIMASK, r3
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2280      	movs	r2, #128	@ 0x80
 8002de2:	2120      	movs	r1, #32
 8002de4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b00e      	add	sp, #56	@ 0x38
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	fffffedf 	.word	0xfffffedf

08002e00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b094      	sub	sp, #80	@ 0x50
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d06f      	beq.n	8002ef6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e18:	225a      	movs	r2, #90	@ 0x5a
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e22:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e24:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e28:	2301      	movs	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f383 8810 	msr	PRIMASK, r3
}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	493a      	ldr	r1, [pc, #232]	@ (8002f28 <UART_DMAReceiveCplt+0x128>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f383 8810 	msr	PRIMASK, r3
}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e50:	f3ef 8310 	mrs	r3, PRIMASK
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e60:	f383 8810 	msr	PRIMASK, r3
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	438a      	bics	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7c:	f383 8810 	msr	PRIMASK, r3
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2140      	movs	r1, #64	@ 0x40
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eae:	f383 8810 	msr	PRIMASK, r3
}
 8002eb2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eb6:	2280      	movs	r2, #128	@ 0x80
 8002eb8:	2120      	movs	r1, #32
 8002eba:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d118      	bne.n	8002ef6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eca:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ece:	2301      	movs	r3, #1
 8002ed0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2110      	movs	r1, #16
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ef8:	2200      	movs	r2, #0
 8002efa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d108      	bne.n	8002f16 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f06:	2258      	movs	r2, #88	@ 0x58
 8002f08:	5a9a      	ldrh	r2, [r3, r2]
 8002f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f0c:	0011      	movs	r1, r2
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff fb36 	bl	8002580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f14:	e003      	b.n	8002f1e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7ff fb19 	bl	8002550 <HAL_UART_RxCpltCallback>
}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b014      	add	sp, #80	@ 0x50
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	fffffeff 	.word	0xfffffeff

08002f2c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10a      	bne.n	8002f5e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2258      	movs	r2, #88	@ 0x58
 8002f4c:	5a9b      	ldrh	r3, [r3, r2]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0011      	movs	r1, r2
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7ff fb12 	bl	8002580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f5c:	e003      	b.n	8002f66 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7ff fafd 	bl	8002560 <HAL_UART_RxHalfCpltCallback>
}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b004      	add	sp, #16
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f80:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2280      	movs	r2, #128	@ 0x80
 8002f86:	589b      	ldr	r3, [r3, r2]
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b80      	cmp	r3, #128	@ 0x80
 8002f96:	d10a      	bne.n	8002fae <UART_DMAError+0x40>
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b21      	cmp	r3, #33	@ 0x21
 8002f9c:	d107      	bne.n	8002fae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2252      	movs	r2, #82	@ 0x52
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff fea1 	bl	8002cf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2240      	movs	r2, #64	@ 0x40
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b40      	cmp	r3, #64	@ 0x40
 8002fba:	d10a      	bne.n	8002fd2 <UART_DMAError+0x64>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b22      	cmp	r3, #34	@ 0x22
 8002fc0:	d107      	bne.n	8002fd2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	225a      	movs	r2, #90	@ 0x5a
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff feb3 	bl	8002d38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2284      	movs	r2, #132	@ 0x84
 8002fd6:	589b      	ldr	r3, [r3, r2]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2184      	movs	r1, #132	@ 0x84
 8002fe0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff fac3 	bl	8002570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b006      	add	sp, #24
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <std>:
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	0004      	movs	r4, r0
 8002ffa:	6003      	str	r3, [r0, #0]
 8002ffc:	6043      	str	r3, [r0, #4]
 8002ffe:	6083      	str	r3, [r0, #8]
 8003000:	8181      	strh	r1, [r0, #12]
 8003002:	6643      	str	r3, [r0, #100]	@ 0x64
 8003004:	81c2      	strh	r2, [r0, #14]
 8003006:	6103      	str	r3, [r0, #16]
 8003008:	6143      	str	r3, [r0, #20]
 800300a:	6183      	str	r3, [r0, #24]
 800300c:	0019      	movs	r1, r3
 800300e:	2208      	movs	r2, #8
 8003010:	305c      	adds	r0, #92	@ 0x5c
 8003012:	f000 f9ff 	bl	8003414 <memset>
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <std+0x50>)
 8003018:	6224      	str	r4, [r4, #32]
 800301a:	6263      	str	r3, [r4, #36]	@ 0x24
 800301c:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <std+0x54>)
 800301e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003020:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <std+0x58>)
 8003022:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003024:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <std+0x5c>)
 8003026:	6323      	str	r3, [r4, #48]	@ 0x30
 8003028:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <std+0x60>)
 800302a:	429c      	cmp	r4, r3
 800302c:	d005      	beq.n	800303a <std+0x46>
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <std+0x64>)
 8003030:	429c      	cmp	r4, r3
 8003032:	d002      	beq.n	800303a <std+0x46>
 8003034:	4b09      	ldr	r3, [pc, #36]	@ (800305c <std+0x68>)
 8003036:	429c      	cmp	r4, r3
 8003038:	d103      	bne.n	8003042 <std+0x4e>
 800303a:	0020      	movs	r0, r4
 800303c:	3058      	adds	r0, #88	@ 0x58
 800303e:	f000 fae3 	bl	8003608 <__retarget_lock_init_recursive>
 8003042:	bd10      	pop	{r4, pc}
 8003044:	0800323d 	.word	0x0800323d
 8003048:	08003265 	.word	0x08003265
 800304c:	0800329d 	.word	0x0800329d
 8003050:	080032c9 	.word	0x080032c9
 8003054:	20000348 	.word	0x20000348
 8003058:	200003b0 	.word	0x200003b0
 800305c:	20000418 	.word	0x20000418

08003060 <stdio_exit_handler>:
 8003060:	b510      	push	{r4, lr}
 8003062:	4a03      	ldr	r2, [pc, #12]	@ (8003070 <stdio_exit_handler+0x10>)
 8003064:	4903      	ldr	r1, [pc, #12]	@ (8003074 <stdio_exit_handler+0x14>)
 8003066:	4804      	ldr	r0, [pc, #16]	@ (8003078 <stdio_exit_handler+0x18>)
 8003068:	f000 f86c 	bl	8003144 <_fwalk_sglue>
 800306c:	bd10      	pop	{r4, pc}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	2000000c 	.word	0x2000000c
 8003074:	08003965 	.word	0x08003965
 8003078:	2000001c 	.word	0x2000001c

0800307c <cleanup_stdio>:
 800307c:	6841      	ldr	r1, [r0, #4]
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <cleanup_stdio+0x30>)
 8003080:	b510      	push	{r4, lr}
 8003082:	0004      	movs	r4, r0
 8003084:	4299      	cmp	r1, r3
 8003086:	d001      	beq.n	800308c <cleanup_stdio+0x10>
 8003088:	f000 fc6c 	bl	8003964 <_fflush_r>
 800308c:	68a1      	ldr	r1, [r4, #8]
 800308e:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <cleanup_stdio+0x34>)
 8003090:	4299      	cmp	r1, r3
 8003092:	d002      	beq.n	800309a <cleanup_stdio+0x1e>
 8003094:	0020      	movs	r0, r4
 8003096:	f000 fc65 	bl	8003964 <_fflush_r>
 800309a:	68e1      	ldr	r1, [r4, #12]
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <cleanup_stdio+0x38>)
 800309e:	4299      	cmp	r1, r3
 80030a0:	d002      	beq.n	80030a8 <cleanup_stdio+0x2c>
 80030a2:	0020      	movs	r0, r4
 80030a4:	f000 fc5e 	bl	8003964 <_fflush_r>
 80030a8:	bd10      	pop	{r4, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	20000348 	.word	0x20000348
 80030b0:	200003b0 	.word	0x200003b0
 80030b4:	20000418 	.word	0x20000418

080030b8 <global_stdio_init.part.0>:
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <global_stdio_init.part.0+0x28>)
 80030bc:	4a09      	ldr	r2, [pc, #36]	@ (80030e4 <global_stdio_init.part.0+0x2c>)
 80030be:	2104      	movs	r1, #4
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	4809      	ldr	r0, [pc, #36]	@ (80030e8 <global_stdio_init.part.0+0x30>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	f7ff ff95 	bl	8002ff4 <std>
 80030ca:	2201      	movs	r2, #1
 80030cc:	2109      	movs	r1, #9
 80030ce:	4807      	ldr	r0, [pc, #28]	@ (80030ec <global_stdio_init.part.0+0x34>)
 80030d0:	f7ff ff90 	bl	8002ff4 <std>
 80030d4:	2202      	movs	r2, #2
 80030d6:	2112      	movs	r1, #18
 80030d8:	4805      	ldr	r0, [pc, #20]	@ (80030f0 <global_stdio_init.part.0+0x38>)
 80030da:	f7ff ff8b 	bl	8002ff4 <std>
 80030de:	bd10      	pop	{r4, pc}
 80030e0:	20000480 	.word	0x20000480
 80030e4:	08003061 	.word	0x08003061
 80030e8:	20000348 	.word	0x20000348
 80030ec:	200003b0 	.word	0x200003b0
 80030f0:	20000418 	.word	0x20000418

080030f4 <__sfp_lock_acquire>:
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4802      	ldr	r0, [pc, #8]	@ (8003100 <__sfp_lock_acquire+0xc>)
 80030f8:	f000 fa87 	bl	800360a <__retarget_lock_acquire_recursive>
 80030fc:	bd10      	pop	{r4, pc}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	20000489 	.word	0x20000489

08003104 <__sfp_lock_release>:
 8003104:	b510      	push	{r4, lr}
 8003106:	4802      	ldr	r0, [pc, #8]	@ (8003110 <__sfp_lock_release+0xc>)
 8003108:	f000 fa80 	bl	800360c <__retarget_lock_release_recursive>
 800310c:	bd10      	pop	{r4, pc}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	20000489 	.word	0x20000489

08003114 <__sinit>:
 8003114:	b510      	push	{r4, lr}
 8003116:	0004      	movs	r4, r0
 8003118:	f7ff ffec 	bl	80030f4 <__sfp_lock_acquire>
 800311c:	6a23      	ldr	r3, [r4, #32]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <__sinit+0x14>
 8003122:	f7ff ffef 	bl	8003104 <__sfp_lock_release>
 8003126:	bd10      	pop	{r4, pc}
 8003128:	4b04      	ldr	r3, [pc, #16]	@ (800313c <__sinit+0x28>)
 800312a:	6223      	str	r3, [r4, #32]
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <__sinit+0x2c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f6      	bne.n	8003122 <__sinit+0xe>
 8003134:	f7ff ffc0 	bl	80030b8 <global_stdio_init.part.0>
 8003138:	e7f3      	b.n	8003122 <__sinit+0xe>
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	0800307d 	.word	0x0800307d
 8003140:	20000480 	.word	0x20000480

08003144 <_fwalk_sglue>:
 8003144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003146:	0014      	movs	r4, r2
 8003148:	2600      	movs	r6, #0
 800314a:	9000      	str	r0, [sp, #0]
 800314c:	9101      	str	r1, [sp, #4]
 800314e:	68a5      	ldr	r5, [r4, #8]
 8003150:	6867      	ldr	r7, [r4, #4]
 8003152:	3f01      	subs	r7, #1
 8003154:	d504      	bpl.n	8003160 <_fwalk_sglue+0x1c>
 8003156:	6824      	ldr	r4, [r4, #0]
 8003158:	2c00      	cmp	r4, #0
 800315a:	d1f8      	bne.n	800314e <_fwalk_sglue+0xa>
 800315c:	0030      	movs	r0, r6
 800315e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003160:	89ab      	ldrh	r3, [r5, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d908      	bls.n	8003178 <_fwalk_sglue+0x34>
 8003166:	220e      	movs	r2, #14
 8003168:	5eab      	ldrsh	r3, [r5, r2]
 800316a:	3301      	adds	r3, #1
 800316c:	d004      	beq.n	8003178 <_fwalk_sglue+0x34>
 800316e:	0029      	movs	r1, r5
 8003170:	9800      	ldr	r0, [sp, #0]
 8003172:	9b01      	ldr	r3, [sp, #4]
 8003174:	4798      	blx	r3
 8003176:	4306      	orrs	r6, r0
 8003178:	3568      	adds	r5, #104	@ 0x68
 800317a:	e7ea      	b.n	8003152 <_fwalk_sglue+0xe>

0800317c <_puts_r>:
 800317c:	6a03      	ldr	r3, [r0, #32]
 800317e:	b570      	push	{r4, r5, r6, lr}
 8003180:	0005      	movs	r5, r0
 8003182:	000e      	movs	r6, r1
 8003184:	6884      	ldr	r4, [r0, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <_puts_r+0x12>
 800318a:	f7ff ffc3 	bl	8003114 <__sinit>
 800318e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003190:	07db      	lsls	r3, r3, #31
 8003192:	d405      	bmi.n	80031a0 <_puts_r+0x24>
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	059b      	lsls	r3, r3, #22
 8003198:	d402      	bmi.n	80031a0 <_puts_r+0x24>
 800319a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800319c:	f000 fa35 	bl	800360a <__retarget_lock_acquire_recursive>
 80031a0:	89a3      	ldrh	r3, [r4, #12]
 80031a2:	071b      	lsls	r3, r3, #28
 80031a4:	d502      	bpl.n	80031ac <_puts_r+0x30>
 80031a6:	6923      	ldr	r3, [r4, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11f      	bne.n	80031ec <_puts_r+0x70>
 80031ac:	0021      	movs	r1, r4
 80031ae:	0028      	movs	r0, r5
 80031b0:	f000 f8d2 	bl	8003358 <__swsetup_r>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d019      	beq.n	80031ec <_puts_r+0x70>
 80031b8:	2501      	movs	r5, #1
 80031ba:	426d      	negs	r5, r5
 80031bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031be:	07db      	lsls	r3, r3, #31
 80031c0:	d405      	bmi.n	80031ce <_puts_r+0x52>
 80031c2:	89a3      	ldrh	r3, [r4, #12]
 80031c4:	059b      	lsls	r3, r3, #22
 80031c6:	d402      	bmi.n	80031ce <_puts_r+0x52>
 80031c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031ca:	f000 fa1f 	bl	800360c <__retarget_lock_release_recursive>
 80031ce:	0028      	movs	r0, r5
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
 80031d2:	3601      	adds	r6, #1
 80031d4:	60a3      	str	r3, [r4, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da04      	bge.n	80031e4 <_puts_r+0x68>
 80031da:	69a2      	ldr	r2, [r4, #24]
 80031dc:	429a      	cmp	r2, r3
 80031de:	dc16      	bgt.n	800320e <_puts_r+0x92>
 80031e0:	290a      	cmp	r1, #10
 80031e2:	d014      	beq.n	800320e <_puts_r+0x92>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	6022      	str	r2, [r4, #0]
 80031ea:	7019      	strb	r1, [r3, #0]
 80031ec:	68a3      	ldr	r3, [r4, #8]
 80031ee:	7831      	ldrb	r1, [r6, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	2900      	cmp	r1, #0
 80031f4:	d1ed      	bne.n	80031d2 <_puts_r+0x56>
 80031f6:	60a3      	str	r3, [r4, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	da0f      	bge.n	800321c <_puts_r+0xa0>
 80031fc:	0022      	movs	r2, r4
 80031fe:	0028      	movs	r0, r5
 8003200:	310a      	adds	r1, #10
 8003202:	f000 f867 	bl	80032d4 <__swbuf_r>
 8003206:	3001      	adds	r0, #1
 8003208:	d0d6      	beq.n	80031b8 <_puts_r+0x3c>
 800320a:	250a      	movs	r5, #10
 800320c:	e7d6      	b.n	80031bc <_puts_r+0x40>
 800320e:	0022      	movs	r2, r4
 8003210:	0028      	movs	r0, r5
 8003212:	f000 f85f 	bl	80032d4 <__swbuf_r>
 8003216:	3001      	adds	r0, #1
 8003218:	d1e8      	bne.n	80031ec <_puts_r+0x70>
 800321a:	e7cd      	b.n	80031b8 <_puts_r+0x3c>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	6022      	str	r2, [r4, #0]
 8003222:	220a      	movs	r2, #10
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e7f0      	b.n	800320a <_puts_r+0x8e>

08003228 <puts>:
 8003228:	b510      	push	{r4, lr}
 800322a:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <puts+0x10>)
 800322c:	0001      	movs	r1, r0
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	f7ff ffa4 	bl	800317c <_puts_r>
 8003234:	bd10      	pop	{r4, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	20000018 	.word	0x20000018

0800323c <__sread>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	000c      	movs	r4, r1
 8003240:	250e      	movs	r5, #14
 8003242:	5f49      	ldrsh	r1, [r1, r5]
 8003244:	f000 f98e 	bl	8003564 <_read_r>
 8003248:	2800      	cmp	r0, #0
 800324a:	db03      	blt.n	8003254 <__sread+0x18>
 800324c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800324e:	181b      	adds	r3, r3, r0
 8003250:	6563      	str	r3, [r4, #84]	@ 0x54
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	4a02      	ldr	r2, [pc, #8]	@ (8003260 <__sread+0x24>)
 8003258:	4013      	ands	r3, r2
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	e7f9      	b.n	8003252 <__sread+0x16>
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	ffffefff 	.word	0xffffefff

08003264 <__swrite>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	001f      	movs	r7, r3
 8003268:	898b      	ldrh	r3, [r1, #12]
 800326a:	0005      	movs	r5, r0
 800326c:	000c      	movs	r4, r1
 800326e:	0016      	movs	r6, r2
 8003270:	05db      	lsls	r3, r3, #23
 8003272:	d505      	bpl.n	8003280 <__swrite+0x1c>
 8003274:	230e      	movs	r3, #14
 8003276:	5ec9      	ldrsh	r1, [r1, r3]
 8003278:	2200      	movs	r2, #0
 800327a:	2302      	movs	r3, #2
 800327c:	f000 f95e 	bl	800353c <_lseek_r>
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <__swrite+0x34>)
 8003284:	0028      	movs	r0, r5
 8003286:	4013      	ands	r3, r2
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	0032      	movs	r2, r6
 800328c:	230e      	movs	r3, #14
 800328e:	5ee1      	ldrsh	r1, [r4, r3]
 8003290:	003b      	movs	r3, r7
 8003292:	f000 f97b 	bl	800358c <_write_r>
 8003296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003298:	ffffefff 	.word	0xffffefff

0800329c <__sseek>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	000c      	movs	r4, r1
 80032a0:	250e      	movs	r5, #14
 80032a2:	5f49      	ldrsh	r1, [r1, r5]
 80032a4:	f000 f94a 	bl	800353c <_lseek_r>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	1c42      	adds	r2, r0, #1
 80032ac:	d103      	bne.n	80032b6 <__sseek+0x1a>
 80032ae:	4a05      	ldr	r2, [pc, #20]	@ (80032c4 <__sseek+0x28>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	81a3      	strh	r3, [r4, #12]
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	2280      	movs	r2, #128	@ 0x80
 80032b8:	0152      	lsls	r2, r2, #5
 80032ba:	4313      	orrs	r3, r2
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	6560      	str	r0, [r4, #84]	@ 0x54
 80032c0:	e7f8      	b.n	80032b4 <__sseek+0x18>
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	ffffefff 	.word	0xffffefff

080032c8 <__sclose>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	230e      	movs	r3, #14
 80032cc:	5ec9      	ldrsh	r1, [r1, r3]
 80032ce:	f000 f923 	bl	8003518 <_close_r>
 80032d2:	bd10      	pop	{r4, pc}

080032d4 <__swbuf_r>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	0006      	movs	r6, r0
 80032d8:	000d      	movs	r5, r1
 80032da:	0014      	movs	r4, r2
 80032dc:	2800      	cmp	r0, #0
 80032de:	d004      	beq.n	80032ea <__swbuf_r+0x16>
 80032e0:	6a03      	ldr	r3, [r0, #32]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <__swbuf_r+0x16>
 80032e6:	f7ff ff15 	bl	8003114 <__sinit>
 80032ea:	69a3      	ldr	r3, [r4, #24]
 80032ec:	60a3      	str	r3, [r4, #8]
 80032ee:	89a3      	ldrh	r3, [r4, #12]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	d502      	bpl.n	80032fa <__swbuf_r+0x26>
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <__swbuf_r+0x3a>
 80032fa:	0021      	movs	r1, r4
 80032fc:	0030      	movs	r0, r6
 80032fe:	f000 f82b 	bl	8003358 <__swsetup_r>
 8003302:	2800      	cmp	r0, #0
 8003304:	d003      	beq.n	800330e <__swbuf_r+0x3a>
 8003306:	2501      	movs	r5, #1
 8003308:	426d      	negs	r5, r5
 800330a:	0028      	movs	r0, r5
 800330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330e:	6923      	ldr	r3, [r4, #16]
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	b2ef      	uxtb	r7, r5
 8003314:	1ac0      	subs	r0, r0, r3
 8003316:	6963      	ldr	r3, [r4, #20]
 8003318:	b2ed      	uxtb	r5, r5
 800331a:	4283      	cmp	r3, r0
 800331c:	dc05      	bgt.n	800332a <__swbuf_r+0x56>
 800331e:	0021      	movs	r1, r4
 8003320:	0030      	movs	r0, r6
 8003322:	f000 fb1f 	bl	8003964 <_fflush_r>
 8003326:	2800      	cmp	r0, #0
 8003328:	d1ed      	bne.n	8003306 <__swbuf_r+0x32>
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	3001      	adds	r0, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	60a3      	str	r3, [r4, #8]
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	6022      	str	r2, [r4, #0]
 8003338:	701f      	strb	r7, [r3, #0]
 800333a:	6963      	ldr	r3, [r4, #20]
 800333c:	4283      	cmp	r3, r0
 800333e:	d004      	beq.n	800334a <__swbuf_r+0x76>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	07db      	lsls	r3, r3, #31
 8003344:	d5e1      	bpl.n	800330a <__swbuf_r+0x36>
 8003346:	2d0a      	cmp	r5, #10
 8003348:	d1df      	bne.n	800330a <__swbuf_r+0x36>
 800334a:	0021      	movs	r1, r4
 800334c:	0030      	movs	r0, r6
 800334e:	f000 fb09 	bl	8003964 <_fflush_r>
 8003352:	2800      	cmp	r0, #0
 8003354:	d0d9      	beq.n	800330a <__swbuf_r+0x36>
 8003356:	e7d6      	b.n	8003306 <__swbuf_r+0x32>

08003358 <__swsetup_r>:
 8003358:	4b2d      	ldr	r3, [pc, #180]	@ (8003410 <__swsetup_r+0xb8>)
 800335a:	b570      	push	{r4, r5, r6, lr}
 800335c:	0005      	movs	r5, r0
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	000c      	movs	r4, r1
 8003362:	2800      	cmp	r0, #0
 8003364:	d004      	beq.n	8003370 <__swsetup_r+0x18>
 8003366:	6a03      	ldr	r3, [r0, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <__swsetup_r+0x18>
 800336c:	f7ff fed2 	bl	8003114 <__sinit>
 8003370:	230c      	movs	r3, #12
 8003372:	5ee2      	ldrsh	r2, [r4, r3]
 8003374:	0713      	lsls	r3, r2, #28
 8003376:	d423      	bmi.n	80033c0 <__swsetup_r+0x68>
 8003378:	06d3      	lsls	r3, r2, #27
 800337a:	d407      	bmi.n	800338c <__swsetup_r+0x34>
 800337c:	2309      	movs	r3, #9
 800337e:	602b      	str	r3, [r5, #0]
 8003380:	2340      	movs	r3, #64	@ 0x40
 8003382:	2001      	movs	r0, #1
 8003384:	4313      	orrs	r3, r2
 8003386:	81a3      	strh	r3, [r4, #12]
 8003388:	4240      	negs	r0, r0
 800338a:	e03a      	b.n	8003402 <__swsetup_r+0xaa>
 800338c:	0752      	lsls	r2, r2, #29
 800338e:	d513      	bpl.n	80033b8 <__swsetup_r+0x60>
 8003390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003392:	2900      	cmp	r1, #0
 8003394:	d008      	beq.n	80033a8 <__swsetup_r+0x50>
 8003396:	0023      	movs	r3, r4
 8003398:	3344      	adds	r3, #68	@ 0x44
 800339a:	4299      	cmp	r1, r3
 800339c:	d002      	beq.n	80033a4 <__swsetup_r+0x4c>
 800339e:	0028      	movs	r0, r5
 80033a0:	f000 f954 	bl	800364c <_free_r>
 80033a4:	2300      	movs	r3, #0
 80033a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80033a8:	2224      	movs	r2, #36	@ 0x24
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	4393      	bics	r3, r2
 80033ae:	81a3      	strh	r3, [r4, #12]
 80033b0:	2300      	movs	r3, #0
 80033b2:	6063      	str	r3, [r4, #4]
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	6023      	str	r3, [r4, #0]
 80033b8:	2308      	movs	r3, #8
 80033ba:	89a2      	ldrh	r2, [r4, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	6923      	ldr	r3, [r4, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10b      	bne.n	80033de <__swsetup_r+0x86>
 80033c6:	21a0      	movs	r1, #160	@ 0xa0
 80033c8:	2280      	movs	r2, #128	@ 0x80
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	0089      	lsls	r1, r1, #2
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	400b      	ands	r3, r1
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <__swsetup_r+0x86>
 80033d6:	0021      	movs	r1, r4
 80033d8:	0028      	movs	r0, r5
 80033da:	f000 fb29 	bl	8003a30 <__smakebuf_r>
 80033de:	230c      	movs	r3, #12
 80033e0:	5ee2      	ldrsh	r2, [r4, r3]
 80033e2:	2101      	movs	r1, #1
 80033e4:	0013      	movs	r3, r2
 80033e6:	400b      	ands	r3, r1
 80033e8:	420a      	tst	r2, r1
 80033ea:	d00b      	beq.n	8003404 <__swsetup_r+0xac>
 80033ec:	2300      	movs	r3, #0
 80033ee:	60a3      	str	r3, [r4, #8]
 80033f0:	6963      	ldr	r3, [r4, #20]
 80033f2:	425b      	negs	r3, r3
 80033f4:	61a3      	str	r3, [r4, #24]
 80033f6:	2000      	movs	r0, #0
 80033f8:	6923      	ldr	r3, [r4, #16]
 80033fa:	4283      	cmp	r3, r0
 80033fc:	d101      	bne.n	8003402 <__swsetup_r+0xaa>
 80033fe:	0613      	lsls	r3, r2, #24
 8003400:	d4be      	bmi.n	8003380 <__swsetup_r+0x28>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	0791      	lsls	r1, r2, #30
 8003406:	d400      	bmi.n	800340a <__swsetup_r+0xb2>
 8003408:	6963      	ldr	r3, [r4, #20]
 800340a:	60a3      	str	r3, [r4, #8]
 800340c:	e7f3      	b.n	80033f6 <__swsetup_r+0x9e>
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	20000018 	.word	0x20000018

08003414 <memset>:
 8003414:	0003      	movs	r3, r0
 8003416:	1882      	adds	r2, r0, r2
 8003418:	4293      	cmp	r3, r2
 800341a:	d100      	bne.n	800341e <memset+0xa>
 800341c:	4770      	bx	lr
 800341e:	7019      	strb	r1, [r3, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	e7f9      	b.n	8003418 <memset+0x4>

08003424 <strcasecmp>:
 8003424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003426:	0005      	movs	r5, r0
 8003428:	2400      	movs	r4, #0
 800342a:	2703      	movs	r7, #3
 800342c:	4e09      	ldr	r6, [pc, #36]	@ (8003454 <strcasecmp+0x30>)
 800342e:	5d2a      	ldrb	r2, [r5, r4]
 8003430:	5cb3      	ldrb	r3, [r6, r2]
 8003432:	403b      	ands	r3, r7
 8003434:	2b01      	cmp	r3, #1
 8003436:	d100      	bne.n	800343a <strcasecmp+0x16>
 8003438:	3220      	adds	r2, #32
 800343a:	5d0b      	ldrb	r3, [r1, r4]
 800343c:	5cf0      	ldrb	r0, [r6, r3]
 800343e:	4038      	ands	r0, r7
 8003440:	2801      	cmp	r0, #1
 8003442:	d100      	bne.n	8003446 <strcasecmp+0x22>
 8003444:	3320      	adds	r3, #32
 8003446:	1ad0      	subs	r0, r2, r3
 8003448:	429a      	cmp	r2, r3
 800344a:	d102      	bne.n	8003452 <strcasecmp+0x2e>
 800344c:	3401      	adds	r4, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ed      	bne.n	800342e <strcasecmp+0xa>
 8003452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003454:	080042c6 	.word	0x080042c6

08003458 <strtok>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <strtok+0x5c>)
 800345c:	0005      	movs	r5, r0
 800345e:	681f      	ldr	r7, [r3, #0]
 8003460:	000e      	movs	r6, r1
 8003462:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8003464:	2c00      	cmp	r4, #0
 8003466:	d11d      	bne.n	80034a4 <strtok+0x4c>
 8003468:	2050      	movs	r0, #80	@ 0x50
 800346a:	f000 f939 	bl	80036e0 <malloc>
 800346e:	1e02      	subs	r2, r0, #0
 8003470:	6478      	str	r0, [r7, #68]	@ 0x44
 8003472:	d104      	bne.n	800347e <strtok+0x26>
 8003474:	215b      	movs	r1, #91	@ 0x5b
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <strtok+0x60>)
 8003478:	4810      	ldr	r0, [pc, #64]	@ (80034bc <strtok+0x64>)
 800347a:	f000 f8c9 	bl	8003610 <__assert_func>
 800347e:	6004      	str	r4, [r0, #0]
 8003480:	6044      	str	r4, [r0, #4]
 8003482:	6084      	str	r4, [r0, #8]
 8003484:	60c4      	str	r4, [r0, #12]
 8003486:	6104      	str	r4, [r0, #16]
 8003488:	6144      	str	r4, [r0, #20]
 800348a:	6184      	str	r4, [r0, #24]
 800348c:	6284      	str	r4, [r0, #40]	@ 0x28
 800348e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8003490:	6304      	str	r4, [r0, #48]	@ 0x30
 8003492:	6344      	str	r4, [r0, #52]	@ 0x34
 8003494:	6384      	str	r4, [r0, #56]	@ 0x38
 8003496:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8003498:	6404      	str	r4, [r0, #64]	@ 0x40
 800349a:	6444      	str	r4, [r0, #68]	@ 0x44
 800349c:	6484      	str	r4, [r0, #72]	@ 0x48
 800349e:	64c4      	str	r4, [r0, #76]	@ 0x4c
 80034a0:	7704      	strb	r4, [r0, #28]
 80034a2:	6244      	str	r4, [r0, #36]	@ 0x24
 80034a4:	0031      	movs	r1, r6
 80034a6:	0028      	movs	r0, r5
 80034a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034aa:	2301      	movs	r3, #1
 80034ac:	f000 f808 	bl	80034c0 <__strtok_r>
 80034b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	20000018 	.word	0x20000018
 80034b8:	08004218 	.word	0x08004218
 80034bc:	0800422f 	.word	0x0800422f

080034c0 <__strtok_r>:
 80034c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c2:	1e04      	subs	r4, r0, #0
 80034c4:	d102      	bne.n	80034cc <__strtok_r+0xc>
 80034c6:	6814      	ldr	r4, [r2, #0]
 80034c8:	2c00      	cmp	r4, #0
 80034ca:	d009      	beq.n	80034e0 <__strtok_r+0x20>
 80034cc:	0020      	movs	r0, r4
 80034ce:	000e      	movs	r6, r1
 80034d0:	7805      	ldrb	r5, [r0, #0]
 80034d2:	3401      	adds	r4, #1
 80034d4:	7837      	ldrb	r7, [r6, #0]
 80034d6:	2f00      	cmp	r7, #0
 80034d8:	d104      	bne.n	80034e4 <__strtok_r+0x24>
 80034da:	2d00      	cmp	r5, #0
 80034dc:	d10d      	bne.n	80034fa <__strtok_r+0x3a>
 80034de:	6015      	str	r5, [r2, #0]
 80034e0:	2000      	movs	r0, #0
 80034e2:	e006      	b.n	80034f2 <__strtok_r+0x32>
 80034e4:	3601      	adds	r6, #1
 80034e6:	42bd      	cmp	r5, r7
 80034e8:	d1f4      	bne.n	80034d4 <__strtok_r+0x14>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ee      	bne.n	80034cc <__strtok_r+0xc>
 80034ee:	6014      	str	r4, [r2, #0]
 80034f0:	7003      	strb	r3, [r0, #0]
 80034f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f4:	3301      	adds	r3, #1
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	d102      	bne.n	8003500 <__strtok_r+0x40>
 80034fa:	000b      	movs	r3, r1
 80034fc:	7826      	ldrb	r6, [r4, #0]
 80034fe:	3401      	adds	r4, #1
 8003500:	781d      	ldrb	r5, [r3, #0]
 8003502:	42ae      	cmp	r6, r5
 8003504:	d1f6      	bne.n	80034f4 <__strtok_r+0x34>
 8003506:	2300      	movs	r3, #0
 8003508:	001d      	movs	r5, r3
 800350a:	429e      	cmp	r6, r3
 800350c:	d002      	beq.n	8003514 <__strtok_r+0x54>
 800350e:	0023      	movs	r3, r4
 8003510:	1e61      	subs	r1, r4, #1
 8003512:	700d      	strb	r5, [r1, #0]
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e7ec      	b.n	80034f2 <__strtok_r+0x32>

08003518 <_close_r>:
 8003518:	2300      	movs	r3, #0
 800351a:	b570      	push	{r4, r5, r6, lr}
 800351c:	4d06      	ldr	r5, [pc, #24]	@ (8003538 <_close_r+0x20>)
 800351e:	0004      	movs	r4, r0
 8003520:	0008      	movs	r0, r1
 8003522:	602b      	str	r3, [r5, #0]
 8003524:	f7fd fb4a 	bl	8000bbc <_close>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d103      	bne.n	8003534 <_close_r+0x1c>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d000      	beq.n	8003534 <_close_r+0x1c>
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	bd70      	pop	{r4, r5, r6, pc}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	20000484 	.word	0x20000484

0800353c <_lseek_r>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	0004      	movs	r4, r0
 8003540:	0008      	movs	r0, r1
 8003542:	0011      	movs	r1, r2
 8003544:	001a      	movs	r2, r3
 8003546:	2300      	movs	r3, #0
 8003548:	4d05      	ldr	r5, [pc, #20]	@ (8003560 <_lseek_r+0x24>)
 800354a:	602b      	str	r3, [r5, #0]
 800354c:	f7fd fb57 	bl	8000bfe <_lseek>
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	d103      	bne.n	800355c <_lseek_r+0x20>
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d000      	beq.n	800355c <_lseek_r+0x20>
 800355a:	6023      	str	r3, [r4, #0]
 800355c:	bd70      	pop	{r4, r5, r6, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	20000484 	.word	0x20000484

08003564 <_read_r>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	0004      	movs	r4, r0
 8003568:	0008      	movs	r0, r1
 800356a:	0011      	movs	r1, r2
 800356c:	001a      	movs	r2, r3
 800356e:	2300      	movs	r3, #0
 8003570:	4d05      	ldr	r5, [pc, #20]	@ (8003588 <_read_r+0x24>)
 8003572:	602b      	str	r3, [r5, #0]
 8003574:	f7fd fb05 	bl	8000b82 <_read>
 8003578:	1c43      	adds	r3, r0, #1
 800357a:	d103      	bne.n	8003584 <_read_r+0x20>
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d000      	beq.n	8003584 <_read_r+0x20>
 8003582:	6023      	str	r3, [r4, #0]
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	20000484 	.word	0x20000484

0800358c <_write_r>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	0004      	movs	r4, r0
 8003590:	0008      	movs	r0, r1
 8003592:	0011      	movs	r1, r2
 8003594:	001a      	movs	r2, r3
 8003596:	2300      	movs	r3, #0
 8003598:	4d05      	ldr	r5, [pc, #20]	@ (80035b0 <_write_r+0x24>)
 800359a:	602b      	str	r3, [r5, #0]
 800359c:	f7fc ff22 	bl	80003e4 <_write>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d103      	bne.n	80035ac <_write_r+0x20>
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d000      	beq.n	80035ac <_write_r+0x20>
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	bd70      	pop	{r4, r5, r6, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	20000484 	.word	0x20000484

080035b4 <__errno>:
 80035b4:	4b01      	ldr	r3, [pc, #4]	@ (80035bc <__errno+0x8>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	4770      	bx	lr
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	20000018 	.word	0x20000018

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	2600      	movs	r6, #0
 80035c4:	4c0c      	ldr	r4, [pc, #48]	@ (80035f8 <__libc_init_array+0x38>)
 80035c6:	4d0d      	ldr	r5, [pc, #52]	@ (80035fc <__libc_init_array+0x3c>)
 80035c8:	1b64      	subs	r4, r4, r5
 80035ca:	10a4      	asrs	r4, r4, #2
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d109      	bne.n	80035e4 <__libc_init_array+0x24>
 80035d0:	2600      	movs	r6, #0
 80035d2:	f000 fdc3 	bl	800415c <_init>
 80035d6:	4c0a      	ldr	r4, [pc, #40]	@ (8003600 <__libc_init_array+0x40>)
 80035d8:	4d0a      	ldr	r5, [pc, #40]	@ (8003604 <__libc_init_array+0x44>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d105      	bne.n	80035ee <__libc_init_array+0x2e>
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	00b3      	lsls	r3, r6, #2
 80035e6:	58eb      	ldr	r3, [r5, r3]
 80035e8:	4798      	blx	r3
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7ee      	b.n	80035cc <__libc_init_array+0xc>
 80035ee:	00b3      	lsls	r3, r6, #2
 80035f0:	58eb      	ldr	r3, [r5, r3]
 80035f2:	4798      	blx	r3
 80035f4:	3601      	adds	r6, #1
 80035f6:	e7f2      	b.n	80035de <__libc_init_array+0x1e>
 80035f8:	080043fc 	.word	0x080043fc
 80035fc:	080043fc 	.word	0x080043fc
 8003600:	08004400 	.word	0x08004400
 8003604:	080043fc 	.word	0x080043fc

08003608 <__retarget_lock_init_recursive>:
 8003608:	4770      	bx	lr

0800360a <__retarget_lock_acquire_recursive>:
 800360a:	4770      	bx	lr

0800360c <__retarget_lock_release_recursive>:
 800360c:	4770      	bx	lr
	...

08003610 <__assert_func>:
 8003610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003612:	0014      	movs	r4, r2
 8003614:	001a      	movs	r2, r3
 8003616:	4b09      	ldr	r3, [pc, #36]	@ (800363c <__assert_func+0x2c>)
 8003618:	0005      	movs	r5, r0
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	000e      	movs	r6, r1
 800361e:	68d8      	ldr	r0, [r3, #12]
 8003620:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <__assert_func+0x30>)
 8003622:	2c00      	cmp	r4, #0
 8003624:	d101      	bne.n	800362a <__assert_func+0x1a>
 8003626:	4b07      	ldr	r3, [pc, #28]	@ (8003644 <__assert_func+0x34>)
 8003628:	001c      	movs	r4, r3
 800362a:	4907      	ldr	r1, [pc, #28]	@ (8003648 <__assert_func+0x38>)
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	9402      	str	r4, [sp, #8]
 8003630:	002b      	movs	r3, r5
 8003632:	9600      	str	r6, [sp, #0]
 8003634:	f000 f9c2 	bl	80039bc <fiprintf>
 8003638:	f000 fa72 	bl	8003b20 <abort>
 800363c:	20000018 	.word	0x20000018
 8003640:	08004289 	.word	0x08004289
 8003644:	080042c4 	.word	0x080042c4
 8003648:	08004296 	.word	0x08004296

0800364c <_free_r>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	0005      	movs	r5, r0
 8003650:	1e0c      	subs	r4, r1, #0
 8003652:	d010      	beq.n	8003676 <_free_r+0x2a>
 8003654:	3c04      	subs	r4, #4
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	da00      	bge.n	800365e <_free_r+0x12>
 800365c:	18e4      	adds	r4, r4, r3
 800365e:	0028      	movs	r0, r5
 8003660:	f000 f8ea 	bl	8003838 <__malloc_lock>
 8003664:	4a1d      	ldr	r2, [pc, #116]	@ (80036dc <_free_r+0x90>)
 8003666:	6813      	ldr	r3, [r2, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d105      	bne.n	8003678 <_free_r+0x2c>
 800366c:	6063      	str	r3, [r4, #4]
 800366e:	6014      	str	r4, [r2, #0]
 8003670:	0028      	movs	r0, r5
 8003672:	f000 f8e9 	bl	8003848 <__malloc_unlock>
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	42a3      	cmp	r3, r4
 800367a:	d908      	bls.n	800368e <_free_r+0x42>
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	1821      	adds	r1, r4, r0
 8003680:	428b      	cmp	r3, r1
 8003682:	d1f3      	bne.n	800366c <_free_r+0x20>
 8003684:	6819      	ldr	r1, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	1809      	adds	r1, r1, r0
 800368a:	6021      	str	r1, [r4, #0]
 800368c:	e7ee      	b.n	800366c <_free_r+0x20>
 800368e:	001a      	movs	r2, r3
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <_free_r+0x4e>
 8003696:	42a3      	cmp	r3, r4
 8003698:	d9f9      	bls.n	800368e <_free_r+0x42>
 800369a:	6811      	ldr	r1, [r2, #0]
 800369c:	1850      	adds	r0, r2, r1
 800369e:	42a0      	cmp	r0, r4
 80036a0:	d10b      	bne.n	80036ba <_free_r+0x6e>
 80036a2:	6820      	ldr	r0, [r4, #0]
 80036a4:	1809      	adds	r1, r1, r0
 80036a6:	1850      	adds	r0, r2, r1
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	4283      	cmp	r3, r0
 80036ac:	d1e0      	bne.n	8003670 <_free_r+0x24>
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	1841      	adds	r1, r0, r1
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	6053      	str	r3, [r2, #4]
 80036b8:	e7da      	b.n	8003670 <_free_r+0x24>
 80036ba:	42a0      	cmp	r0, r4
 80036bc:	d902      	bls.n	80036c4 <_free_r+0x78>
 80036be:	230c      	movs	r3, #12
 80036c0:	602b      	str	r3, [r5, #0]
 80036c2:	e7d5      	b.n	8003670 <_free_r+0x24>
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	1821      	adds	r1, r4, r0
 80036c8:	428b      	cmp	r3, r1
 80036ca:	d103      	bne.n	80036d4 <_free_r+0x88>
 80036cc:	6819      	ldr	r1, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	1809      	adds	r1, r1, r0
 80036d2:	6021      	str	r1, [r4, #0]
 80036d4:	6063      	str	r3, [r4, #4]
 80036d6:	6054      	str	r4, [r2, #4]
 80036d8:	e7ca      	b.n	8003670 <_free_r+0x24>
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	20000490 	.word	0x20000490

080036e0 <malloc>:
 80036e0:	b510      	push	{r4, lr}
 80036e2:	4b03      	ldr	r3, [pc, #12]	@ (80036f0 <malloc+0x10>)
 80036e4:	0001      	movs	r1, r0
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	f000 f826 	bl	8003738 <_malloc_r>
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	20000018 	.word	0x20000018

080036f4 <sbrk_aligned>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003734 <sbrk_aligned+0x40>)
 80036f8:	000d      	movs	r5, r1
 80036fa:	6831      	ldr	r1, [r6, #0]
 80036fc:	0004      	movs	r4, r0
 80036fe:	2900      	cmp	r1, #0
 8003700:	d102      	bne.n	8003708 <sbrk_aligned+0x14>
 8003702:	f000 f9fb 	bl	8003afc <_sbrk_r>
 8003706:	6030      	str	r0, [r6, #0]
 8003708:	0029      	movs	r1, r5
 800370a:	0020      	movs	r0, r4
 800370c:	f000 f9f6 	bl	8003afc <_sbrk_r>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d103      	bne.n	800371c <sbrk_aligned+0x28>
 8003714:	2501      	movs	r5, #1
 8003716:	426d      	negs	r5, r5
 8003718:	0028      	movs	r0, r5
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	2303      	movs	r3, #3
 800371e:	1cc5      	adds	r5, r0, #3
 8003720:	439d      	bics	r5, r3
 8003722:	42a8      	cmp	r0, r5
 8003724:	d0f8      	beq.n	8003718 <sbrk_aligned+0x24>
 8003726:	1a29      	subs	r1, r5, r0
 8003728:	0020      	movs	r0, r4
 800372a:	f000 f9e7 	bl	8003afc <_sbrk_r>
 800372e:	3001      	adds	r0, #1
 8003730:	d1f2      	bne.n	8003718 <sbrk_aligned+0x24>
 8003732:	e7ef      	b.n	8003714 <sbrk_aligned+0x20>
 8003734:	2000048c 	.word	0x2000048c

08003738 <_malloc_r>:
 8003738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800373a:	2203      	movs	r2, #3
 800373c:	1ccb      	adds	r3, r1, #3
 800373e:	4393      	bics	r3, r2
 8003740:	3308      	adds	r3, #8
 8003742:	0005      	movs	r5, r0
 8003744:	001f      	movs	r7, r3
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d234      	bcs.n	80037b4 <_malloc_r+0x7c>
 800374a:	270c      	movs	r7, #12
 800374c:	42b9      	cmp	r1, r7
 800374e:	d833      	bhi.n	80037b8 <_malloc_r+0x80>
 8003750:	0028      	movs	r0, r5
 8003752:	f000 f871 	bl	8003838 <__malloc_lock>
 8003756:	4e37      	ldr	r6, [pc, #220]	@ (8003834 <_malloc_r+0xfc>)
 8003758:	6833      	ldr	r3, [r6, #0]
 800375a:	001c      	movs	r4, r3
 800375c:	2c00      	cmp	r4, #0
 800375e:	d12f      	bne.n	80037c0 <_malloc_r+0x88>
 8003760:	0039      	movs	r1, r7
 8003762:	0028      	movs	r0, r5
 8003764:	f7ff ffc6 	bl	80036f4 <sbrk_aligned>
 8003768:	0004      	movs	r4, r0
 800376a:	1c43      	adds	r3, r0, #1
 800376c:	d15f      	bne.n	800382e <_malloc_r+0xf6>
 800376e:	6834      	ldr	r4, [r6, #0]
 8003770:	9400      	str	r4, [sp, #0]
 8003772:	9b00      	ldr	r3, [sp, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d14a      	bne.n	800380e <_malloc_r+0xd6>
 8003778:	2c00      	cmp	r4, #0
 800377a:	d052      	beq.n	8003822 <_malloc_r+0xea>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	0028      	movs	r0, r5
 8003780:	18e3      	adds	r3, r4, r3
 8003782:	9900      	ldr	r1, [sp, #0]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	f000 f9b9 	bl	8003afc <_sbrk_r>
 800378a:	9b01      	ldr	r3, [sp, #4]
 800378c:	4283      	cmp	r3, r0
 800378e:	d148      	bne.n	8003822 <_malloc_r+0xea>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	0028      	movs	r0, r5
 8003794:	1aff      	subs	r7, r7, r3
 8003796:	0039      	movs	r1, r7
 8003798:	f7ff ffac 	bl	80036f4 <sbrk_aligned>
 800379c:	3001      	adds	r0, #1
 800379e:	d040      	beq.n	8003822 <_malloc_r+0xea>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	19db      	adds	r3, r3, r7
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	6833      	ldr	r3, [r6, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	2a00      	cmp	r2, #0
 80037ac:	d133      	bne.n	8003816 <_malloc_r+0xde>
 80037ae:	9b00      	ldr	r3, [sp, #0]
 80037b0:	6033      	str	r3, [r6, #0]
 80037b2:	e019      	b.n	80037e8 <_malloc_r+0xb0>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	dac9      	bge.n	800374c <_malloc_r+0x14>
 80037b8:	230c      	movs	r3, #12
 80037ba:	602b      	str	r3, [r5, #0]
 80037bc:	2000      	movs	r0, #0
 80037be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037c0:	6821      	ldr	r1, [r4, #0]
 80037c2:	1bc9      	subs	r1, r1, r7
 80037c4:	d420      	bmi.n	8003808 <_malloc_r+0xd0>
 80037c6:	290b      	cmp	r1, #11
 80037c8:	d90a      	bls.n	80037e0 <_malloc_r+0xa8>
 80037ca:	19e2      	adds	r2, r4, r7
 80037cc:	6027      	str	r7, [r4, #0]
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	d104      	bne.n	80037dc <_malloc_r+0xa4>
 80037d2:	6032      	str	r2, [r6, #0]
 80037d4:	6863      	ldr	r3, [r4, #4]
 80037d6:	6011      	str	r1, [r2, #0]
 80037d8:	6053      	str	r3, [r2, #4]
 80037da:	e005      	b.n	80037e8 <_malloc_r+0xb0>
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	e7f9      	b.n	80037d4 <_malloc_r+0x9c>
 80037e0:	6862      	ldr	r2, [r4, #4]
 80037e2:	42a3      	cmp	r3, r4
 80037e4:	d10e      	bne.n	8003804 <_malloc_r+0xcc>
 80037e6:	6032      	str	r2, [r6, #0]
 80037e8:	0028      	movs	r0, r5
 80037ea:	f000 f82d 	bl	8003848 <__malloc_unlock>
 80037ee:	0020      	movs	r0, r4
 80037f0:	2207      	movs	r2, #7
 80037f2:	300b      	adds	r0, #11
 80037f4:	1d23      	adds	r3, r4, #4
 80037f6:	4390      	bics	r0, r2
 80037f8:	1ac2      	subs	r2, r0, r3
 80037fa:	4298      	cmp	r0, r3
 80037fc:	d0df      	beq.n	80037be <_malloc_r+0x86>
 80037fe:	1a1b      	subs	r3, r3, r0
 8003800:	50a3      	str	r3, [r4, r2]
 8003802:	e7dc      	b.n	80037be <_malloc_r+0x86>
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	e7ef      	b.n	80037e8 <_malloc_r+0xb0>
 8003808:	0023      	movs	r3, r4
 800380a:	6864      	ldr	r4, [r4, #4]
 800380c:	e7a6      	b.n	800375c <_malloc_r+0x24>
 800380e:	9c00      	ldr	r4, [sp, #0]
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	e7ad      	b.n	8003772 <_malloc_r+0x3a>
 8003816:	001a      	movs	r2, r3
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	42a3      	cmp	r3, r4
 800381c:	d1fb      	bne.n	8003816 <_malloc_r+0xde>
 800381e:	2300      	movs	r3, #0
 8003820:	e7da      	b.n	80037d8 <_malloc_r+0xa0>
 8003822:	230c      	movs	r3, #12
 8003824:	0028      	movs	r0, r5
 8003826:	602b      	str	r3, [r5, #0]
 8003828:	f000 f80e 	bl	8003848 <__malloc_unlock>
 800382c:	e7c6      	b.n	80037bc <_malloc_r+0x84>
 800382e:	6007      	str	r7, [r0, #0]
 8003830:	e7da      	b.n	80037e8 <_malloc_r+0xb0>
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	20000490 	.word	0x20000490

08003838 <__malloc_lock>:
 8003838:	b510      	push	{r4, lr}
 800383a:	4802      	ldr	r0, [pc, #8]	@ (8003844 <__malloc_lock+0xc>)
 800383c:	f7ff fee5 	bl	800360a <__retarget_lock_acquire_recursive>
 8003840:	bd10      	pop	{r4, pc}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	20000488 	.word	0x20000488

08003848 <__malloc_unlock>:
 8003848:	b510      	push	{r4, lr}
 800384a:	4802      	ldr	r0, [pc, #8]	@ (8003854 <__malloc_unlock+0xc>)
 800384c:	f7ff fede 	bl	800360c <__retarget_lock_release_recursive>
 8003850:	bd10      	pop	{r4, pc}
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	20000488 	.word	0x20000488

08003858 <__sflush_r>:
 8003858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800385a:	220c      	movs	r2, #12
 800385c:	5e8b      	ldrsh	r3, [r1, r2]
 800385e:	0005      	movs	r5, r0
 8003860:	000c      	movs	r4, r1
 8003862:	071a      	lsls	r2, r3, #28
 8003864:	d456      	bmi.n	8003914 <__sflush_r+0xbc>
 8003866:	684a      	ldr	r2, [r1, #4]
 8003868:	2a00      	cmp	r2, #0
 800386a:	dc02      	bgt.n	8003872 <__sflush_r+0x1a>
 800386c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800386e:	2a00      	cmp	r2, #0
 8003870:	dd4e      	ble.n	8003910 <__sflush_r+0xb8>
 8003872:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003874:	2f00      	cmp	r7, #0
 8003876:	d04b      	beq.n	8003910 <__sflush_r+0xb8>
 8003878:	2200      	movs	r2, #0
 800387a:	2080      	movs	r0, #128	@ 0x80
 800387c:	682e      	ldr	r6, [r5, #0]
 800387e:	602a      	str	r2, [r5, #0]
 8003880:	001a      	movs	r2, r3
 8003882:	0140      	lsls	r0, r0, #5
 8003884:	6a21      	ldr	r1, [r4, #32]
 8003886:	4002      	ands	r2, r0
 8003888:	4203      	tst	r3, r0
 800388a:	d033      	beq.n	80038f4 <__sflush_r+0x9c>
 800388c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	075b      	lsls	r3, r3, #29
 8003892:	d506      	bpl.n	80038a2 <__sflush_r+0x4a>
 8003894:	6863      	ldr	r3, [r4, #4]
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <__sflush_r+0x4a>
 800389e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038a0:	1ad2      	subs	r2, r2, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	0028      	movs	r0, r5
 80038a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80038a8:	6a21      	ldr	r1, [r4, #32]
 80038aa:	47b8      	blx	r7
 80038ac:	89a2      	ldrh	r2, [r4, #12]
 80038ae:	1c43      	adds	r3, r0, #1
 80038b0:	d106      	bne.n	80038c0 <__sflush_r+0x68>
 80038b2:	6829      	ldr	r1, [r5, #0]
 80038b4:	291d      	cmp	r1, #29
 80038b6:	d846      	bhi.n	8003946 <__sflush_r+0xee>
 80038b8:	4b29      	ldr	r3, [pc, #164]	@ (8003960 <__sflush_r+0x108>)
 80038ba:	410b      	asrs	r3, r1
 80038bc:	07db      	lsls	r3, r3, #31
 80038be:	d442      	bmi.n	8003946 <__sflush_r+0xee>
 80038c0:	2300      	movs	r3, #0
 80038c2:	6063      	str	r3, [r4, #4]
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	04d2      	lsls	r2, r2, #19
 80038ca:	d505      	bpl.n	80038d8 <__sflush_r+0x80>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d102      	bne.n	80038d6 <__sflush_r+0x7e>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d100      	bne.n	80038d8 <__sflush_r+0x80>
 80038d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80038d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038da:	602e      	str	r6, [r5, #0]
 80038dc:	2900      	cmp	r1, #0
 80038de:	d017      	beq.n	8003910 <__sflush_r+0xb8>
 80038e0:	0023      	movs	r3, r4
 80038e2:	3344      	adds	r3, #68	@ 0x44
 80038e4:	4299      	cmp	r1, r3
 80038e6:	d002      	beq.n	80038ee <__sflush_r+0x96>
 80038e8:	0028      	movs	r0, r5
 80038ea:	f7ff feaf 	bl	800364c <_free_r>
 80038ee:	2300      	movs	r3, #0
 80038f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80038f2:	e00d      	b.n	8003910 <__sflush_r+0xb8>
 80038f4:	2301      	movs	r3, #1
 80038f6:	0028      	movs	r0, r5
 80038f8:	47b8      	blx	r7
 80038fa:	0002      	movs	r2, r0
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d1c6      	bne.n	800388e <__sflush_r+0x36>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0c3      	beq.n	800388e <__sflush_r+0x36>
 8003906:	2b1d      	cmp	r3, #29
 8003908:	d001      	beq.n	800390e <__sflush_r+0xb6>
 800390a:	2b16      	cmp	r3, #22
 800390c:	d11a      	bne.n	8003944 <__sflush_r+0xec>
 800390e:	602e      	str	r6, [r5, #0]
 8003910:	2000      	movs	r0, #0
 8003912:	e01e      	b.n	8003952 <__sflush_r+0xfa>
 8003914:	690e      	ldr	r6, [r1, #16]
 8003916:	2e00      	cmp	r6, #0
 8003918:	d0fa      	beq.n	8003910 <__sflush_r+0xb8>
 800391a:	680f      	ldr	r7, [r1, #0]
 800391c:	600e      	str	r6, [r1, #0]
 800391e:	1bba      	subs	r2, r7, r6
 8003920:	9201      	str	r2, [sp, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	079b      	lsls	r3, r3, #30
 8003926:	d100      	bne.n	800392a <__sflush_r+0xd2>
 8003928:	694a      	ldr	r2, [r1, #20]
 800392a:	60a2      	str	r2, [r4, #8]
 800392c:	9b01      	ldr	r3, [sp, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	ddee      	ble.n	8003910 <__sflush_r+0xb8>
 8003932:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003934:	0032      	movs	r2, r6
 8003936:	001f      	movs	r7, r3
 8003938:	0028      	movs	r0, r5
 800393a:	9b01      	ldr	r3, [sp, #4]
 800393c:	6a21      	ldr	r1, [r4, #32]
 800393e:	47b8      	blx	r7
 8003940:	2800      	cmp	r0, #0
 8003942:	dc07      	bgt.n	8003954 <__sflush_r+0xfc>
 8003944:	89a2      	ldrh	r2, [r4, #12]
 8003946:	2340      	movs	r3, #64	@ 0x40
 8003948:	2001      	movs	r0, #1
 800394a:	4313      	orrs	r3, r2
 800394c:	b21b      	sxth	r3, r3
 800394e:	81a3      	strh	r3, [r4, #12]
 8003950:	4240      	negs	r0, r0
 8003952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003954:	9b01      	ldr	r3, [sp, #4]
 8003956:	1836      	adds	r6, r6, r0
 8003958:	1a1b      	subs	r3, r3, r0
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	e7e6      	b.n	800392c <__sflush_r+0xd4>
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	dfbffffe 	.word	0xdfbffffe

08003964 <_fflush_r>:
 8003964:	690b      	ldr	r3, [r1, #16]
 8003966:	b570      	push	{r4, r5, r6, lr}
 8003968:	0005      	movs	r5, r0
 800396a:	000c      	movs	r4, r1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <_fflush_r+0x12>
 8003970:	2500      	movs	r5, #0
 8003972:	0028      	movs	r0, r5
 8003974:	bd70      	pop	{r4, r5, r6, pc}
 8003976:	2800      	cmp	r0, #0
 8003978:	d004      	beq.n	8003984 <_fflush_r+0x20>
 800397a:	6a03      	ldr	r3, [r0, #32]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <_fflush_r+0x20>
 8003980:	f7ff fbc8 	bl	8003114 <__sinit>
 8003984:	220c      	movs	r2, #12
 8003986:	5ea3      	ldrsh	r3, [r4, r2]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f1      	beq.n	8003970 <_fflush_r+0xc>
 800398c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800398e:	07d2      	lsls	r2, r2, #31
 8003990:	d404      	bmi.n	800399c <_fflush_r+0x38>
 8003992:	059b      	lsls	r3, r3, #22
 8003994:	d402      	bmi.n	800399c <_fflush_r+0x38>
 8003996:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003998:	f7ff fe37 	bl	800360a <__retarget_lock_acquire_recursive>
 800399c:	0028      	movs	r0, r5
 800399e:	0021      	movs	r1, r4
 80039a0:	f7ff ff5a 	bl	8003858 <__sflush_r>
 80039a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039a6:	0005      	movs	r5, r0
 80039a8:	07db      	lsls	r3, r3, #31
 80039aa:	d4e2      	bmi.n	8003972 <_fflush_r+0xe>
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	059b      	lsls	r3, r3, #22
 80039b0:	d4df      	bmi.n	8003972 <_fflush_r+0xe>
 80039b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039b4:	f7ff fe2a 	bl	800360c <__retarget_lock_release_recursive>
 80039b8:	e7db      	b.n	8003972 <_fflush_r+0xe>
	...

080039bc <fiprintf>:
 80039bc:	b40e      	push	{r1, r2, r3}
 80039be:	b517      	push	{r0, r1, r2, r4, lr}
 80039c0:	4c05      	ldr	r4, [pc, #20]	@ (80039d8 <fiprintf+0x1c>)
 80039c2:	ab05      	add	r3, sp, #20
 80039c4:	cb04      	ldmia	r3!, {r2}
 80039c6:	0001      	movs	r1, r0
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	f000 f8d6 	bl	8003b7c <_vfiprintf_r>
 80039d0:	bc1e      	pop	{r1, r2, r3, r4}
 80039d2:	bc08      	pop	{r3}
 80039d4:	b003      	add	sp, #12
 80039d6:	4718      	bx	r3
 80039d8:	20000018 	.word	0x20000018

080039dc <__swhatbuf_r>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	000e      	movs	r6, r1
 80039e0:	001d      	movs	r5, r3
 80039e2:	230e      	movs	r3, #14
 80039e4:	5ec9      	ldrsh	r1, [r1, r3]
 80039e6:	0014      	movs	r4, r2
 80039e8:	b096      	sub	sp, #88	@ 0x58
 80039ea:	2900      	cmp	r1, #0
 80039ec:	da0c      	bge.n	8003a08 <__swhatbuf_r+0x2c>
 80039ee:	89b2      	ldrh	r2, [r6, #12]
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	0011      	movs	r1, r2
 80039f4:	4019      	ands	r1, r3
 80039f6:	421a      	tst	r2, r3
 80039f8:	d114      	bne.n	8003a24 <__swhatbuf_r+0x48>
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	2000      	movs	r0, #0
 8003a00:	6029      	str	r1, [r5, #0]
 8003a02:	6023      	str	r3, [r4, #0]
 8003a04:	b016      	add	sp, #88	@ 0x58
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	466a      	mov	r2, sp
 8003a0a:	f000 f853 	bl	8003ab4 <_fstat_r>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	dbed      	blt.n	80039ee <__swhatbuf_r+0x12>
 8003a12:	23f0      	movs	r3, #240	@ 0xf0
 8003a14:	9901      	ldr	r1, [sp, #4]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	4019      	ands	r1, r3
 8003a1a:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <__swhatbuf_r+0x50>)
 8003a1c:	18c9      	adds	r1, r1, r3
 8003a1e:	424b      	negs	r3, r1
 8003a20:	4159      	adcs	r1, r3
 8003a22:	e7ea      	b.n	80039fa <__swhatbuf_r+0x1e>
 8003a24:	2100      	movs	r1, #0
 8003a26:	2340      	movs	r3, #64	@ 0x40
 8003a28:	e7e9      	b.n	80039fe <__swhatbuf_r+0x22>
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	ffffe000 	.word	0xffffe000

08003a30 <__smakebuf_r>:
 8003a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a32:	2602      	movs	r6, #2
 8003a34:	898b      	ldrh	r3, [r1, #12]
 8003a36:	0005      	movs	r5, r0
 8003a38:	000c      	movs	r4, r1
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	4233      	tst	r3, r6
 8003a3e:	d007      	beq.n	8003a50 <__smakebuf_r+0x20>
 8003a40:	0023      	movs	r3, r4
 8003a42:	3347      	adds	r3, #71	@ 0x47
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	6123      	str	r3, [r4, #16]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	6163      	str	r3, [r4, #20]
 8003a4c:	b005      	add	sp, #20
 8003a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a50:	ab03      	add	r3, sp, #12
 8003a52:	aa02      	add	r2, sp, #8
 8003a54:	f7ff ffc2 	bl	80039dc <__swhatbuf_r>
 8003a58:	9f02      	ldr	r7, [sp, #8]
 8003a5a:	9001      	str	r0, [sp, #4]
 8003a5c:	0039      	movs	r1, r7
 8003a5e:	0028      	movs	r0, r5
 8003a60:	f7ff fe6a 	bl	8003738 <_malloc_r>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d108      	bne.n	8003a7a <__smakebuf_r+0x4a>
 8003a68:	220c      	movs	r2, #12
 8003a6a:	5ea3      	ldrsh	r3, [r4, r2]
 8003a6c:	059a      	lsls	r2, r3, #22
 8003a6e:	d4ed      	bmi.n	8003a4c <__smakebuf_r+0x1c>
 8003a70:	2203      	movs	r2, #3
 8003a72:	4393      	bics	r3, r2
 8003a74:	431e      	orrs	r6, r3
 8003a76:	81a6      	strh	r6, [r4, #12]
 8003a78:	e7e2      	b.n	8003a40 <__smakebuf_r+0x10>
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	89a2      	ldrh	r2, [r4, #12]
 8003a7e:	6020      	str	r0, [r4, #0]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	6120      	str	r0, [r4, #16]
 8003a88:	6167      	str	r7, [r4, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <__smakebuf_r+0x78>
 8003a8e:	0028      	movs	r0, r5
 8003a90:	230e      	movs	r3, #14
 8003a92:	5ee1      	ldrsh	r1, [r4, r3]
 8003a94:	f000 f820 	bl	8003ad8 <_isatty_r>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d005      	beq.n	8003aa8 <__smakebuf_r+0x78>
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	89a2      	ldrh	r2, [r4, #12]
 8003aa0:	439a      	bics	r2, r3
 8003aa2:	3b02      	subs	r3, #2
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	81a3      	strh	r3, [r4, #12]
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	9a01      	ldr	r2, [sp, #4]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	e7cc      	b.n	8003a4c <__smakebuf_r+0x1c>
	...

08003ab4 <_fstat_r>:
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	b570      	push	{r4, r5, r6, lr}
 8003ab8:	4d06      	ldr	r5, [pc, #24]	@ (8003ad4 <_fstat_r+0x20>)
 8003aba:	0004      	movs	r4, r0
 8003abc:	0008      	movs	r0, r1
 8003abe:	0011      	movs	r1, r2
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	f7fd f885 	bl	8000bd0 <_fstat>
 8003ac6:	1c43      	adds	r3, r0, #1
 8003ac8:	d103      	bne.n	8003ad2 <_fstat_r+0x1e>
 8003aca:	682b      	ldr	r3, [r5, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d000      	beq.n	8003ad2 <_fstat_r+0x1e>
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	20000484 	.word	0x20000484

08003ad8 <_isatty_r>:
 8003ad8:	2300      	movs	r3, #0
 8003ada:	b570      	push	{r4, r5, r6, lr}
 8003adc:	4d06      	ldr	r5, [pc, #24]	@ (8003af8 <_isatty_r+0x20>)
 8003ade:	0004      	movs	r4, r0
 8003ae0:	0008      	movs	r0, r1
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	f7fd f882 	bl	8000bec <_isatty>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d103      	bne.n	8003af4 <_isatty_r+0x1c>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d000      	beq.n	8003af4 <_isatty_r+0x1c>
 8003af2:	6023      	str	r3, [r4, #0]
 8003af4:	bd70      	pop	{r4, r5, r6, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	20000484 	.word	0x20000484

08003afc <_sbrk_r>:
 8003afc:	2300      	movs	r3, #0
 8003afe:	b570      	push	{r4, r5, r6, lr}
 8003b00:	4d06      	ldr	r5, [pc, #24]	@ (8003b1c <_sbrk_r+0x20>)
 8003b02:	0004      	movs	r4, r0
 8003b04:	0008      	movs	r0, r1
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f7fd f884 	bl	8000c14 <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_sbrk_r+0x1c>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d000      	beq.n	8003b18 <_sbrk_r+0x1c>
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	20000484 	.word	0x20000484

08003b20 <abort>:
 8003b20:	2006      	movs	r0, #6
 8003b22:	b510      	push	{r4, lr}
 8003b24:	f000 faee 	bl	8004104 <raise>
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7fd f81d 	bl	8000b68 <_exit>

08003b2e <__sfputc_r>:
 8003b2e:	6893      	ldr	r3, [r2, #8]
 8003b30:	b510      	push	{r4, lr}
 8003b32:	3b01      	subs	r3, #1
 8003b34:	6093      	str	r3, [r2, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da04      	bge.n	8003b44 <__sfputc_r+0x16>
 8003b3a:	6994      	ldr	r4, [r2, #24]
 8003b3c:	42a3      	cmp	r3, r4
 8003b3e:	db07      	blt.n	8003b50 <__sfputc_r+0x22>
 8003b40:	290a      	cmp	r1, #10
 8003b42:	d005      	beq.n	8003b50 <__sfputc_r+0x22>
 8003b44:	6813      	ldr	r3, [r2, #0]
 8003b46:	1c58      	adds	r0, r3, #1
 8003b48:	6010      	str	r0, [r2, #0]
 8003b4a:	7019      	strb	r1, [r3, #0]
 8003b4c:	0008      	movs	r0, r1
 8003b4e:	bd10      	pop	{r4, pc}
 8003b50:	f7ff fbc0 	bl	80032d4 <__swbuf_r>
 8003b54:	0001      	movs	r1, r0
 8003b56:	e7f9      	b.n	8003b4c <__sfputc_r+0x1e>

08003b58 <__sfputs_r>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	0006      	movs	r6, r0
 8003b5c:	000f      	movs	r7, r1
 8003b5e:	0014      	movs	r4, r2
 8003b60:	18d5      	adds	r5, r2, r3
 8003b62:	42ac      	cmp	r4, r5
 8003b64:	d101      	bne.n	8003b6a <__sfputs_r+0x12>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e007      	b.n	8003b7a <__sfputs_r+0x22>
 8003b6a:	7821      	ldrb	r1, [r4, #0]
 8003b6c:	003a      	movs	r2, r7
 8003b6e:	0030      	movs	r0, r6
 8003b70:	f7ff ffdd 	bl	8003b2e <__sfputc_r>
 8003b74:	3401      	adds	r4, #1
 8003b76:	1c43      	adds	r3, r0, #1
 8003b78:	d1f3      	bne.n	8003b62 <__sfputs_r+0xa>
 8003b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b7c <_vfiprintf_r>:
 8003b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7e:	b0a1      	sub	sp, #132	@ 0x84
 8003b80:	000f      	movs	r7, r1
 8003b82:	0015      	movs	r5, r2
 8003b84:	001e      	movs	r6, r3
 8003b86:	9003      	str	r0, [sp, #12]
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d004      	beq.n	8003b96 <_vfiprintf_r+0x1a>
 8003b8c:	6a03      	ldr	r3, [r0, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <_vfiprintf_r+0x1a>
 8003b92:	f7ff fabf 	bl	8003114 <__sinit>
 8003b96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b98:	07db      	lsls	r3, r3, #31
 8003b9a:	d405      	bmi.n	8003ba8 <_vfiprintf_r+0x2c>
 8003b9c:	89bb      	ldrh	r3, [r7, #12]
 8003b9e:	059b      	lsls	r3, r3, #22
 8003ba0:	d402      	bmi.n	8003ba8 <_vfiprintf_r+0x2c>
 8003ba2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003ba4:	f7ff fd31 	bl	800360a <__retarget_lock_acquire_recursive>
 8003ba8:	89bb      	ldrh	r3, [r7, #12]
 8003baa:	071b      	lsls	r3, r3, #28
 8003bac:	d502      	bpl.n	8003bb4 <_vfiprintf_r+0x38>
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d113      	bne.n	8003bdc <_vfiprintf_r+0x60>
 8003bb4:	0039      	movs	r1, r7
 8003bb6:	9803      	ldr	r0, [sp, #12]
 8003bb8:	f7ff fbce 	bl	8003358 <__swsetup_r>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d00d      	beq.n	8003bdc <_vfiprintf_r+0x60>
 8003bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc2:	07db      	lsls	r3, r3, #31
 8003bc4:	d503      	bpl.n	8003bce <_vfiprintf_r+0x52>
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	4240      	negs	r0, r0
 8003bca:	b021      	add	sp, #132	@ 0x84
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bce:	89bb      	ldrh	r3, [r7, #12]
 8003bd0:	059b      	lsls	r3, r3, #22
 8003bd2:	d4f8      	bmi.n	8003bc6 <_vfiprintf_r+0x4a>
 8003bd4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003bd6:	f7ff fd19 	bl	800360c <__retarget_lock_release_recursive>
 8003bda:	e7f4      	b.n	8003bc6 <_vfiprintf_r+0x4a>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	ac08      	add	r4, sp, #32
 8003be0:	6163      	str	r3, [r4, #20]
 8003be2:	3320      	adds	r3, #32
 8003be4:	7663      	strb	r3, [r4, #25]
 8003be6:	3310      	adds	r3, #16
 8003be8:	76a3      	strb	r3, [r4, #26]
 8003bea:	9607      	str	r6, [sp, #28]
 8003bec:	002e      	movs	r6, r5
 8003bee:	7833      	ldrb	r3, [r6, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <_vfiprintf_r+0x7c>
 8003bf4:	2b25      	cmp	r3, #37	@ 0x25
 8003bf6:	d148      	bne.n	8003c8a <_vfiprintf_r+0x10e>
 8003bf8:	1b73      	subs	r3, r6, r5
 8003bfa:	9305      	str	r3, [sp, #20]
 8003bfc:	42ae      	cmp	r6, r5
 8003bfe:	d00b      	beq.n	8003c18 <_vfiprintf_r+0x9c>
 8003c00:	002a      	movs	r2, r5
 8003c02:	0039      	movs	r1, r7
 8003c04:	9803      	ldr	r0, [sp, #12]
 8003c06:	f7ff ffa7 	bl	8003b58 <__sfputs_r>
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d100      	bne.n	8003c10 <_vfiprintf_r+0x94>
 8003c0e:	e0ae      	b.n	8003d6e <_vfiprintf_r+0x1f2>
 8003c10:	6963      	ldr	r3, [r4, #20]
 8003c12:	9a05      	ldr	r2, [sp, #20]
 8003c14:	189b      	adds	r3, r3, r2
 8003c16:	6163      	str	r3, [r4, #20]
 8003c18:	7833      	ldrb	r3, [r6, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d100      	bne.n	8003c20 <_vfiprintf_r+0xa4>
 8003c1e:	e0a6      	b.n	8003d6e <_vfiprintf_r+0x1f2>
 8003c20:	2201      	movs	r2, #1
 8003c22:	2300      	movs	r3, #0
 8003c24:	4252      	negs	r2, r2
 8003c26:	6062      	str	r2, [r4, #4]
 8003c28:	a904      	add	r1, sp, #16
 8003c2a:	3254      	adds	r2, #84	@ 0x54
 8003c2c:	1852      	adds	r2, r2, r1
 8003c2e:	1c75      	adds	r5, r6, #1
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	60e3      	str	r3, [r4, #12]
 8003c34:	60a3      	str	r3, [r4, #8]
 8003c36:	7013      	strb	r3, [r2, #0]
 8003c38:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003c3a:	4b59      	ldr	r3, [pc, #356]	@ (8003da0 <_vfiprintf_r+0x224>)
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	0018      	movs	r0, r3
 8003c40:	7829      	ldrb	r1, [r5, #0]
 8003c42:	9305      	str	r3, [sp, #20]
 8003c44:	f000 fa7e 	bl	8004144 <memchr>
 8003c48:	1c6e      	adds	r6, r5, #1
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d11f      	bne.n	8003c8e <_vfiprintf_r+0x112>
 8003c4e:	6822      	ldr	r2, [r4, #0]
 8003c50:	06d3      	lsls	r3, r2, #27
 8003c52:	d504      	bpl.n	8003c5e <_vfiprintf_r+0xe2>
 8003c54:	2353      	movs	r3, #83	@ 0x53
 8003c56:	a904      	add	r1, sp, #16
 8003c58:	185b      	adds	r3, r3, r1
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	7019      	strb	r1, [r3, #0]
 8003c5e:	0713      	lsls	r3, r2, #28
 8003c60:	d504      	bpl.n	8003c6c <_vfiprintf_r+0xf0>
 8003c62:	2353      	movs	r3, #83	@ 0x53
 8003c64:	a904      	add	r1, sp, #16
 8003c66:	185b      	adds	r3, r3, r1
 8003c68:	212b      	movs	r1, #43	@ 0x2b
 8003c6a:	7019      	strb	r1, [r3, #0]
 8003c6c:	782b      	ldrb	r3, [r5, #0]
 8003c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c70:	d016      	beq.n	8003ca0 <_vfiprintf_r+0x124>
 8003c72:	002e      	movs	r6, r5
 8003c74:	2100      	movs	r1, #0
 8003c76:	200a      	movs	r0, #10
 8003c78:	68e3      	ldr	r3, [r4, #12]
 8003c7a:	7832      	ldrb	r2, [r6, #0]
 8003c7c:	1c75      	adds	r5, r6, #1
 8003c7e:	3a30      	subs	r2, #48	@ 0x30
 8003c80:	2a09      	cmp	r2, #9
 8003c82:	d950      	bls.n	8003d26 <_vfiprintf_r+0x1aa>
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d111      	bne.n	8003cac <_vfiprintf_r+0x130>
 8003c88:	e017      	b.n	8003cba <_vfiprintf_r+0x13e>
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7af      	b.n	8003bee <_vfiprintf_r+0x72>
 8003c8e:	9b05      	ldr	r3, [sp, #20]
 8003c90:	6822      	ldr	r2, [r4, #0]
 8003c92:	1ac0      	subs	r0, r0, r3
 8003c94:	2301      	movs	r3, #1
 8003c96:	4083      	lsls	r3, r0
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	0035      	movs	r5, r6
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	e7cc      	b.n	8003c3a <_vfiprintf_r+0xbe>
 8003ca0:	9b07      	ldr	r3, [sp, #28]
 8003ca2:	1d19      	adds	r1, r3, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	9107      	str	r1, [sp, #28]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	db01      	blt.n	8003cb0 <_vfiprintf_r+0x134>
 8003cac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cae:	e004      	b.n	8003cba <_vfiprintf_r+0x13e>
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	60e3      	str	r3, [r4, #12]
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	7833      	ldrb	r3, [r6, #0]
 8003cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cbe:	d10c      	bne.n	8003cda <_vfiprintf_r+0x15e>
 8003cc0:	7873      	ldrb	r3, [r6, #1]
 8003cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc4:	d134      	bne.n	8003d30 <_vfiprintf_r+0x1b4>
 8003cc6:	9b07      	ldr	r3, [sp, #28]
 8003cc8:	3602      	adds	r6, #2
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	9207      	str	r2, [sp, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da01      	bge.n	8003cd8 <_vfiprintf_r+0x15c>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	425b      	negs	r3, r3
 8003cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cda:	4d32      	ldr	r5, [pc, #200]	@ (8003da4 <_vfiprintf_r+0x228>)
 8003cdc:	2203      	movs	r2, #3
 8003cde:	0028      	movs	r0, r5
 8003ce0:	7831      	ldrb	r1, [r6, #0]
 8003ce2:	f000 fa2f 	bl	8004144 <memchr>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d006      	beq.n	8003cf8 <_vfiprintf_r+0x17c>
 8003cea:	2340      	movs	r3, #64	@ 0x40
 8003cec:	1b40      	subs	r0, r0, r5
 8003cee:	4083      	lsls	r3, r0
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	6023      	str	r3, [r4, #0]
 8003cf8:	7831      	ldrb	r1, [r6, #0]
 8003cfa:	2206      	movs	r2, #6
 8003cfc:	482a      	ldr	r0, [pc, #168]	@ (8003da8 <_vfiprintf_r+0x22c>)
 8003cfe:	1c75      	adds	r5, r6, #1
 8003d00:	7621      	strb	r1, [r4, #24]
 8003d02:	f000 fa1f 	bl	8004144 <memchr>
 8003d06:	2800      	cmp	r0, #0
 8003d08:	d040      	beq.n	8003d8c <_vfiprintf_r+0x210>
 8003d0a:	4b28      	ldr	r3, [pc, #160]	@ (8003dac <_vfiprintf_r+0x230>)
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d122      	bne.n	8003d56 <_vfiprintf_r+0x1da>
 8003d10:	2207      	movs	r2, #7
 8003d12:	9b07      	ldr	r3, [sp, #28]
 8003d14:	3307      	adds	r3, #7
 8003d16:	4393      	bics	r3, r2
 8003d18:	3308      	adds	r3, #8
 8003d1a:	9307      	str	r3, [sp, #28]
 8003d1c:	6963      	ldr	r3, [r4, #20]
 8003d1e:	9a04      	ldr	r2, [sp, #16]
 8003d20:	189b      	adds	r3, r3, r2
 8003d22:	6163      	str	r3, [r4, #20]
 8003d24:	e762      	b.n	8003bec <_vfiprintf_r+0x70>
 8003d26:	4343      	muls	r3, r0
 8003d28:	002e      	movs	r6, r5
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	e7a4      	b.n	8003c7a <_vfiprintf_r+0xfe>
 8003d30:	2300      	movs	r3, #0
 8003d32:	200a      	movs	r0, #10
 8003d34:	0019      	movs	r1, r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	6063      	str	r3, [r4, #4]
 8003d3a:	7832      	ldrb	r2, [r6, #0]
 8003d3c:	1c75      	adds	r5, r6, #1
 8003d3e:	3a30      	subs	r2, #48	@ 0x30
 8003d40:	2a09      	cmp	r2, #9
 8003d42:	d903      	bls.n	8003d4c <_vfiprintf_r+0x1d0>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0c8      	beq.n	8003cda <_vfiprintf_r+0x15e>
 8003d48:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d4a:	e7c6      	b.n	8003cda <_vfiprintf_r+0x15e>
 8003d4c:	4341      	muls	r1, r0
 8003d4e:	002e      	movs	r6, r5
 8003d50:	2301      	movs	r3, #1
 8003d52:	1889      	adds	r1, r1, r2
 8003d54:	e7f1      	b.n	8003d3a <_vfiprintf_r+0x1be>
 8003d56:	aa07      	add	r2, sp, #28
 8003d58:	9200      	str	r2, [sp, #0]
 8003d5a:	0021      	movs	r1, r4
 8003d5c:	003a      	movs	r2, r7
 8003d5e:	4b14      	ldr	r3, [pc, #80]	@ (8003db0 <_vfiprintf_r+0x234>)
 8003d60:	9803      	ldr	r0, [sp, #12]
 8003d62:	e000      	b.n	8003d66 <_vfiprintf_r+0x1ea>
 8003d64:	bf00      	nop
 8003d66:	9004      	str	r0, [sp, #16]
 8003d68:	9b04      	ldr	r3, [sp, #16]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	d1d6      	bne.n	8003d1c <_vfiprintf_r+0x1a0>
 8003d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d70:	07db      	lsls	r3, r3, #31
 8003d72:	d405      	bmi.n	8003d80 <_vfiprintf_r+0x204>
 8003d74:	89bb      	ldrh	r3, [r7, #12]
 8003d76:	059b      	lsls	r3, r3, #22
 8003d78:	d402      	bmi.n	8003d80 <_vfiprintf_r+0x204>
 8003d7a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003d7c:	f7ff fc46 	bl	800360c <__retarget_lock_release_recursive>
 8003d80:	89bb      	ldrh	r3, [r7, #12]
 8003d82:	065b      	lsls	r3, r3, #25
 8003d84:	d500      	bpl.n	8003d88 <_vfiprintf_r+0x20c>
 8003d86:	e71e      	b.n	8003bc6 <_vfiprintf_r+0x4a>
 8003d88:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003d8a:	e71e      	b.n	8003bca <_vfiprintf_r+0x4e>
 8003d8c:	aa07      	add	r2, sp, #28
 8003d8e:	9200      	str	r2, [sp, #0]
 8003d90:	0021      	movs	r1, r4
 8003d92:	003a      	movs	r2, r7
 8003d94:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <_vfiprintf_r+0x234>)
 8003d96:	9803      	ldr	r0, [sp, #12]
 8003d98:	f000 f87c 	bl	8003e94 <_printf_i>
 8003d9c:	e7e3      	b.n	8003d66 <_vfiprintf_r+0x1ea>
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	080043c6 	.word	0x080043c6
 8003da4:	080043cc 	.word	0x080043cc
 8003da8:	080043d0 	.word	0x080043d0
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08003b59 	.word	0x08003b59

08003db4 <_printf_common>:
 8003db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003db6:	0016      	movs	r6, r2
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	688a      	ldr	r2, [r1, #8]
 8003dbc:	690b      	ldr	r3, [r1, #16]
 8003dbe:	000c      	movs	r4, r1
 8003dc0:	9000      	str	r0, [sp, #0]
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	da00      	bge.n	8003dc8 <_printf_common+0x14>
 8003dc6:	0013      	movs	r3, r2
 8003dc8:	0022      	movs	r2, r4
 8003dca:	6033      	str	r3, [r6, #0]
 8003dcc:	3243      	adds	r2, #67	@ 0x43
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	2a00      	cmp	r2, #0
 8003dd2:	d001      	beq.n	8003dd8 <_printf_common+0x24>
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	6033      	str	r3, [r6, #0]
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	069b      	lsls	r3, r3, #26
 8003ddc:	d502      	bpl.n	8003de4 <_printf_common+0x30>
 8003dde:	6833      	ldr	r3, [r6, #0]
 8003de0:	3302      	adds	r3, #2
 8003de2:	6033      	str	r3, [r6, #0]
 8003de4:	6822      	ldr	r2, [r4, #0]
 8003de6:	2306      	movs	r3, #6
 8003de8:	0015      	movs	r5, r2
 8003dea:	401d      	ands	r5, r3
 8003dec:	421a      	tst	r2, r3
 8003dee:	d027      	beq.n	8003e40 <_printf_common+0x8c>
 8003df0:	0023      	movs	r3, r4
 8003df2:	3343      	adds	r3, #67	@ 0x43
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	1e5a      	subs	r2, r3, #1
 8003df8:	4193      	sbcs	r3, r2
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	0692      	lsls	r2, r2, #26
 8003dfe:	d430      	bmi.n	8003e62 <_printf_common+0xae>
 8003e00:	0022      	movs	r2, r4
 8003e02:	9901      	ldr	r1, [sp, #4]
 8003e04:	9800      	ldr	r0, [sp, #0]
 8003e06:	9d08      	ldr	r5, [sp, #32]
 8003e08:	3243      	adds	r2, #67	@ 0x43
 8003e0a:	47a8      	blx	r5
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d025      	beq.n	8003e5c <_printf_common+0xa8>
 8003e10:	2206      	movs	r2, #6
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	2500      	movs	r5, #0
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d105      	bne.n	8003e28 <_printf_common+0x74>
 8003e1c:	6833      	ldr	r3, [r6, #0]
 8003e1e:	68e5      	ldr	r5, [r4, #12]
 8003e20:	1aed      	subs	r5, r5, r3
 8003e22:	43eb      	mvns	r3, r5
 8003e24:	17db      	asrs	r3, r3, #31
 8003e26:	401d      	ands	r5, r3
 8003e28:	68a3      	ldr	r3, [r4, #8]
 8003e2a:	6922      	ldr	r2, [r4, #16]
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	dd01      	ble.n	8003e34 <_printf_common+0x80>
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	18ed      	adds	r5, r5, r3
 8003e34:	2600      	movs	r6, #0
 8003e36:	42b5      	cmp	r5, r6
 8003e38:	d120      	bne.n	8003e7c <_printf_common+0xc8>
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e010      	b.n	8003e60 <_printf_common+0xac>
 8003e3e:	3501      	adds	r5, #1
 8003e40:	68e3      	ldr	r3, [r4, #12]
 8003e42:	6832      	ldr	r2, [r6, #0]
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	42ab      	cmp	r3, r5
 8003e48:	ddd2      	ble.n	8003df0 <_printf_common+0x3c>
 8003e4a:	0022      	movs	r2, r4
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	9901      	ldr	r1, [sp, #4]
 8003e50:	9800      	ldr	r0, [sp, #0]
 8003e52:	9f08      	ldr	r7, [sp, #32]
 8003e54:	3219      	adds	r2, #25
 8003e56:	47b8      	blx	r7
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d1f0      	bne.n	8003e3e <_printf_common+0x8a>
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	4240      	negs	r0, r0
 8003e60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e62:	2030      	movs	r0, #48	@ 0x30
 8003e64:	18e1      	adds	r1, r4, r3
 8003e66:	3143      	adds	r1, #67	@ 0x43
 8003e68:	7008      	strb	r0, [r1, #0]
 8003e6a:	0021      	movs	r1, r4
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	3145      	adds	r1, #69	@ 0x45
 8003e70:	7809      	ldrb	r1, [r1, #0]
 8003e72:	18a2      	adds	r2, r4, r2
 8003e74:	3243      	adds	r2, #67	@ 0x43
 8003e76:	3302      	adds	r3, #2
 8003e78:	7011      	strb	r1, [r2, #0]
 8003e7a:	e7c1      	b.n	8003e00 <_printf_common+0x4c>
 8003e7c:	0022      	movs	r2, r4
 8003e7e:	2301      	movs	r3, #1
 8003e80:	9901      	ldr	r1, [sp, #4]
 8003e82:	9800      	ldr	r0, [sp, #0]
 8003e84:	9f08      	ldr	r7, [sp, #32]
 8003e86:	321a      	adds	r2, #26
 8003e88:	47b8      	blx	r7
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d0e6      	beq.n	8003e5c <_printf_common+0xa8>
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7d1      	b.n	8003e36 <_printf_common+0x82>
	...

08003e94 <_printf_i>:
 8003e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e96:	b08b      	sub	sp, #44	@ 0x2c
 8003e98:	9206      	str	r2, [sp, #24]
 8003e9a:	000a      	movs	r2, r1
 8003e9c:	3243      	adds	r2, #67	@ 0x43
 8003e9e:	9307      	str	r3, [sp, #28]
 8003ea0:	9005      	str	r0, [sp, #20]
 8003ea2:	9203      	str	r2, [sp, #12]
 8003ea4:	7e0a      	ldrb	r2, [r1, #24]
 8003ea6:	000c      	movs	r4, r1
 8003ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003eaa:	2a78      	cmp	r2, #120	@ 0x78
 8003eac:	d809      	bhi.n	8003ec2 <_printf_i+0x2e>
 8003eae:	2a62      	cmp	r2, #98	@ 0x62
 8003eb0:	d80b      	bhi.n	8003eca <_printf_i+0x36>
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d100      	bne.n	8003eb8 <_printf_i+0x24>
 8003eb6:	e0bc      	b.n	8004032 <_printf_i+0x19e>
 8003eb8:	497b      	ldr	r1, [pc, #492]	@ (80040a8 <_printf_i+0x214>)
 8003eba:	9104      	str	r1, [sp, #16]
 8003ebc:	2a58      	cmp	r2, #88	@ 0x58
 8003ebe:	d100      	bne.n	8003ec2 <_printf_i+0x2e>
 8003ec0:	e090      	b.n	8003fe4 <_printf_i+0x150>
 8003ec2:	0025      	movs	r5, r4
 8003ec4:	3542      	adds	r5, #66	@ 0x42
 8003ec6:	702a      	strb	r2, [r5, #0]
 8003ec8:	e022      	b.n	8003f10 <_printf_i+0x7c>
 8003eca:	0010      	movs	r0, r2
 8003ecc:	3863      	subs	r0, #99	@ 0x63
 8003ece:	2815      	cmp	r0, #21
 8003ed0:	d8f7      	bhi.n	8003ec2 <_printf_i+0x2e>
 8003ed2:	f7fc f919 	bl	8000108 <__gnu_thumb1_case_shi>
 8003ed6:	0016      	.short	0x0016
 8003ed8:	fff6001f 	.word	0xfff6001f
 8003edc:	fff6fff6 	.word	0xfff6fff6
 8003ee0:	001ffff6 	.word	0x001ffff6
 8003ee4:	fff6fff6 	.word	0xfff6fff6
 8003ee8:	fff6fff6 	.word	0xfff6fff6
 8003eec:	003600a1 	.word	0x003600a1
 8003ef0:	fff60080 	.word	0xfff60080
 8003ef4:	00b2fff6 	.word	0x00b2fff6
 8003ef8:	0036fff6 	.word	0x0036fff6
 8003efc:	fff6fff6 	.word	0xfff6fff6
 8003f00:	0084      	.short	0x0084
 8003f02:	0025      	movs	r5, r4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	3542      	adds	r5, #66	@ 0x42
 8003f08:	1d11      	adds	r1, r2, #4
 8003f0a:	6019      	str	r1, [r3, #0]
 8003f0c:	6813      	ldr	r3, [r2, #0]
 8003f0e:	702b      	strb	r3, [r5, #0]
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0a0      	b.n	8004056 <_printf_i+0x1c2>
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	6809      	ldr	r1, [r1, #0]
 8003f18:	1d02      	adds	r2, r0, #4
 8003f1a:	060d      	lsls	r5, r1, #24
 8003f1c:	d50b      	bpl.n	8003f36 <_printf_i+0xa2>
 8003f1e:	6806      	ldr	r6, [r0, #0]
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	2e00      	cmp	r6, #0
 8003f24:	da03      	bge.n	8003f2e <_printf_i+0x9a>
 8003f26:	232d      	movs	r3, #45	@ 0x2d
 8003f28:	9a03      	ldr	r2, [sp, #12]
 8003f2a:	4276      	negs	r6, r6
 8003f2c:	7013      	strb	r3, [r2, #0]
 8003f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80040a8 <_printf_i+0x214>)
 8003f30:	270a      	movs	r7, #10
 8003f32:	9304      	str	r3, [sp, #16]
 8003f34:	e018      	b.n	8003f68 <_printf_i+0xd4>
 8003f36:	6806      	ldr	r6, [r0, #0]
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	0649      	lsls	r1, r1, #25
 8003f3c:	d5f1      	bpl.n	8003f22 <_printf_i+0x8e>
 8003f3e:	b236      	sxth	r6, r6
 8003f40:	e7ef      	b.n	8003f22 <_printf_i+0x8e>
 8003f42:	6808      	ldr	r0, [r1, #0]
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	c940      	ldmia	r1!, {r6}
 8003f48:	0605      	lsls	r5, r0, #24
 8003f4a:	d402      	bmi.n	8003f52 <_printf_i+0xbe>
 8003f4c:	0640      	lsls	r0, r0, #25
 8003f4e:	d500      	bpl.n	8003f52 <_printf_i+0xbe>
 8003f50:	b2b6      	uxth	r6, r6
 8003f52:	6019      	str	r1, [r3, #0]
 8003f54:	4b54      	ldr	r3, [pc, #336]	@ (80040a8 <_printf_i+0x214>)
 8003f56:	270a      	movs	r7, #10
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	2a6f      	cmp	r2, #111	@ 0x6f
 8003f5c:	d100      	bne.n	8003f60 <_printf_i+0xcc>
 8003f5e:	3f02      	subs	r7, #2
 8003f60:	0023      	movs	r3, r4
 8003f62:	2200      	movs	r2, #0
 8003f64:	3343      	adds	r3, #67	@ 0x43
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	6863      	ldr	r3, [r4, #4]
 8003f6a:	60a3      	str	r3, [r4, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db03      	blt.n	8003f78 <_printf_i+0xe4>
 8003f70:	2104      	movs	r1, #4
 8003f72:	6822      	ldr	r2, [r4, #0]
 8003f74:	438a      	bics	r2, r1
 8003f76:	6022      	str	r2, [r4, #0]
 8003f78:	2e00      	cmp	r6, #0
 8003f7a:	d102      	bne.n	8003f82 <_printf_i+0xee>
 8003f7c:	9d03      	ldr	r5, [sp, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00c      	beq.n	8003f9c <_printf_i+0x108>
 8003f82:	9d03      	ldr	r5, [sp, #12]
 8003f84:	0030      	movs	r0, r6
 8003f86:	0039      	movs	r1, r7
 8003f88:	f7fc f94e 	bl	8000228 <__aeabi_uidivmod>
 8003f8c:	9b04      	ldr	r3, [sp, #16]
 8003f8e:	3d01      	subs	r5, #1
 8003f90:	5c5b      	ldrb	r3, [r3, r1]
 8003f92:	702b      	strb	r3, [r5, #0]
 8003f94:	0033      	movs	r3, r6
 8003f96:	0006      	movs	r6, r0
 8003f98:	429f      	cmp	r7, r3
 8003f9a:	d9f3      	bls.n	8003f84 <_printf_i+0xf0>
 8003f9c:	2f08      	cmp	r7, #8
 8003f9e:	d109      	bne.n	8003fb4 <_printf_i+0x120>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	07db      	lsls	r3, r3, #31
 8003fa4:	d506      	bpl.n	8003fb4 <_printf_i+0x120>
 8003fa6:	6862      	ldr	r2, [r4, #4]
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	dc02      	bgt.n	8003fb4 <_printf_i+0x120>
 8003fae:	2330      	movs	r3, #48	@ 0x30
 8003fb0:	3d01      	subs	r5, #1
 8003fb2:	702b      	strb	r3, [r5, #0]
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	1b5b      	subs	r3, r3, r5
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	9b07      	ldr	r3, [sp, #28]
 8003fbc:	0021      	movs	r1, r4
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	9805      	ldr	r0, [sp, #20]
 8003fc2:	9b06      	ldr	r3, [sp, #24]
 8003fc4:	aa09      	add	r2, sp, #36	@ 0x24
 8003fc6:	f7ff fef5 	bl	8003db4 <_printf_common>
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d148      	bne.n	8004060 <_printf_i+0x1cc>
 8003fce:	2001      	movs	r0, #1
 8003fd0:	4240      	negs	r0, r0
 8003fd2:	b00b      	add	sp, #44	@ 0x2c
 8003fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	6809      	ldr	r1, [r1, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	6022      	str	r2, [r4, #0]
 8003fde:	2278      	movs	r2, #120	@ 0x78
 8003fe0:	4932      	ldr	r1, [pc, #200]	@ (80040ac <_printf_i+0x218>)
 8003fe2:	9104      	str	r1, [sp, #16]
 8003fe4:	0021      	movs	r1, r4
 8003fe6:	3145      	adds	r1, #69	@ 0x45
 8003fe8:	700a      	strb	r2, [r1, #0]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	6822      	ldr	r2, [r4, #0]
 8003fee:	c940      	ldmia	r1!, {r6}
 8003ff0:	0610      	lsls	r0, r2, #24
 8003ff2:	d402      	bmi.n	8003ffa <_printf_i+0x166>
 8003ff4:	0650      	lsls	r0, r2, #25
 8003ff6:	d500      	bpl.n	8003ffa <_printf_i+0x166>
 8003ff8:	b2b6      	uxth	r6, r6
 8003ffa:	6019      	str	r1, [r3, #0]
 8003ffc:	07d3      	lsls	r3, r2, #31
 8003ffe:	d502      	bpl.n	8004006 <_printf_i+0x172>
 8004000:	2320      	movs	r3, #32
 8004002:	4313      	orrs	r3, r2
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	2e00      	cmp	r6, #0
 8004008:	d001      	beq.n	800400e <_printf_i+0x17a>
 800400a:	2710      	movs	r7, #16
 800400c:	e7a8      	b.n	8003f60 <_printf_i+0xcc>
 800400e:	2220      	movs	r2, #32
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	4393      	bics	r3, r2
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	e7f8      	b.n	800400a <_printf_i+0x176>
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	680d      	ldr	r5, [r1, #0]
 800401c:	1d10      	adds	r0, r2, #4
 800401e:	6949      	ldr	r1, [r1, #20]
 8004020:	6018      	str	r0, [r3, #0]
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	062e      	lsls	r6, r5, #24
 8004026:	d501      	bpl.n	800402c <_printf_i+0x198>
 8004028:	6019      	str	r1, [r3, #0]
 800402a:	e002      	b.n	8004032 <_printf_i+0x19e>
 800402c:	066d      	lsls	r5, r5, #25
 800402e:	d5fb      	bpl.n	8004028 <_printf_i+0x194>
 8004030:	8019      	strh	r1, [r3, #0]
 8004032:	2300      	movs	r3, #0
 8004034:	9d03      	ldr	r5, [sp, #12]
 8004036:	6123      	str	r3, [r4, #16]
 8004038:	e7bf      	b.n	8003fba <_printf_i+0x126>
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	1d11      	adds	r1, r2, #4
 800403e:	6019      	str	r1, [r3, #0]
 8004040:	6815      	ldr	r5, [r2, #0]
 8004042:	2100      	movs	r1, #0
 8004044:	0028      	movs	r0, r5
 8004046:	6862      	ldr	r2, [r4, #4]
 8004048:	f000 f87c 	bl	8004144 <memchr>
 800404c:	2800      	cmp	r0, #0
 800404e:	d001      	beq.n	8004054 <_printf_i+0x1c0>
 8004050:	1b40      	subs	r0, r0, r5
 8004052:	6060      	str	r0, [r4, #4]
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	2300      	movs	r3, #0
 800405a:	9a03      	ldr	r2, [sp, #12]
 800405c:	7013      	strb	r3, [r2, #0]
 800405e:	e7ac      	b.n	8003fba <_printf_i+0x126>
 8004060:	002a      	movs	r2, r5
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	9906      	ldr	r1, [sp, #24]
 8004066:	9805      	ldr	r0, [sp, #20]
 8004068:	9d07      	ldr	r5, [sp, #28]
 800406a:	47a8      	blx	r5
 800406c:	3001      	adds	r0, #1
 800406e:	d0ae      	beq.n	8003fce <_printf_i+0x13a>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	079b      	lsls	r3, r3, #30
 8004074:	d415      	bmi.n	80040a2 <_printf_i+0x20e>
 8004076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004078:	68e0      	ldr	r0, [r4, #12]
 800407a:	4298      	cmp	r0, r3
 800407c:	daa9      	bge.n	8003fd2 <_printf_i+0x13e>
 800407e:	0018      	movs	r0, r3
 8004080:	e7a7      	b.n	8003fd2 <_printf_i+0x13e>
 8004082:	0022      	movs	r2, r4
 8004084:	2301      	movs	r3, #1
 8004086:	9906      	ldr	r1, [sp, #24]
 8004088:	9805      	ldr	r0, [sp, #20]
 800408a:	9e07      	ldr	r6, [sp, #28]
 800408c:	3219      	adds	r2, #25
 800408e:	47b0      	blx	r6
 8004090:	3001      	adds	r0, #1
 8004092:	d09c      	beq.n	8003fce <_printf_i+0x13a>
 8004094:	3501      	adds	r5, #1
 8004096:	68e3      	ldr	r3, [r4, #12]
 8004098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	42ab      	cmp	r3, r5
 800409e:	dcf0      	bgt.n	8004082 <_printf_i+0x1ee>
 80040a0:	e7e9      	b.n	8004076 <_printf_i+0x1e2>
 80040a2:	2500      	movs	r5, #0
 80040a4:	e7f7      	b.n	8004096 <_printf_i+0x202>
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	080043d7 	.word	0x080043d7
 80040ac:	080043e8 	.word	0x080043e8

080040b0 <_raise_r>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	0004      	movs	r4, r0
 80040b4:	000d      	movs	r5, r1
 80040b6:	291f      	cmp	r1, #31
 80040b8:	d904      	bls.n	80040c4 <_raise_r+0x14>
 80040ba:	2316      	movs	r3, #22
 80040bc:	6003      	str	r3, [r0, #0]
 80040be:	2001      	movs	r0, #1
 80040c0:	4240      	negs	r0, r0
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <_raise_r+0x24>
 80040ca:	008a      	lsls	r2, r1, #2
 80040cc:	189b      	adds	r3, r3, r2
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d108      	bne.n	80040e6 <_raise_r+0x36>
 80040d4:	0020      	movs	r0, r4
 80040d6:	f000 f831 	bl	800413c <_getpid_r>
 80040da:	002a      	movs	r2, r5
 80040dc:	0001      	movs	r1, r0
 80040de:	0020      	movs	r0, r4
 80040e0:	f000 f81a 	bl	8004118 <_kill_r>
 80040e4:	e7ed      	b.n	80040c2 <_raise_r+0x12>
 80040e6:	2a01      	cmp	r2, #1
 80040e8:	d009      	beq.n	80040fe <_raise_r+0x4e>
 80040ea:	1c51      	adds	r1, r2, #1
 80040ec:	d103      	bne.n	80040f6 <_raise_r+0x46>
 80040ee:	2316      	movs	r3, #22
 80040f0:	6003      	str	r3, [r0, #0]
 80040f2:	2001      	movs	r0, #1
 80040f4:	e7e5      	b.n	80040c2 <_raise_r+0x12>
 80040f6:	2100      	movs	r1, #0
 80040f8:	0028      	movs	r0, r5
 80040fa:	6019      	str	r1, [r3, #0]
 80040fc:	4790      	blx	r2
 80040fe:	2000      	movs	r0, #0
 8004100:	e7df      	b.n	80040c2 <_raise_r+0x12>
	...

08004104 <raise>:
 8004104:	b510      	push	{r4, lr}
 8004106:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <raise+0x10>)
 8004108:	0001      	movs	r1, r0
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	f7ff ffd0 	bl	80040b0 <_raise_r>
 8004110:	bd10      	pop	{r4, pc}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	20000018 	.word	0x20000018

08004118 <_kill_r>:
 8004118:	2300      	movs	r3, #0
 800411a:	b570      	push	{r4, r5, r6, lr}
 800411c:	4d06      	ldr	r5, [pc, #24]	@ (8004138 <_kill_r+0x20>)
 800411e:	0004      	movs	r4, r0
 8004120:	0008      	movs	r0, r1
 8004122:	0011      	movs	r1, r2
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	f7fc fd0f 	bl	8000b48 <_kill>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	d103      	bne.n	8004136 <_kill_r+0x1e>
 800412e:	682b      	ldr	r3, [r5, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d000      	beq.n	8004136 <_kill_r+0x1e>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	20000484 	.word	0x20000484

0800413c <_getpid_r>:
 800413c:	b510      	push	{r4, lr}
 800413e:	f7fc fcfd 	bl	8000b3c <_getpid>
 8004142:	bd10      	pop	{r4, pc}

08004144 <memchr>:
 8004144:	b2c9      	uxtb	r1, r1
 8004146:	1882      	adds	r2, r0, r2
 8004148:	4290      	cmp	r0, r2
 800414a:	d101      	bne.n	8004150 <memchr+0xc>
 800414c:	2000      	movs	r0, #0
 800414e:	4770      	bx	lr
 8004150:	7803      	ldrb	r3, [r0, #0]
 8004152:	428b      	cmp	r3, r1
 8004154:	d0fb      	beq.n	800414e <memchr+0xa>
 8004156:	3001      	adds	r0, #1
 8004158:	e7f6      	b.n	8004148 <memchr+0x4>
	...

0800415c <_init>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr

08004168 <_fini>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr
