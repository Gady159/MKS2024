
CV05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08005194  08005194  00006194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005454  08005454  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005454  08005454  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005454  08005454  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800545c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000068  080054c4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080054c4  00007494  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b622  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d70  00000000  00000000  000126b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  00014428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007de  00000000  00000000  00014e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b75  00000000  00000000  00015626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e52c  00000000  00000000  0002619b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fd0e  00000000  00000000  000346c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000943d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eec  00000000  00000000  00094418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00097304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800517c 	.word	0x0800517c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800517c 	.word	0x0800517c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <uart_process_command>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void uart_process_command(char* cmd)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b08e      	sub	sp, #56	@ 0x38
 8000238:	af04      	add	r7, sp, #16
 800023a:	6078      	str	r0, [r7, #4]

	uint8_t value;
	uint16_t addr;
	uint8_t dump[16];
	char *token;
	token = strtok(cmd, " ");
 800023c:	4aba      	ldr	r2, [pc, #744]	@ (8000528 <uart_process_command+0x2f4>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f004 f8e2 	bl	800440c <strtok>
 8000248:	0003      	movs	r3, r0
 800024a:	623b      	str	r3, [r7, #32]

	if (strcasecmp(token, "HELLO") == 0) {
 800024c:	4ab7      	ldr	r2, [pc, #732]	@ (800052c <uart_process_command+0x2f8>)
 800024e:	6a3b      	ldr	r3, [r7, #32]
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f004 f8c0 	bl	80043d8 <strcasecmp>
 8000258:	1e03      	subs	r3, r0, #0
 800025a:	d104      	bne.n	8000266 <uart_process_command+0x32>
		printf("Communication OK\n");
 800025c:	4bb4      	ldr	r3, [pc, #720]	@ (8000530 <uart_process_command+0x2fc>)
 800025e:	0018      	movs	r0, r3
 8000260:	f003 ffbc 	bl	80041dc <puts>
			{
				printf("\n");
			}
		}
	}
}
 8000264:	e15c      	b.n	8000520 <uart_process_command+0x2ec>
	else if (strcasecmp(token, "LED1") == 0) {
 8000266:	4ab3      	ldr	r2, [pc, #716]	@ (8000534 <uart_process_command+0x300>)
 8000268:	6a3b      	ldr	r3, [r7, #32]
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f004 f8b3 	bl	80043d8 <strcasecmp>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d12f      	bne.n	80002d6 <uart_process_command+0xa2>
		token = strtok(NULL, " ");
 8000276:	4bac      	ldr	r3, [pc, #688]	@ (8000528 <uart_process_command+0x2f4>)
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f004 f8c6 	bl	800440c <strtok>
 8000280:	0003      	movs	r3, r0
 8000282:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0)
 8000284:	4aac      	ldr	r2, [pc, #688]	@ (8000538 <uart_process_command+0x304>)
 8000286:	6a3b      	ldr	r3, [r7, #32]
 8000288:	0011      	movs	r1, r2
 800028a:	0018      	movs	r0, r3
 800028c:	f004 f8a4 	bl	80043d8 <strcasecmp>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d10b      	bne.n	80002ac <uart_process_command+0x78>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000294:	2390      	movs	r3, #144	@ 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2201      	movs	r2, #1
 800029a:	2110      	movs	r1, #16
 800029c:	0018      	movs	r0, r3
 800029e:	f001 fa50 	bl	8001742 <HAL_GPIO_WritePin>
			printf("OK\n");
 80002a2:	4ba6      	ldr	r3, [pc, #664]	@ (800053c <uart_process_command+0x308>)
 80002a4:	0018      	movs	r0, r3
 80002a6:	f003 ff99 	bl	80041dc <puts>
}
 80002aa:	e139      	b.n	8000520 <uart_process_command+0x2ec>
		else if (strcasecmp(token, "OFF") == 0)
 80002ac:	4aa4      	ldr	r2, [pc, #656]	@ (8000540 <uart_process_command+0x30c>)
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	0011      	movs	r1, r2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f004 f890 	bl	80043d8 <strcasecmp>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d000      	beq.n	80002be <uart_process_command+0x8a>
 80002bc:	e130      	b.n	8000520 <uart_process_command+0x2ec>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80002be:	2390      	movs	r3, #144	@ 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	2200      	movs	r2, #0
 80002c4:	2110      	movs	r1, #16
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 fa3b 	bl	8001742 <HAL_GPIO_WritePin>
			printf("OK\n");
 80002cc:	4b9b      	ldr	r3, [pc, #620]	@ (800053c <uart_process_command+0x308>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f003 ff84 	bl	80041dc <puts>
}
 80002d4:	e124      	b.n	8000520 <uart_process_command+0x2ec>
	else if (strcasecmp(token, "LED2") == 0)
 80002d6:	4a9b      	ldr	r2, [pc, #620]	@ (8000544 <uart_process_command+0x310>)
 80002d8:	6a3b      	ldr	r3, [r7, #32]
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f004 f87b 	bl	80043d8 <strcasecmp>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d12d      	bne.n	8000342 <uart_process_command+0x10e>
		token = strtok(NULL, " ");
 80002e6:	4b90      	ldr	r3, [pc, #576]	@ (8000528 <uart_process_command+0x2f4>)
 80002e8:	0019      	movs	r1, r3
 80002ea:	2000      	movs	r0, #0
 80002ec:	f004 f88e 	bl	800440c <strtok>
 80002f0:	0003      	movs	r3, r0
 80002f2:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0)
 80002f4:	4a90      	ldr	r2, [pc, #576]	@ (8000538 <uart_process_command+0x304>)
 80002f6:	6a3b      	ldr	r3, [r7, #32]
 80002f8:	0011      	movs	r1, r2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f004 f86c 	bl	80043d8 <strcasecmp>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d10a      	bne.n	800031a <uart_process_command+0xe6>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000304:	4b90      	ldr	r3, [pc, #576]	@ (8000548 <uart_process_command+0x314>)
 8000306:	2201      	movs	r2, #1
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f001 fa19 	bl	8001742 <HAL_GPIO_WritePin>
			printf("OK\n");
 8000310:	4b8a      	ldr	r3, [pc, #552]	@ (800053c <uart_process_command+0x308>)
 8000312:	0018      	movs	r0, r3
 8000314:	f003 ff62 	bl	80041dc <puts>
}
 8000318:	e102      	b.n	8000520 <uart_process_command+0x2ec>
		else if (strcasecmp(token, "OFF") == 0)
 800031a:	4a89      	ldr	r2, [pc, #548]	@ (8000540 <uart_process_command+0x30c>)
 800031c:	6a3b      	ldr	r3, [r7, #32]
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f004 f859 	bl	80043d8 <strcasecmp>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d000      	beq.n	800032c <uart_process_command+0xf8>
 800032a:	e0f9      	b.n	8000520 <uart_process_command+0x2ec>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800032c:	4b86      	ldr	r3, [pc, #536]	@ (8000548 <uart_process_command+0x314>)
 800032e:	2200      	movs	r2, #0
 8000330:	2101      	movs	r1, #1
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fa05 	bl	8001742 <HAL_GPIO_WritePin>
			printf("OK\n");
 8000338:	4b80      	ldr	r3, [pc, #512]	@ (800053c <uart_process_command+0x308>)
 800033a:	0018      	movs	r0, r3
 800033c:	f003 ff4e 	bl	80041dc <puts>
}
 8000340:	e0ee      	b.n	8000520 <uart_process_command+0x2ec>
	else if (strcasecmp(token, "STATUS") == 0)
 8000342:	4a82      	ldr	r2, [pc, #520]	@ (800054c <uart_process_command+0x318>)
 8000344:	6a3b      	ldr	r3, [r7, #32]
 8000346:	0011      	movs	r1, r2
 8000348:	0018      	movs	r0, r3
 800034a:	f004 f845 	bl	80043d8 <strcasecmp>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d12a      	bne.n	80003a8 <uart_process_command+0x174>
		token = strtok(NULL, " ");
 8000352:	4b75      	ldr	r3, [pc, #468]	@ (8000528 <uart_process_command+0x2f4>)
 8000354:	0019      	movs	r1, r3
 8000356:	2000      	movs	r0, #0
 8000358:	f004 f858 	bl	800440c <strtok>
 800035c:	0003      	movs	r3, r0
 800035e:	623b      	str	r3, [r7, #32]
		if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == 1)
 8000360:	2390      	movs	r3, #144	@ 0x90
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	2110      	movs	r1, #16
 8000366:	0018      	movs	r0, r3
 8000368:	f001 f9ce 	bl	8001708 <HAL_GPIO_ReadPin>
 800036c:	0003      	movs	r3, r0
 800036e:	2b01      	cmp	r3, #1
 8000370:	d104      	bne.n	800037c <uart_process_command+0x148>
			printf("LED1 ON\n");
 8000372:	4b77      	ldr	r3, [pc, #476]	@ (8000550 <uart_process_command+0x31c>)
 8000374:	0018      	movs	r0, r3
 8000376:	f003 ff31 	bl	80041dc <puts>
 800037a:	e003      	b.n	8000384 <uart_process_command+0x150>
			printf("LED1 OFF\n");
 800037c:	4b75      	ldr	r3, [pc, #468]	@ (8000554 <uart_process_command+0x320>)
 800037e:	0018      	movs	r0, r3
 8000380:	f003 ff2c 	bl	80041dc <puts>
		if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) == 1)
 8000384:	4b70      	ldr	r3, [pc, #448]	@ (8000548 <uart_process_command+0x314>)
 8000386:	2101      	movs	r1, #1
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f9bd 	bl	8001708 <HAL_GPIO_ReadPin>
 800038e:	0003      	movs	r3, r0
 8000390:	2b01      	cmp	r3, #1
 8000392:	d104      	bne.n	800039e <uart_process_command+0x16a>
			printf("LED2 ON\n");
 8000394:	4b70      	ldr	r3, [pc, #448]	@ (8000558 <uart_process_command+0x324>)
 8000396:	0018      	movs	r0, r3
 8000398:	f003 ff20 	bl	80041dc <puts>
}
 800039c:	e0c0      	b.n	8000520 <uart_process_command+0x2ec>
			printf("LED2 OFF\n");
 800039e:	4b6f      	ldr	r3, [pc, #444]	@ (800055c <uart_process_command+0x328>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f003 ff1b 	bl	80041dc <puts>
}
 80003a6:	e0bb      	b.n	8000520 <uart_process_command+0x2ec>
	else if (strcasecmp(token, "READ") == 0)
 80003a8:	4a6d      	ldr	r2, [pc, #436]	@ (8000560 <uart_process_command+0x32c>)
 80003aa:	6a3b      	ldr	r3, [r7, #32]
 80003ac:	0011      	movs	r1, r2
 80003ae:	0018      	movs	r0, r3
 80003b0:	f004 f812 	bl	80043d8 <strcasecmp>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d12b      	bne.n	8000410 <uart_process_command+0x1dc>
		token = strtok(NULL, " ");
 80003b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000528 <uart_process_command+0x2f4>)
 80003ba:	0019      	movs	r1, r3
 80003bc:	2000      	movs	r0, #0
 80003be:	f004 f825 	bl	800440c <strtok>
 80003c2:	0003      	movs	r3, r0
 80003c4:	623b      	str	r3, [r7, #32]
		addr = atoi(token);
 80003c6:	6a3b      	ldr	r3, [r7, #32]
 80003c8:	0018      	movs	r0, r3
 80003ca:	f003 fd36 	bl	8003e3a <atoi>
 80003ce:	0002      	movs	r2, r0
 80003d0:	241e      	movs	r4, #30
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	881a      	ldrh	r2, [r3, #0]
 80003da:	4862      	ldr	r0, [pc, #392]	@ (8000564 <uart_process_command+0x330>)
 80003dc:	23fa      	movs	r3, #250	@ 0xfa
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	9302      	str	r3, [sp, #8]
 80003e2:	2301      	movs	r3, #1
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	251d      	movs	r5, #29
 80003e8:	197b      	adds	r3, r7, r5
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	2302      	movs	r3, #2
 80003ee:	21a0      	movs	r1, #160	@ 0xa0
 80003f0:	f001 fb98 	bl	8001b24 <HAL_I2C_Mem_Read>
		printf("Read 0x000%x = 0x%x\n",addr,value);
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	8819      	ldrh	r1, [r3, #0]
 80003f8:	197b      	adds	r3, r7, r5
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	001a      	movs	r2, r3
 80003fe:	4b5a      	ldr	r3, [pc, #360]	@ (8000568 <uart_process_command+0x334>)
 8000400:	0018      	movs	r0, r3
 8000402:	f003 fe7b 	bl	80040fc <iprintf>
		printf("OK\n");
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <uart_process_command+0x308>)
 8000408:	0018      	movs	r0, r3
 800040a:	f003 fee7 	bl	80041dc <puts>
}
 800040e:	e087      	b.n	8000520 <uart_process_command+0x2ec>
	else if (strcasecmp(token, "WRITE") == 0)
 8000410:	4a56      	ldr	r2, [pc, #344]	@ (800056c <uart_process_command+0x338>)
 8000412:	6a3b      	ldr	r3, [r7, #32]
 8000414:	0011      	movs	r1, r2
 8000416:	0018      	movs	r0, r3
 8000418:	f003 ffde 	bl	80043d8 <strcasecmp>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d13d      	bne.n	800049c <uart_process_command+0x268>
		token = strtok(NULL, " ");
 8000420:	4b41      	ldr	r3, [pc, #260]	@ (8000528 <uart_process_command+0x2f4>)
 8000422:	0019      	movs	r1, r3
 8000424:	2000      	movs	r0, #0
 8000426:	f003 fff1 	bl	800440c <strtok>
 800042a:	0003      	movs	r3, r0
 800042c:	623b      	str	r3, [r7, #32]
		addr = atoi(token);
 800042e:	6a3b      	ldr	r3, [r7, #32]
 8000430:	0018      	movs	r0, r3
 8000432:	f003 fd02 	bl	8003e3a <atoi>
 8000436:	0002      	movs	r2, r0
 8000438:	241e      	movs	r4, #30
 800043a:	193b      	adds	r3, r7, r4
 800043c:	801a      	strh	r2, [r3, #0]
		token = strtok(NULL, " ");
 800043e:	4b3a      	ldr	r3, [pc, #232]	@ (8000528 <uart_process_command+0x2f4>)
 8000440:	0019      	movs	r1, r3
 8000442:	2000      	movs	r0, #0
 8000444:	f003 ffe2 	bl	800440c <strtok>
 8000448:	0003      	movs	r3, r0
 800044a:	623b      	str	r3, [r7, #32]
		value = atoi(token);
 800044c:	6a3b      	ldr	r3, [r7, #32]
 800044e:	0018      	movs	r0, r3
 8000450:	f003 fcf3 	bl	8003e3a <atoi>
 8000454:	0003      	movs	r3, r0
 8000456:	b2da      	uxtb	r2, r3
 8000458:	211d      	movs	r1, #29
 800045a:	187b      	adds	r3, r7, r1
 800045c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 800045e:	193b      	adds	r3, r7, r4
 8000460:	881a      	ldrh	r2, [r3, #0]
 8000462:	4840      	ldr	r0, [pc, #256]	@ (8000564 <uart_process_command+0x330>)
 8000464:	23fa      	movs	r3, #250	@ 0xfa
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	9302      	str	r3, [sp, #8]
 800046a:	2301      	movs	r3, #1
 800046c:	9301      	str	r3, [sp, #4]
 800046e:	187b      	adds	r3, r7, r1
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2302      	movs	r3, #2
 8000474:	21a0      	movs	r1, #160	@ 0xa0
 8000476:	f001 fa27 	bl	80018c8 <HAL_I2C_Mem_Write>
		while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDR, 300, 1000) == HAL_TIMEOUT) {}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	23fa      	movs	r3, #250	@ 0xfa
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	2296      	movs	r2, #150	@ 0x96
 8000482:	0052      	lsls	r2, r2, #1
 8000484:	4837      	ldr	r0, [pc, #220]	@ (8000564 <uart_process_command+0x330>)
 8000486:	21a0      	movs	r1, #160	@ 0xa0
 8000488:	f001 fc80 	bl	8001d8c <HAL_I2C_IsDeviceReady>
 800048c:	0003      	movs	r3, r0
 800048e:	2b03      	cmp	r3, #3
 8000490:	d0f4      	beq.n	800047c <uart_process_command+0x248>
		printf("OK\n");
 8000492:	4b2a      	ldr	r3, [pc, #168]	@ (800053c <uart_process_command+0x308>)
 8000494:	0018      	movs	r0, r3
 8000496:	f003 fea1 	bl	80041dc <puts>
}
 800049a:	e041      	b.n	8000520 <uart_process_command+0x2ec>
	else if (strcasecmp(token, "DUMP") == 0)
 800049c:	4a34      	ldr	r2, [pc, #208]	@ (8000570 <uart_process_command+0x33c>)
 800049e:	6a3b      	ldr	r3, [r7, #32]
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f003 ff98 	bl	80043d8 <strcasecmp>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d139      	bne.n	8000520 <uart_process_command+0x2ec>
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, I2C_MEMADD_SIZE_16BIT, dump, 16, 1000);
 80004ac:	482d      	ldr	r0, [pc, #180]	@ (8000564 <uart_process_command+0x330>)
 80004ae:	23fa      	movs	r3, #250	@ 0xfa
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	9302      	str	r3, [sp, #8]
 80004b4:	2310      	movs	r3, #16
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	230c      	movs	r3, #12
 80004ba:	18fb      	adds	r3, r7, r3
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2302      	movs	r3, #2
 80004c0:	2200      	movs	r2, #0
 80004c2:	21a0      	movs	r1, #160	@ 0xa0
 80004c4:	f001 fb2e 	bl	8001b24 <HAL_I2C_Mem_Read>
		for(uint8_t i = 0; i < 16; i++){
 80004c8:	2327      	movs	r3, #39	@ 0x27
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	e021      	b.n	8000516 <uart_process_command+0x2e2>
			printf("%02x ",dump[i]);
 80004d2:	2427      	movs	r4, #39	@ 0x27
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	220c      	movs	r2, #12
 80004da:	18ba      	adds	r2, r7, r2
 80004dc:	5cd3      	ldrb	r3, [r2, r3]
 80004de:	001a      	movs	r2, r3
 80004e0:	4b24      	ldr	r3, [pc, #144]	@ (8000574 <uart_process_command+0x340>)
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f003 fe09 	bl	80040fc <iprintf>
			if (i == 7)
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b07      	cmp	r3, #7
 80004f0:	d103      	bne.n	80004fa <uart_process_command+0x2c6>
				printf("\n");
 80004f2:	200a      	movs	r0, #10
 80004f4:	f003 fe12 	bl	800411c <putchar>
 80004f8:	e007      	b.n	800050a <uart_process_command+0x2d6>
			else if (i == 15)
 80004fa:	2327      	movs	r3, #39	@ 0x27
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d102      	bne.n	800050a <uart_process_command+0x2d6>
				printf("\n");
 8000504:	200a      	movs	r0, #10
 8000506:	f003 fe09 	bl	800411c <putchar>
		for(uint8_t i = 0; i < 16; i++){
 800050a:	2127      	movs	r1, #39	@ 0x27
 800050c:	187b      	adds	r3, r7, r1
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	187b      	adds	r3, r7, r1
 8000512:	3201      	adds	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	2327      	movs	r3, #39	@ 0x27
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d9d8      	bls.n	80004d2 <uart_process_command+0x29e>
}
 8000520:	46c0      	nop			@ (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b00a      	add	sp, #40	@ 0x28
 8000526:	bdb0      	pop	{r4, r5, r7, pc}
 8000528:	08005194 	.word	0x08005194
 800052c:	08005198 	.word	0x08005198
 8000530:	080051a0 	.word	0x080051a0
 8000534:	080051b4 	.word	0x080051b4
 8000538:	080051bc 	.word	0x080051bc
 800053c:	080051c0 	.word	0x080051c0
 8000540:	080051c4 	.word	0x080051c4
 8000544:	080051c8 	.word	0x080051c8
 8000548:	48000400 	.word	0x48000400
 800054c:	080051d0 	.word	0x080051d0
 8000550:	080051d8 	.word	0x080051d8
 8000554:	080051e0 	.word	0x080051e0
 8000558:	080051ec 	.word	0x080051ec
 800055c:	080051f4 	.word	0x080051f4
 8000560:	08005200 	.word	0x08005200
 8000564:	200000c8 	.word	0x200000c8
 8000568:	08005208 	.word	0x08005208
 800056c:	08005220 	.word	0x08005220
 8000570:	08005228 	.word	0x08005228
 8000574:	08005230 	.word	0x08005230

08000578 <_write>:

int _write(int file, char const *buf, int n)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <_write+0x28>)
 8000590:	f002 fe0c 	bl	80031ac <HAL_UART_Transmit>
	return n;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	0018      	movs	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	b004      	add	sp, #16
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	20000170 	.word	0x20000170

080005a4 <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	0002      	movs	r2, r0
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 80005b0:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <uart_byte_available+0x74>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2bff      	cmp	r3, #255	@ 0xff
 80005b6:	d812      	bhi.n	80005de <uart_byte_available+0x3a>
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b1f      	cmp	r3, #31
 80005be:	d90e      	bls.n	80005de <uart_byte_available+0x3a>
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80005c6:	d80a      	bhi.n	80005de <uart_byte_available+0x3a>
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <uart_byte_available+0x74>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	b291      	uxth	r1, r2
 80005d0:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <uart_byte_available+0x74>)
 80005d2:	8011      	strh	r1, [r2, #0]
 80005d4:	0019      	movs	r1, r3
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <uart_byte_available+0x78>)
 80005d8:	1dfa      	adds	r2, r7, #7
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0)
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b0a      	cmp	r3, #10
 80005e4:	d003      	beq.n	80005ee <uart_byte_available+0x4a>
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b0d      	cmp	r3, #13
 80005ec:	d110      	bne.n	8000610 <uart_byte_available+0x6c>
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <uart_byte_available+0x74>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00c      	beq.n	8000610 <uart_byte_available+0x6c>
	{
		data[cnt] = '\0';
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <uart_byte_available+0x74>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	001a      	movs	r2, r3
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <uart_byte_available+0x78>)
 80005fe:	2100      	movs	r1, #0
 8000600:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <uart_byte_available+0x78>)
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff fe15 	bl	8000234 <uart_process_command>
		cnt = 0;
 800060a:	4b03      	ldr	r3, [pc, #12]	@ (8000618 <uart_byte_available+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	801a      	strh	r2, [r3, #0]
	}
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000023c 	.word	0x2000023c
 800061c:	20000240 	.word	0x20000240

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fc25 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f83f 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f96d 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000632:	f000 f94d 	bl	80008d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000636:	f000 f91b 	bl	8000870 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800063a:	f000 f899 	bl	8000770 <MX_I2C1_Init>
  MX_I2C2_Init();
 800063e:	f000 f8d7 	bl	80007f0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000642:	4916      	ldr	r1, [pc, #88]	@ (800069c <main+0x7c>)
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <main+0x80>)
 8000646:	2240      	movs	r2, #64	@ 0x40
 8000648:	0018      	movs	r0, r3
 800064a:	f002 fe4e 	bl	80032ea <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (uart_rx_read_ptr != uart_rx_write_ptr)
 800064e:	e019      	b.n	8000684 <main+0x64>
	  {
		  uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <main+0x84>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	0019      	movs	r1, r3
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	4a10      	ldr	r2, [pc, #64]	@ (800069c <main+0x7c>)
 800065c:	5c52      	ldrb	r2, [r2, r1]
 800065e:	701a      	strb	r2, [r3, #0]
		  // increase read pointer
		  if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0;
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <main+0x84>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	3301      	adds	r3, #1
 8000668:	b29b      	uxth	r3, r3
 800066a:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <main+0x84>)
 800066c:	1c19      	adds	r1, r3, #0
 800066e:	8011      	strh	r1, [r2, #0]
 8000670:	2b3f      	cmp	r3, #63	@ 0x3f
 8000672:	d902      	bls.n	800067a <main+0x5a>
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <main+0x84>)
 8000676:	2200      	movs	r2, #0
 8000678:	801a      	strh	r2, [r3, #0]
		  // process every received byte with the RX state machine
		  uart_byte_available(b);
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ff90 	bl	80005a4 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr)
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <main+0x84>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
 800068a:	0019      	movs	r1, r3
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <main+0x88>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	2240      	movs	r2, #64	@ 0x40
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	4299      	cmp	r1, r3
 8000698:	d1da      	bne.n	8000650 <main+0x30>
 800069a:	e7f3      	b.n	8000684 <main+0x64>
 800069c:	20000084 	.word	0x20000084
 80006a0:	20000170 	.word	0x20000170
 80006a4:	200000c4 	.word	0x200000c4
 80006a8:	200001f8 	.word	0x200001f8

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b095      	sub	sp, #84	@ 0x54
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	2420      	movs	r4, #32
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2330      	movs	r3, #48	@ 0x30
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f003 fe83 	bl	80043c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	2310      	movs	r3, #16
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	0018      	movs	r0, r3
 80006c8:	2310      	movs	r3, #16
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 fe7b 	bl	80043c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	2310      	movs	r3, #16
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f003 fe74 	bl	80043c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	0021      	movs	r1, r4
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2202      	movs	r2, #2
 80006e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2201      	movs	r2, #1
 80006ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2210      	movs	r2, #16
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	22a0      	movs	r2, #160	@ 0xa0
 8000704:	0392      	lsls	r2, r2, #14
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	187b      	adds	r3, r7, r1
 8000710:	0018      	movs	r0, r3
 8000712:	f001 ffcb 	bl	80026ac <HAL_RCC_OscConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071a:	f000 f989 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	2110      	movs	r1, #16
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2207      	movs	r2, #7
 8000724:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2202      	movs	r2, #2
 800072a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2101      	movs	r1, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f002 facf 	bl	8002ce0 <HAL_RCC_ClockConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000746:	f000 f973 	bl	8000a30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800074a:	003b      	movs	r3, r7
 800074c:	2220      	movs	r2, #32
 800074e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fc05 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000762:	f000 f965 	bl	8000a30 <Error_Handler>
  }
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b015      	add	sp, #84	@ 0x54
 800076c:	bd90      	pop	{r4, r7, pc}
	...

08000770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <MX_I2C1_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 ffe5 	bl	800177c <HAL_I2C_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 f93b 	bl	8000a30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fedc 	bl	800257c <HAL_I2CEx_ConfigAnalogFilter>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 f932 	bl	8000a30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 ff1f 	bl	8002614 <HAL_I2CEx_ConfigDigitalFilter>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f929 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000c8 	.word	0x200000c8
 80007e8:	40005400 	.word	0x40005400
 80007ec:	00201d2b 	.word	0x00201d2b

080007f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_I2C2_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <MX_I2C2_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_I2C2_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	@ (800086c <MX_I2C2_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_I2C2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_I2C2_Init+0x74>)
 800082c:	0018      	movs	r0, r3
 800082e:	f000 ffa5 	bl	800177c <HAL_I2C_Init>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 f8fb 	bl	8000a30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <MX_I2C2_Init+0x74>)
 800083c:	2100      	movs	r1, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fe9c 	bl	800257c <HAL_I2CEx_ConfigAnalogFilter>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 f8f2 	bl	8000a30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <MX_I2C2_Init+0x74>)
 800084e:	2100      	movs	r1, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fedf 	bl	8002614 <HAL_I2CEx_ConfigDigitalFilter>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 f8e9 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000011c 	.word	0x2000011c
 8000868:	40005800 	.word	0x40005800
 800086c:	10805d88 	.word	0x10805d88

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	2296      	movs	r2, #150	@ 0x96
 800087e:	0212      	lsls	r2, r2, #8
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 fc25 	bl	8003104 <HAL_UART_Init>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f8b7 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000170 	.word	0x20000170
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_DMA_Init+0x38>)
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_DMA_Init+0x38>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_DMA_Init+0x38>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	200b      	movs	r0, #11
 80008f4:	f000 fbce 	bl	8001094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80008f8:	200b      	movs	r0, #11
 80008fa:	f000 fbe0 	bl	80010be <HAL_NVIC_EnableIRQ>

}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	40021000 	.word	0x40021000

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b08b      	sub	sp, #44	@ 0x2c
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	2414      	movs	r4, #20
 8000914:	193b      	adds	r3, r7, r4
 8000916:	0018      	movs	r0, r3
 8000918:	2314      	movs	r3, #20
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f003 fd53 	bl	80043c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b40      	ldr	r3, [pc, #256]	@ (8000a24 <MX_GPIO_Init+0x118>)
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	4b3f      	ldr	r3, [pc, #252]	@ (8000a24 <MX_GPIO_Init+0x118>)
 8000928:	2180      	movs	r1, #128	@ 0x80
 800092a:	0309      	lsls	r1, r1, #12
 800092c:	430a      	orrs	r2, r1
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	4b3c      	ldr	r3, [pc, #240]	@ (8000a24 <MX_GPIO_Init+0x118>)
 8000932:	695a      	ldr	r2, [r3, #20]
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	031b      	lsls	r3, r3, #12
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093e:	4b39      	ldr	r3, [pc, #228]	@ (8000a24 <MX_GPIO_Init+0x118>)
 8000940:	695a      	ldr	r2, [r3, #20]
 8000942:	4b38      	ldr	r3, [pc, #224]	@ (8000a24 <MX_GPIO_Init+0x118>)
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	03c9      	lsls	r1, r1, #15
 8000948:	430a      	orrs	r2, r1
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <MX_GPIO_Init+0x118>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	03db      	lsls	r3, r3, #15
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b32      	ldr	r3, [pc, #200]	@ (8000a24 <MX_GPIO_Init+0x118>)
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	4b31      	ldr	r3, [pc, #196]	@ (8000a24 <MX_GPIO_Init+0x118>)
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	0289      	lsls	r1, r1, #10
 8000964:	430a      	orrs	r2, r1
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	4b2e      	ldr	r3, [pc, #184]	@ (8000a24 <MX_GPIO_Init+0x118>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	029b      	lsls	r3, r3, #10
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <MX_GPIO_Init+0x118>)
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <MX_GPIO_Init+0x118>)
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	02c9      	lsls	r1, r1, #11
 8000980:	430a      	orrs	r2, r1
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	4b27      	ldr	r3, [pc, #156]	@ (8000a24 <MX_GPIO_Init+0x118>)
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	2380      	movs	r3, #128	@ 0x80
 800098a:	02db      	lsls	r3, r3, #11
 800098c:	4013      	ands	r3, r2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000992:	2390      	movs	r3, #144	@ 0x90
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2200      	movs	r2, #0
 8000998:	2130      	movs	r1, #48	@ 0x30
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fed1 	bl	8001742 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_GPIO_Init+0x11c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	2101      	movs	r1, #1
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fecb 	bl	8001742 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	0192      	lsls	r2, r2, #6
 80009b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2284      	movs	r2, #132	@ 0x84
 80009b8:	0392      	lsls	r2, r2, #14
 80009ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <MX_GPIO_Init+0x120>)
 80009c6:	0019      	movs	r1, r3
 80009c8:	0010      	movs	r0, r2
 80009ca:	f000 fd2d 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2230      	movs	r2, #48	@ 0x30
 80009d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2201      	movs	r2, #1
 80009d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	193a      	adds	r2, r7, r4
 80009e8:	2390      	movs	r3, #144	@ 0x90
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	0011      	movs	r1, r2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fd1a 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80009f4:	0021      	movs	r1, r4
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2201      	movs	r2, #1
 8000a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <MX_GPIO_Init+0x11c>)
 8000a12:	0019      	movs	r1, r3
 8000a14:	0010      	movs	r0, r2
 8000a16:	f000 fd07 	bl	8001428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b00b      	add	sp, #44	@ 0x2c
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000400 	.word	0x48000400
 8000a2c:	48000800 	.word	0x48000800

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a44:	699a      	ldr	r2, [r3, #24]
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	619a      	str	r2, [r3, #24]
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	2201      	movs	r2, #1
 8000a54:	4013      	ands	r3, r2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a5c:	69da      	ldr	r2, [r3, #28]
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a60:	2180      	movs	r1, #128	@ 0x80
 8000a62:	0549      	lsls	r1, r1, #21
 8000a64:	430a      	orrs	r2, r1
 8000a66:	61da      	str	r2, [r3, #28]
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a6a:	69da      	ldr	r2, [r3, #28]
 8000a6c:	2380      	movs	r3, #128	@ 0x80
 8000a6e:	055b      	lsls	r3, r3, #21
 8000a70:	4013      	ands	r3, r2
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b08d      	sub	sp, #52	@ 0x34
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	241c      	movs	r4, #28
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	0018      	movs	r0, r3
 8000a92:	2314      	movs	r3, #20
 8000a94:	001a      	movs	r2, r3
 8000a96:	2100      	movs	r1, #0
 8000a98:	f003 fc96 	bl	80043c8 <memset>
  if(hi2c->Instance==I2C1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a39      	ldr	r2, [pc, #228]	@ (8000b88 <HAL_I2C_MspInit+0x104>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d133      	bne.n	8000b0e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b39      	ldr	r3, [pc, #228]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	4b38      	ldr	r3, [pc, #224]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	02c9      	lsls	r1, r1, #11
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	4b35      	ldr	r3, [pc, #212]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000ab6:	695a      	ldr	r2, [r3, #20]
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	02db      	lsls	r3, r3, #11
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	22c0      	movs	r2, #192	@ 0xc0
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aca:	0021      	movs	r1, r4
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2212      	movs	r2, #18
 8000ad0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2203      	movs	r2, #3
 8000adc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b90 <HAL_I2C_MspInit+0x10c>)
 8000ae8:	0019      	movs	r1, r3
 8000aea:	0010      	movs	r0, r2
 8000aec:	f000 fc9c 	bl	8001428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af0:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000af2:	69da      	ldr	r2, [r3, #28]
 8000af4:	4b25      	ldr	r3, [pc, #148]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000af6:	2180      	movs	r1, #128	@ 0x80
 8000af8:	0389      	lsls	r1, r1, #14
 8000afa:	430a      	orrs	r2, r1
 8000afc:	61da      	str	r2, [r3, #28]
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000b00:	69da      	ldr	r2, [r3, #28]
 8000b02:	2380      	movs	r3, #128	@ 0x80
 8000b04:	039b      	lsls	r3, r3, #14
 8000b06:	4013      	ands	r3, r2
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b0c:	e037      	b.n	8000b7e <HAL_I2C_MspInit+0xfa>
  else if(hi2c->Instance==I2C2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a20      	ldr	r2, [pc, #128]	@ (8000b94 <HAL_I2C_MspInit+0x110>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d132      	bne.n	8000b7e <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000b1a:	695a      	ldr	r2, [r3, #20]
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000b1e:	2180      	movs	r1, #128	@ 0x80
 8000b20:	02c9      	lsls	r1, r1, #11
 8000b22:	430a      	orrs	r2, r1
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000b28:	695a      	ldr	r2, [r3, #20]
 8000b2a:	2380      	movs	r3, #128	@ 0x80
 8000b2c:	02db      	lsls	r3, r3, #11
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b34:	211c      	movs	r1, #28
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	22c0      	movs	r2, #192	@ 0xc0
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2212      	movs	r2, #18
 8000b42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2201      	movs	r2, #1
 8000b54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <HAL_I2C_MspInit+0x10c>)
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	0010      	movs	r0, r2
 8000b5e:	f000 fc63 	bl	8001428 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000b64:	69da      	ldr	r2, [r3, #28]
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	03c9      	lsls	r1, r1, #15
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	61da      	str	r2, [r3, #28]
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_I2C_MspInit+0x108>)
 8000b72:	69da      	ldr	r2, [r3, #28]
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	03db      	lsls	r3, r3, #15
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b00d      	add	sp, #52	@ 0x34
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	40005800 	.word	0x40005800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b08b      	sub	sp, #44	@ 0x2c
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	2414      	movs	r4, #20
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f003 fc0c 	bl	80043c8 <memset>
  if(huart->Instance==USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000c74 <HAL_UART_MspInit+0xdc>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d158      	bne.n	8000c6c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <HAL_UART_MspInit+0xe0>)
 8000bbc:	69da      	ldr	r2, [r3, #28]
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <HAL_UART_MspInit+0xe0>)
 8000bc0:	2180      	movs	r1, #128	@ 0x80
 8000bc2:	0289      	lsls	r1, r1, #10
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	61da      	str	r2, [r3, #28]
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <HAL_UART_MspInit+0xe0>)
 8000bca:	69da      	ldr	r2, [r3, #28]
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	029b      	lsls	r3, r3, #10
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4b28      	ldr	r3, [pc, #160]	@ (8000c78 <HAL_UART_MspInit+0xe0>)
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <HAL_UART_MspInit+0xe0>)
 8000bdc:	2180      	movs	r1, #128	@ 0x80
 8000bde:	0289      	lsls	r1, r1, #10
 8000be0:	430a      	orrs	r2, r1
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <HAL_UART_MspInit+0xe0>)
 8000be6:	695a      	ldr	r2, [r3, #20]
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	029b      	lsls	r3, r3, #10
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf2:	0021      	movs	r1, r4
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	2390      	movs	r3, #144	@ 0x90
 8000c16:	05db      	lsls	r3, r3, #23
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fc04 	bl	8001428 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <HAL_UART_MspInit+0xe8>)
 8000c24:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c34:	2280      	movs	r2, #128	@ 0x80
 8000c36:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c38:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c46:	2220      	movs	r2, #32
 8000c48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fa50 	bl	80010f8 <HAL_DMA_Init>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000c5c:	f7ff fee8 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c64:	675a      	str	r2, [r3, #116]	@ 0x74
 8000c66:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_UART_MspInit+0xe4>)
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b00b      	add	sp, #44	@ 0x2c
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	200001f8 	.word	0x200001f8
 8000c80:	40020058 	.word	0x40020058

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f92a 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <DMA1_Channel4_5_IRQHandler+0x14>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fac8 	bl	8001254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	200001f8 	.word	0x200001f8

08000cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  return 1;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_kill>:

int _kill(int pid, int sig)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ce6:	f003 fc3f 	bl	8004568 <__errno>
 8000cea:	0003      	movs	r3, r0
 8000cec:	2216      	movs	r2, #22
 8000cee:	601a      	str	r2, [r3, #0]
  return -1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_exit>:

void _exit (int status)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d04:	2301      	movs	r3, #1
 8000d06:	425a      	negs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ffe5 	bl	8000cdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	e7fd      	b.n	8000d12 <_exit+0x16>

08000d16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e00a      	b.n	8000d3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d28:	e000      	b.n	8000d2c <_read+0x16>
 8000d2a:	bf00      	nop
 8000d2c:	0001      	movs	r1, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	60ba      	str	r2, [r7, #8]
 8000d34:	b2ca      	uxtb	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbf0      	blt.n	8000d28 <_read+0x12>
  }

  return len;
 8000d46:	687b      	ldr	r3, [r7, #4]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b006      	add	sp, #24
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	425b      	negs	r3, r3
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	0192      	lsls	r2, r2, #6
 8000d74:	605a      	str	r2, [r3, #4]
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_isatty>:

int _isatty(int file)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b004      	add	sp, #16
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f003 fbc6 	bl	8004568 <__errno>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	425b      	negs	r3, r3
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	18d2      	adds	r2, r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b006      	add	sp, #24
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20002000 	.word	0x20002000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000340 	.word	0x20000340
 8000e10:	20000498 	.word	0x20000498

08000e14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e20:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e24:	f7ff fff6 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	@ (8000e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	@ (8000e6c <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4e:	f003 fb91 	bl	8004574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e52:	f7ff fbe5 	bl	8000620 <main>

08000e56 <LoopForever>:

LoopForever:
    b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   r0, =_estack
 8000e58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e64:	0800545c 	.word	0x0800545c
  ldr r2, =_sbss
 8000e68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e6c:	20000494 	.word	0x20000494

08000e70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_IRQHandler>
	...

08000e74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <HAL_Init+0x24>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_Init+0x24>)
 8000e7e:	2110      	movs	r1, #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 f809 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8a:	f7ff fdd7 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_InitTick+0x5c>)
 8000ea6:	681c      	ldr	r4, [r3, #0]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_InitTick+0x60>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	0019      	movs	r1, r3
 8000eae:	23fa      	movs	r3, #250	@ 0xfa
 8000eb0:	0098      	lsls	r0, r3, #2
 8000eb2:	f7ff f933 	bl	800011c <__udivsi3>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	0019      	movs	r1, r3
 8000eba:	0020      	movs	r0, r4
 8000ebc:	f7ff f92e 	bl	800011c <__udivsi3>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 f90b 	bl	80010de <HAL_SYSTICK_Config>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e00f      	b.n	8000ef0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d80b      	bhi.n	8000eee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 f8d8 	bl	8001094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_InitTick+0x64>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b003      	add	sp, #12
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	18d2      	adds	r2, r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000344 	.word	0x20000344

08000f28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	@ (8000f38 <HAL_GetTick+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	20000344 	.word	0x20000344

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0002      	movs	r2, r0
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f4e:	d809      	bhi.n	8000f64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	001a      	movs	r2, r3
 8000f56:	231f      	movs	r3, #31
 8000f58:	401a      	ands	r2, r3
 8000f5a:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <__NVIC_EnableIRQ+0x30>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	000a      	movs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
  }
}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f84:	d828      	bhi.n	8000fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f86:	4a2f      	ldr	r2, [pc, #188]	@ (8001044 <__NVIC_SetPriority+0xd4>)
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	33c0      	adds	r3, #192	@ 0xc0
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	589b      	ldr	r3, [r3, r2]
 8000f96:	1dfa      	adds	r2, r7, #7
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	21ff      	movs	r1, #255	@ 0xff
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	22ff      	movs	r2, #255	@ 0xff
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	4003      	ands	r3, r0
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc4:	481f      	ldr	r0, [pc, #124]	@ (8001044 <__NVIC_SetPriority+0xd4>)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	33c0      	adds	r3, #192	@ 0xc0
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fd6:	e031      	b.n	800103c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <__NVIC_SetPriority+0xd8>)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	0019      	movs	r1, r3
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3306      	adds	r3, #6
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	18d3      	adds	r3, r2, r3
 8000fee:	3304      	adds	r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1dfa      	adds	r2, r7, #7
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	00d2      	lsls	r2, r2, #3
 8000ffe:	21ff      	movs	r1, #255	@ 0xff
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	43d2      	mvns	r2, r2
 8001006:	401a      	ands	r2, r3
 8001008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	22ff      	movs	r2, #255	@ 0xff
 8001010:	401a      	ands	r2, r3
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0018      	movs	r0, r3
 8001018:	2303      	movs	r3, #3
 800101a:	4003      	ands	r3, r0
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <__NVIC_SetPriority+0xd8>)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	001c      	movs	r4, r3
 8001028:	230f      	movs	r3, #15
 800102a:	4023      	ands	r3, r4
 800102c:	3b08      	subs	r3, #8
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	430a      	orrs	r2, r1
 8001032:	3306      	adds	r3, #6
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	18c3      	adds	r3, r0, r3
 8001038:	3304      	adds	r3, #4
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b003      	add	sp, #12
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	045b      	lsls	r3, r3, #17
 800105c:	429a      	cmp	r2, r3
 800105e:	d301      	bcc.n	8001064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001060:	2301      	movs	r3, #1
 8001062:	e010      	b.n	8001086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <SysTick_Config+0x44>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	3a01      	subs	r2, #1
 800106a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106c:	2301      	movs	r3, #1
 800106e:	425b      	negs	r3, r3
 8001070:	2103      	movs	r1, #3
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff ff7c 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <SysTick_Config+0x44>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <SysTick_Config+0x44>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	210f      	movs	r1, #15
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	0002      	movs	r2, r0
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff33 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ffaf 	bl	800104c <SysTick_Config>
 80010ee:	0003      	movs	r3, r0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e036      	b.n	800117c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2221      	movs	r2, #33	@ 0x21
 8001112:	2102      	movs	r1, #2
 8001114:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_DMA_Init+0x8c>)
 8001122:	4013      	ands	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800112e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f946 	bl	80013f0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2221      	movs	r2, #33	@ 0x21
 800116e:	2101      	movs	r1, #1
 8001170:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2220      	movs	r2, #32
 8001176:	2100      	movs	r1, #0
 8001178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b004      	add	sp, #16
 8001182:	bd80      	pop	{r7, pc}
 8001184:	ffffc00f 	.word	0xffffc00f

08001188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2317      	movs	r3, #23
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2220      	movs	r2, #32
 80011a2:	5c9b      	ldrb	r3, [r3, r2]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_DMA_Start_IT+0x24>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e04f      	b.n	800124c <HAL_DMA_Start_IT+0xc4>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2220      	movs	r2, #32
 80011b0:	2101      	movs	r1, #1
 80011b2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2221      	movs	r2, #33	@ 0x21
 80011b8:	5c9b      	ldrb	r3, [r3, r2]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d13a      	bne.n	8001236 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2221      	movs	r2, #33	@ 0x21
 80011c4:	2102      	movs	r1, #2
 80011c6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2200      	movs	r2, #0
 80011cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	438a      	bics	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f8d7 	bl	8001398 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	210e      	movs	r1, #14
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e00f      	b.n	8001224 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	210a      	movs	r1, #10
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2104      	movs	r1, #4
 8001220:	438a      	bics	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2101      	movs	r1, #1
 8001230:	430a      	orrs	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e007      	b.n	8001246 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2220      	movs	r2, #32
 800123a:	2100      	movs	r1, #0
 800123c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800123e:	2317      	movs	r3, #23
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2202      	movs	r2, #2
 8001244:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001246:	2317      	movs	r3, #23
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b006      	add	sp, #24
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	2204      	movs	r2, #4
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	d024      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x72>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2204      	movs	r2, #4
 8001280:	4013      	ands	r3, r2
 8001282:	d020      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2220      	movs	r2, #32
 800128c:	4013      	ands	r3, r2
 800128e:	d107      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2104      	movs	r1, #4
 800129c:	438a      	bics	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a8:	2104      	movs	r1, #4
 80012aa:	4091      	lsls	r1, r2
 80012ac:	000a      	movs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d100      	bne.n	80012ba <HAL_DMA_IRQHandler+0x66>
 80012b8:	e06a      	b.n	8001390 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	0010      	movs	r0, r2
 80012c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80012c4:	e064      	b.n	8001390 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	2202      	movs	r2, #2
 80012cc:	409a      	lsls	r2, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4013      	ands	r3, r2
 80012d4:	d02b      	beq.n	800132e <HAL_DMA_IRQHandler+0xda>
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2202      	movs	r2, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	d027      	beq.n	800132e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2220      	movs	r2, #32
 80012e6:	4013      	ands	r3, r2
 80012e8:	d10b      	bne.n	8001302 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	210a      	movs	r1, #10
 80012f6:	438a      	bics	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2221      	movs	r2, #33	@ 0x21
 80012fe:	2101      	movs	r1, #1
 8001300:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800130a:	2102      	movs	r1, #2
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2220      	movs	r2, #32
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	2b00      	cmp	r3, #0
 8001320:	d036      	beq.n	8001390 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	0010      	movs	r0, r2
 800132a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800132c:	e030      	b.n	8001390 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	2208      	movs	r2, #8
 8001334:	409a      	lsls	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	d028      	beq.n	8001390 <HAL_DMA_IRQHandler+0x13c>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2208      	movs	r2, #8
 8001342:	4013      	ands	r3, r2
 8001344:	d024      	beq.n	8001390 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	210e      	movs	r1, #14
 8001352:	438a      	bics	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800135e:	2101      	movs	r1, #1
 8001360:	4091      	lsls	r1, r2
 8001362:	000a      	movs	r2, r1
 8001364:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2221      	movs	r2, #33	@ 0x21
 8001370:	2101      	movs	r1, #1
 8001372:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2220      	movs	r2, #32
 8001378:	2100      	movs	r1, #0
 800137a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	0010      	movs	r0, r2
 800138c:	4798      	blx	r3
    }
  }
}
 800138e:	e7ff      	b.n	8001390 <HAL_DMA_IRQHandler+0x13c>
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b004      	add	sp, #16
 8001396:	bd80      	pop	{r7, pc}

08001398 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ae:	2101      	movs	r1, #1
 80013b0:	4091      	lsls	r1, r2
 80013b2:	000a      	movs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b10      	cmp	r3, #16
 80013c4:	d108      	bne.n	80013d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013d6:	e007      	b.n	80013e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	60da      	str	r2, [r3, #12]
}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b004      	add	sp, #16
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <DMA_CalcBaseAndBitshift+0x30>)
 80013fe:	4694      	mov	ip, r2
 8001400:	4463      	add	r3, ip
 8001402:	2114      	movs	r1, #20
 8001404:	0018      	movs	r0, r3
 8001406:	f7fe fe89 	bl	800011c <__udivsi3>
 800140a:	0003      	movs	r3, r0
 800140c:	009a      	lsls	r2, r3, #2
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a03      	ldr	r2, [pc, #12]	@ (8001424 <DMA_CalcBaseAndBitshift+0x34>)
 8001416:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	bffdfff8 	.word	0xbffdfff8
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	e14f      	b.n	80016d8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4091      	lsls	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d100      	bne.n	8001450 <HAL_GPIO_Init+0x28>
 800144e:	e140      	b.n	80016d2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	4013      	ands	r3, r2
 8001458:	2b01      	cmp	r3, #1
 800145a:	d005      	beq.n	8001468 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001464:	2b02      	cmp	r3, #2
 8001466:	d130      	bne.n	80014ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	409a      	lsls	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800149e:	2201      	movs	r2, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	2201      	movs	r2, #1
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d017      	beq.n	8001506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	4013      	ands	r3, r2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d123      	bne.n	800155a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	58d3      	ldr	r3, [r2, r3]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2207      	movs	r2, #7
 8001524:	4013      	ands	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2107      	movs	r1, #7
 800153e:	400b      	ands	r3, r1
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	6939      	ldr	r1, [r7, #16]
 8001558:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	401a      	ands	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	23c0      	movs	r3, #192	@ 0xc0
 8001594:	029b      	lsls	r3, r3, #10
 8001596:	4013      	ands	r3, r2
 8001598:	d100      	bne.n	800159c <HAL_GPIO_Init+0x174>
 800159a:	e09a      	b.n	80016d2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159c:	4b54      	ldr	r3, [pc, #336]	@ (80016f0 <HAL_GPIO_Init+0x2c8>)
 800159e:	699a      	ldr	r2, [r3, #24]
 80015a0:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <HAL_GPIO_Init+0x2c8>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	430a      	orrs	r2, r1
 80015a6:	619a      	str	r2, [r3, #24]
 80015a8:	4b51      	ldr	r3, [pc, #324]	@ (80016f0 <HAL_GPIO_Init+0x2c8>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b4:	4a4f      	ldr	r2, [pc, #316]	@ (80016f4 <HAL_GPIO_Init+0x2cc>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	589b      	ldr	r3, [r3, r2]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	43da      	mvns	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	2390      	movs	r3, #144	@ 0x90
 80015dc:	05db      	lsls	r3, r3, #23
 80015de:	429a      	cmp	r2, r3
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x1e2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a44      	ldr	r2, [pc, #272]	@ (80016f8 <HAL_GPIO_Init+0x2d0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x1de>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a43      	ldr	r2, [pc, #268]	@ (80016fc <HAL_GPIO_Init+0x2d4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x1da>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a42      	ldr	r2, [pc, #264]	@ (8001700 <HAL_GPIO_Init+0x2d8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x1d6>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x1e4>
 80015fe:	2305      	movs	r3, #5
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x1e4>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x1e4>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x1e4>
 800160a:	2300      	movs	r3, #0
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	2103      	movs	r1, #3
 8001610:	400a      	ands	r2, r1
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	@ (80016f4 <HAL_GPIO_Init+0x2cc>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	035b      	lsls	r3, r3, #13
 8001642:	4013      	ands	r3, r2
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800164e:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001654:	4b2b      	ldr	r3, [pc, #172]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43da      	mvns	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	039b      	lsls	r3, r3, #14
 800166c:	4013      	ands	r3, r2
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001678:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	029b      	lsls	r3, r3, #10
 8001696:	4013      	ands	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43da      	mvns	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	025b      	lsls	r3, r3, #9
 80016c0:	4013      	ands	r3, r2
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	40da      	lsrs	r2, r3
 80016e0:	1e13      	subs	r3, r2, #0
 80016e2:	d000      	beq.n	80016e6 <HAL_GPIO_Init+0x2be>
 80016e4:	e6a8      	b.n	8001438 <HAL_GPIO_Init+0x10>
  } 
}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b006      	add	sp, #24
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000c00 	.word	0x48000c00
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	000a      	movs	r2, r1
 8001712:	1cbb      	adds	r3, r7, #2
 8001714:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	1cba      	adds	r2, r7, #2
 800171c:	8812      	ldrh	r2, [r2, #0]
 800171e:	4013      	ands	r3, r2
 8001720:	d004      	beq.n	800172c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001722:	230f      	movs	r3, #15
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e003      	b.n	8001734 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001734:	230f      	movs	r3, #15
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
  }
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	0008      	movs	r0, r1
 800174c:	0011      	movs	r1, r2
 800174e:	1cbb      	adds	r3, r7, #2
 8001750:	1c02      	adds	r2, r0, #0
 8001752:	801a      	strh	r2, [r3, #0]
 8001754:	1c7b      	adds	r3, r7, #1
 8001756:	1c0a      	adds	r2, r1, #0
 8001758:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800175a:	1c7b      	adds	r3, r7, #1
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001762:	1cbb      	adds	r3, r7, #2
 8001764:	881a      	ldrh	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800176a:	e003      	b.n	8001774 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176c:	1cbb      	adds	r3, r7, #2
 800176e:	881a      	ldrh	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001774:	46c0      	nop			@ (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e08f      	b.n	80018ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2241      	movs	r2, #65	@ 0x41
 8001792:	5c9b      	ldrb	r3, [r3, r2]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d107      	bne.n	80017aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2240      	movs	r2, #64	@ 0x40
 800179e:	2100      	movs	r1, #0
 80017a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff f96d 	bl	8000a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2241      	movs	r2, #65	@ 0x41
 80017ae:	2124      	movs	r1, #36	@ 0x24
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	438a      	bics	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	493b      	ldr	r1, [pc, #236]	@ (80018b8 <HAL_I2C_Init+0x13c>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4938      	ldr	r1, [pc, #224]	@ (80018bc <HAL_I2C_Init+0x140>)
 80017dc:	400a      	ands	r2, r1
 80017de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d108      	bne.n	80017fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	0209      	lsls	r1, r1, #8
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e007      	b.n	800180a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2184      	movs	r1, #132	@ 0x84
 8001804:	0209      	lsls	r1, r1, #8
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d109      	bne.n	8001826 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	0109      	lsls	r1, r1, #4
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	e007      	b.n	8001836 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4923      	ldr	r1, [pc, #140]	@ (80018c0 <HAL_I2C_Init+0x144>)
 8001832:	400a      	ands	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4920      	ldr	r1, [pc, #128]	@ (80018c4 <HAL_I2C_Init+0x148>)
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	491a      	ldr	r1, [pc, #104]	@ (80018bc <HAL_I2C_Init+0x140>)
 8001852:	400a      	ands	r2, r1
 8001854:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	431a      	orrs	r2, r3
 8001860:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69d9      	ldr	r1, [r3, #28]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1a      	ldr	r2, [r3, #32]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2101      	movs	r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2241      	movs	r2, #65	@ 0x41
 800189a:	2120      	movs	r1, #32
 800189c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2242      	movs	r2, #66	@ 0x42
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	f0ffffff 	.word	0xf0ffffff
 80018bc:	ffff7fff 	.word	0xffff7fff
 80018c0:	fffff7ff 	.word	0xfffff7ff
 80018c4:	02008000 	.word	0x02008000

080018c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	000c      	movs	r4, r1
 80018d2:	0010      	movs	r0, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	230a      	movs	r3, #10
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	1c22      	adds	r2, r4, #0
 80018dc:	801a      	strh	r2, [r3, #0]
 80018de:	2308      	movs	r3, #8
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	1c02      	adds	r2, r0, #0
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	1dbb      	adds	r3, r7, #6
 80018e8:	1c0a      	adds	r2, r1, #0
 80018ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2241      	movs	r2, #65	@ 0x41
 80018f0:	5c9b      	ldrb	r3, [r3, r2]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	d000      	beq.n	80018fa <HAL_I2C_Mem_Write+0x32>
 80018f8:	e10c      	b.n	8001b14 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <HAL_I2C_Mem_Write+0x42>
 8001900:	232c      	movs	r3, #44	@ 0x2c
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2280      	movs	r2, #128	@ 0x80
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0ff      	b.n	8001b16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2240      	movs	r2, #64	@ 0x40
 800191a:	5c9b      	ldrb	r3, [r3, r2]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_I2C_Mem_Write+0x5c>
 8001920:	2302      	movs	r3, #2
 8001922:	e0f8      	b.n	8001b16 <HAL_I2C_Mem_Write+0x24e>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2240      	movs	r2, #64	@ 0x40
 8001928:	2101      	movs	r1, #1
 800192a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800192c:	f7ff fafc 	bl	8000f28 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	0219      	lsls	r1, r3, #8
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2319      	movs	r3, #25
 8001940:	2201      	movs	r2, #1
 8001942:	f000 fc07 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0e3      	b.n	8001b16 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2241      	movs	r2, #65	@ 0x41
 8001952:	2121      	movs	r1, #33	@ 0x21
 8001954:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2242      	movs	r2, #66	@ 0x42
 800195a:	2140      	movs	r1, #64	@ 0x40
 800195c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	222c      	movs	r2, #44	@ 0x2c
 800196e:	18ba      	adds	r2, r7, r2
 8001970:	8812      	ldrh	r2, [r2, #0]
 8001972:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800197a:	1dbb      	adds	r3, r7, #6
 800197c:	881c      	ldrh	r4, [r3, #0]
 800197e:	2308      	movs	r3, #8
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	881a      	ldrh	r2, [r3, #0]
 8001984:	230a      	movs	r3, #10
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	8819      	ldrh	r1, [r3, #0]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	0023      	movs	r3, r4
 8001996:	f000 faf5 	bl	8001f84 <I2C_RequestMemoryWrite>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d005      	beq.n	80019aa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2240      	movs	r2, #64	@ 0x40
 80019a2:	2100      	movs	r1, #0
 80019a4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0b5      	b.n	8001b16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2bff      	cmp	r3, #255	@ 0xff
 80019b2:	d911      	bls.n	80019d8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	22ff      	movs	r2, #255	@ 0xff
 80019b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	045c      	lsls	r4, r3, #17
 80019c4:	230a      	movs	r3, #10
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	8819      	ldrh	r1, [r3, #0]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	0023      	movs	r3, r4
 80019d2:	f000 fd99 	bl	8002508 <I2C_TransferConfig>
 80019d6:	e012      	b.n	80019fe <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	049c      	lsls	r4, r3, #18
 80019ec:	230a      	movs	r3, #10
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	8819      	ldrh	r1, [r3, #0]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	2300      	movs	r3, #0
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	0023      	movs	r3, r4
 80019fa:	f000 fd85 	bl	8002508 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 fbfd 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e081      	b.n	8001b16 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03a      	beq.n	8001ac2 <HAL_I2C_Mem_Write+0x1fa>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d136      	bne.n	8001ac2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2180      	movs	r1, #128	@ 0x80
 8001a62:	f000 fb77 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e053      	b.n	8001b16 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2bff      	cmp	r3, #255	@ 0xff
 8001a76:	d911      	bls.n	8001a9c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	22ff      	movs	r2, #255	@ 0xff
 8001a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	045c      	lsls	r4, r3, #17
 8001a88:	230a      	movs	r3, #10
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	8819      	ldrh	r1, [r3, #0]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	0023      	movs	r3, r4
 8001a96:	f000 fd37 	bl	8002508 <I2C_TransferConfig>
 8001a9a:	e012      	b.n	8001ac2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	049c      	lsls	r4, r3, #18
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	8819      	ldrh	r1, [r3, #0]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	0023      	movs	r3, r4
 8001abe:	f000 fd23 	bl	8002508 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d198      	bne.n	80019fe <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 fbdc 	bl	8002290 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ad8:	1e03      	subs	r3, r0, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e01a      	b.n	8001b16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	490b      	ldr	r1, [pc, #44]	@ (8001b20 <HAL_I2C_Mem_Write+0x258>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2241      	movs	r2, #65	@ 0x41
 8001afc:	2120      	movs	r1, #32
 8001afe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2242      	movs	r2, #66	@ 0x42
 8001b04:	2100      	movs	r1, #0
 8001b06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2240      	movs	r2, #64	@ 0x40
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b007      	add	sp, #28
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	fe00e800 	.word	0xfe00e800

08001b24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	000c      	movs	r4, r1
 8001b2e:	0010      	movs	r0, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	230a      	movs	r3, #10
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	1c22      	adds	r2, r4, #0
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	1c02      	adds	r2, r0, #0
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	1dbb      	adds	r3, r7, #6
 8001b44:	1c0a      	adds	r2, r1, #0
 8001b46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2241      	movs	r2, #65	@ 0x41
 8001b4c:	5c9b      	ldrb	r3, [r3, r2]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d000      	beq.n	8001b56 <HAL_I2C_Mem_Read+0x32>
 8001b54:	e110      	b.n	8001d78 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <HAL_I2C_Mem_Read+0x42>
 8001b5c:	232c      	movs	r3, #44	@ 0x2c
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2280      	movs	r2, #128	@ 0x80
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e103      	b.n	8001d7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2240      	movs	r2, #64	@ 0x40
 8001b76:	5c9b      	ldrb	r3, [r3, r2]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_I2C_Mem_Read+0x5c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e0fc      	b.n	8001d7a <HAL_I2C_Mem_Read+0x256>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2240      	movs	r2, #64	@ 0x40
 8001b84:	2101      	movs	r1, #1
 8001b86:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b88:	f7ff f9ce 	bl	8000f28 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	0219      	lsls	r1, r3, #8
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2319      	movs	r3, #25
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f000 fad9 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0e7      	b.n	8001d7a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2241      	movs	r2, #65	@ 0x41
 8001bae:	2122      	movs	r1, #34	@ 0x22
 8001bb0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2242      	movs	r2, #66	@ 0x42
 8001bb6:	2140      	movs	r1, #64	@ 0x40
 8001bb8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	222c      	movs	r2, #44	@ 0x2c
 8001bca:	18ba      	adds	r2, r7, r2
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bd6:	1dbb      	adds	r3, r7, #6
 8001bd8:	881c      	ldrh	r4, [r3, #0]
 8001bda:	2308      	movs	r3, #8
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	881a      	ldrh	r2, [r3, #0]
 8001be0:	230a      	movs	r3, #10
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	8819      	ldrh	r1, [r3, #0]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	0023      	movs	r3, r4
 8001bf2:	f000 fa2b 	bl	800204c <I2C_RequestMemoryRead>
 8001bf6:	1e03      	subs	r3, r0, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2240      	movs	r2, #64	@ 0x40
 8001bfe:	2100      	movs	r1, #0
 8001c00:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0b9      	b.n	8001d7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2bff      	cmp	r3, #255	@ 0xff
 8001c0e:	d911      	bls.n	8001c34 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	045c      	lsls	r4, r3, #17
 8001c20:	230a      	movs	r3, #10
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	8819      	ldrh	r1, [r3, #0]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	4b56      	ldr	r3, [pc, #344]	@ (8001d84 <HAL_I2C_Mem_Read+0x260>)
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	0023      	movs	r3, r4
 8001c2e:	f000 fc6b 	bl	8002508 <I2C_TransferConfig>
 8001c32:	e012      	b.n	8001c5a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	049c      	lsls	r4, r3, #18
 8001c48:	230a      	movs	r3, #10
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	8819      	ldrh	r1, [r3, #0]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	4b4c      	ldr	r3, [pc, #304]	@ (8001d84 <HAL_I2C_Mem_Read+0x260>)
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	0023      	movs	r3, r4
 8001c56:	f000 fc57 	bl	8002508 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	0013      	movs	r3, r2
 8001c64:	2200      	movs	r2, #0
 8001c66:	2104      	movs	r1, #4
 8001c68:	f000 fa74 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	1e03      	subs	r3, r0, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e082      	b.n	8001d7a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d03a      	beq.n	8001d26 <HAL_I2C_Mem_Read+0x202>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d136      	bne.n	8001d26 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	f000 fa45 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e053      	b.n	8001d7a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2bff      	cmp	r3, #255	@ 0xff
 8001cda:	d911      	bls.n	8001d00 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	045c      	lsls	r4, r3, #17
 8001cec:	230a      	movs	r3, #10
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	8819      	ldrh	r1, [r3, #0]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	0023      	movs	r3, r4
 8001cfa:	f000 fc05 	bl	8002508 <I2C_TransferConfig>
 8001cfe:	e012      	b.n	8001d26 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	049c      	lsls	r4, r3, #18
 8001d14:	230a      	movs	r3, #10
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	8819      	ldrh	r1, [r3, #0]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	0023      	movs	r3, r4
 8001d22:	f000 fbf1 	bl	8002508 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d194      	bne.n	8001c5a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 faaa 	bl	8002290 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e01a      	b.n	8001d7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <HAL_I2C_Mem_Read+0x264>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2241      	movs	r2, #65	@ 0x41
 8001d60:	2120      	movs	r1, #32
 8001d62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2242      	movs	r2, #66	@ 0x42
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2240      	movs	r2, #64	@ 0x40
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e000      	b.n	8001d7a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
  }
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b007      	add	sp, #28
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	80002400 	.word	0x80002400
 8001d88:	fe00e800 	.word	0xfe00e800

08001d8c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	230a      	movs	r3, #10
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	1c0a      	adds	r2, r1, #0
 8001d9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2241      	movs	r2, #65	@ 0x41
 8001da8:	5c9b      	ldrb	r3, [r3, r2]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d000      	beq.n	8001db2 <HAL_I2C_IsDeviceReady+0x26>
 8001db0:	e0df      	b.n	8001f72 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e0d4      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2240      	movs	r2, #64	@ 0x40
 8001dce:	5c9b      	ldrb	r3, [r3, r2]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_I2C_IsDeviceReady+0x4c>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e0cd      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x1e8>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2240      	movs	r2, #64	@ 0x40
 8001ddc:	2101      	movs	r1, #1
 8001dde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2241      	movs	r2, #65	@ 0x41
 8001de4:	2124      	movs	r1, #36	@ 0x24
 8001de6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_I2C_IsDeviceReady+0x7a>
 8001df6:	230a      	movs	r3, #10
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	059b      	lsls	r3, r3, #22
 8001dfe:	0d9b      	lsrs	r3, r3, #22
 8001e00:	4a5e      	ldr	r2, [pc, #376]	@ (8001f7c <HAL_I2C_IsDeviceReady+0x1f0>)
 8001e02:	431a      	orrs	r2, r3
 8001e04:	e006      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x88>
 8001e06:	230a      	movs	r3, #10
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	059b      	lsls	r3, r3, #22
 8001e0e:	0d9b      	lsrs	r3, r3, #22
 8001e10:	4a5b      	ldr	r2, [pc, #364]	@ (8001f80 <HAL_I2C_IsDeviceReady+0x1f4>)
 8001e12:	431a      	orrs	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f885 	bl	8000f28 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	3b20      	subs	r3, #32
 8001e2e:	425a      	negs	r2, r3
 8001e30:	4153      	adcs	r3, r2
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	231f      	movs	r3, #31
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2210      	movs	r2, #16
 8001e42:	4013      	ands	r3, r2
 8001e44:	3b10      	subs	r3, #16
 8001e46:	425a      	negs	r2, r3
 8001e48:	4153      	adcs	r3, r2
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	231e      	movs	r3, #30
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e52:	e035      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	d01a      	beq.n	8001e90 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e5a:	f7ff f865 	bl	8000f28 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <HAL_I2C_IsDeviceReady+0xe4>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10f      	bne.n	8001e90 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2241      	movs	r2, #65	@ 0x41
 8001e74:	2120      	movs	r1, #32
 8001e76:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	2100      	movs	r1, #0
 8001e8a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e071      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2220      	movs	r2, #32
 8001e98:	4013      	ands	r3, r2
 8001e9a:	3b20      	subs	r3, #32
 8001e9c:	425a      	negs	r2, r3
 8001e9e:	4153      	adcs	r3, r2
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	231f      	movs	r3, #31
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2210      	movs	r2, #16
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	3b10      	subs	r3, #16
 8001eb4:	425a      	negs	r2, r3
 8001eb6:	4153      	adcs	r3, r2
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	231e      	movs	r3, #30
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ec0:	231f      	movs	r3, #31
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d104      	bne.n	8001ed4 <HAL_I2C_IsDeviceReady+0x148>
 8001eca:	231e      	movs	r3, #30
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0bf      	beq.n	8001e54 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2210      	movs	r2, #16
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d01a      	beq.n	8001f18 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	0013      	movs	r3, r2
 8001eec:	2200      	movs	r2, #0
 8001eee:	2120      	movs	r1, #32
 8001ef0:	f000 f930 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	1e03      	subs	r3, r0, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e03b      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2220      	movs	r2, #32
 8001f02:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2241      	movs	r2, #65	@ 0x41
 8001f08:	2120      	movs	r1, #32
 8001f0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2240      	movs	r2, #64	@ 0x40
 8001f10:	2100      	movs	r1, #0
 8001f12:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e02d      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	0013      	movs	r3, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	2120      	movs	r1, #32
 8001f26:	f000 f915 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e020      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2210      	movs	r2, #16
 8001f38:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d900      	bls.n	8001f52 <HAL_I2C_IsDeviceReady+0x1c6>
 8001f50:	e74d      	b.n	8001dee <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2241      	movs	r2, #65	@ 0x41
 8001f56:	2120      	movs	r1, #32
 8001f58:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	2220      	movs	r2, #32
 8001f60:	431a      	orrs	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2240      	movs	r2, #64	@ 0x40
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
  }
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b008      	add	sp, #32
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	02002000 	.word	0x02002000
 8001f80:	02002800 	.word	0x02002800

08001f84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	250a      	movs	r5, #10
 8001f94:	197b      	adds	r3, r7, r5
 8001f96:	1c22      	adds	r2, r4, #0
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	1c02      	adds	r2, r0, #0
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	1dbb      	adds	r3, r7, #6
 8001fa4:	1c0a      	adds	r2, r1, #0
 8001fa6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fa8:	1dbb      	adds	r3, r7, #6
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	045c      	lsls	r4, r3, #17
 8001fb2:	197b      	adds	r3, r7, r5
 8001fb4:	8819      	ldrh	r1, [r3, #0]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <I2C_RequestMemoryWrite+0xc4>)
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	0023      	movs	r3, r4
 8001fbe:	f000 faa3 	bl	8002508 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 f91b 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d001      	beq.n	8001fd6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e033      	b.n	800203e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fd6:	1dbb      	adds	r3, r7, #6
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d107      	bne.n	8001fee <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fde:	2308      	movs	r3, #8
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fec:	e019      	b.n	8002022 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fee:	2308      	movs	r3, #8
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002002:	6a39      	ldr	r1, [r7, #32]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	0018      	movs	r0, r3
 8002008:	f000 f8fc 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d001      	beq.n	8002014 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e014      	b.n	800203e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002014:	2308      	movs	r3, #8
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002022:	6a3a      	ldr	r2, [r7, #32]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	0013      	movs	r3, r2
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	@ 0x80
 8002030:	f000 f890 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d001      	beq.n	800203c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b004      	add	sp, #16
 8002044:	bdb0      	pop	{r4, r5, r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	80002000 	.word	0x80002000

0800204c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800204c:	b5b0      	push	{r4, r5, r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	000c      	movs	r4, r1
 8002056:	0010      	movs	r0, r2
 8002058:	0019      	movs	r1, r3
 800205a:	250a      	movs	r5, #10
 800205c:	197b      	adds	r3, r7, r5
 800205e:	1c22      	adds	r2, r4, #0
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	2308      	movs	r3, #8
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	1c02      	adds	r2, r0, #0
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	1dbb      	adds	r3, r7, #6
 800206c:	1c0a      	adds	r2, r1, #0
 800206e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002070:	1dbb      	adds	r3, r7, #6
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	197b      	adds	r3, r7, r5
 8002078:	8819      	ldrh	r1, [r3, #0]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	4b23      	ldr	r3, [pc, #140]	@ (800210c <I2C_RequestMemoryRead+0xc0>)
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2300      	movs	r3, #0
 8002082:	f000 fa41 	bl	8002508 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002088:	6a39      	ldr	r1, [r7, #32]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	0018      	movs	r0, r3
 800208e:	f000 f8b9 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 8002092:	1e03      	subs	r3, r0, #0
 8002094:	d001      	beq.n	800209a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e033      	b.n	8002102 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800209a:	1dbb      	adds	r3, r7, #6
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d107      	bne.n	80020b2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020a2:	2308      	movs	r3, #8
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80020b0:	e019      	b.n	80020e6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020b2:	2308      	movs	r3, #8
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c6:	6a39      	ldr	r1, [r7, #32]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 f89a 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d001      	beq.n	80020d8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e014      	b.n	8002102 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020d8:	2308      	movs	r3, #8
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020e6:	6a3a      	ldr	r2, [r7, #32]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	0013      	movs	r3, r2
 80020f0:	2200      	movs	r2, #0
 80020f2:	2140      	movs	r1, #64	@ 0x40
 80020f4:	f000 f82e 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d001      	beq.n	8002100 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b004      	add	sp, #16
 8002108:	bdb0      	pop	{r4, r5, r7, pc}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	80002000 	.word	0x80002000

08002110 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	2b02      	cmp	r3, #2
 8002124:	d103      	bne.n	800212e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2201      	movs	r2, #1
 8002136:	4013      	ands	r3, r2
 8002138:	2b01      	cmp	r3, #1
 800213a:	d007      	beq.n	800214c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	430a      	orrs	r2, r1
 800214a:	619a      	str	r2, [r3, #24]
  }
}
 800214c:	46c0      	nop			@ (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002164:	e03a      	b.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f8d3 	bl	8002318 <I2C_IsErrorOccurred>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d001      	beq.n	800217a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e040      	b.n	80021fc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	d02d      	beq.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002180:	f7fe fed2 	bl	8000f28 <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d302      	bcc.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d122      	bne.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	425a      	negs	r2, r3
 80021a6:	4153      	adcs	r3, r2
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	001a      	movs	r2, r3
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d113      	bne.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	2220      	movs	r2, #32
 80021ba:	431a      	orrs	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2241      	movs	r2, #65	@ 0x41
 80021c4:	2120      	movs	r1, #32
 80021c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2242      	movs	r2, #66	@ 0x42
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2240      	movs	r2, #64	@ 0x40
 80021d4:	2100      	movs	r1, #0
 80021d6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e00f      	b.n	80021fc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4013      	ands	r3, r2
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	425a      	negs	r2, r3
 80021ec:	4153      	adcs	r3, r2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	001a      	movs	r2, r3
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d0b5      	beq.n	8002166 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b004      	add	sp, #16
 8002202:	bd80      	pop	{r7, pc}

08002204 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002210:	e032      	b.n	8002278 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f87d 	bl	8002318 <I2C_IsErrorOccurred>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d001      	beq.n	8002226 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e030      	b.n	8002288 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3301      	adds	r3, #1
 800222a:	d025      	beq.n	8002278 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7fe fe7c 	bl	8000f28 <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11a      	bne.n	8002278 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2202      	movs	r2, #2
 800224a:	4013      	ands	r3, r2
 800224c:	2b02      	cmp	r3, #2
 800224e:	d013      	beq.n	8002278 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002254:	2220      	movs	r2, #32
 8002256:	431a      	orrs	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2241      	movs	r2, #65	@ 0x41
 8002260:	2120      	movs	r1, #32
 8002262:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2242      	movs	r2, #66	@ 0x42
 8002268:	2100      	movs	r1, #0
 800226a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2240      	movs	r2, #64	@ 0x40
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e007      	b.n	8002288 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2202      	movs	r2, #2
 8002280:	4013      	ands	r3, r2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d1c5      	bne.n	8002212 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800229c:	e02f      	b.n	80022fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 f837 	bl	8002318 <I2C_IsErrorOccurred>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e02d      	b.n	800230e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b2:	f7fe fe39 	bl	8000f28 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d11a      	bne.n	80022fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2220      	movs	r2, #32
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d013      	beq.n	80022fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	2220      	movs	r2, #32
 80022dc:	431a      	orrs	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2241      	movs	r2, #65	@ 0x41
 80022e6:	2120      	movs	r1, #32
 80022e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2242      	movs	r2, #66	@ 0x42
 80022ee:	2100      	movs	r1, #0
 80022f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2240      	movs	r2, #64	@ 0x40
 80022f6:	2100      	movs	r1, #0
 80022f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e007      	b.n	800230e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2220      	movs	r2, #32
 8002306:	4013      	ands	r3, r2
 8002308:	2b20      	cmp	r3, #32
 800230a:	d1c8      	bne.n	800229e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002324:	2327      	movs	r3, #39	@ 0x27
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2210      	movs	r2, #16
 8002340:	4013      	ands	r3, r2
 8002342:	d100      	bne.n	8002346 <I2C_IsErrorOccurred+0x2e>
 8002344:	e079      	b.n	800243a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2210      	movs	r2, #16
 800234c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800234e:	e057      	b.n	8002400 <I2C_IsErrorOccurred+0xe8>
 8002350:	2227      	movs	r2, #39	@ 0x27
 8002352:	18bb      	adds	r3, r7, r2
 8002354:	18ba      	adds	r2, r7, r2
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3301      	adds	r3, #1
 800235e:	d04f      	beq.n	8002400 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002360:	f7fe fde2 	bl	8000f28 <HAL_GetTick>
 8002364:	0002      	movs	r2, r0
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	d302      	bcc.n	8002376 <I2C_IsErrorOccurred+0x5e>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d144      	bne.n	8002400 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	01db      	lsls	r3, r3, #7
 8002380:	4013      	ands	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002384:	2013      	movs	r0, #19
 8002386:	183b      	adds	r3, r7, r0
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	2142      	movs	r1, #66	@ 0x42
 800238c:	5c52      	ldrb	r2, [r2, r1]
 800238e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	401a      	ands	r2, r3
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d126      	bne.n	80023f2 <I2C_IsErrorOccurred+0xda>
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	01db      	lsls	r3, r3, #7
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d021      	beq.n	80023f2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80023ae:	183b      	adds	r3, r7, r0
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d01d      	beq.n	80023f2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	01c9      	lsls	r1, r1, #7
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023c8:	f7fe fdae 	bl	8000f28 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d0:	e00f      	b.n	80023f2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023d2:	f7fe fda9 	bl	8000f28 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b19      	cmp	r3, #25
 80023de:	d908      	bls.n	80023f2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2220      	movs	r2, #32
 80023e4:	4313      	orrs	r3, r2
 80023e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023e8:	2327      	movs	r3, #39	@ 0x27
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]

              break;
 80023f0:	e006      	b.n	8002400 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2220      	movs	r2, #32
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d1e8      	bne.n	80023d2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2220      	movs	r2, #32
 8002408:	4013      	ands	r3, r2
 800240a:	2b20      	cmp	r3, #32
 800240c:	d004      	beq.n	8002418 <I2C_IsErrorOccurred+0x100>
 800240e:	2327      	movs	r3, #39	@ 0x27
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d09b      	beq.n	8002350 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002418:	2327      	movs	r3, #39	@ 0x27
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2220      	movs	r2, #32
 8002428:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	2204      	movs	r2, #4
 800242e:	4313      	orrs	r3, r2
 8002430:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002432:	2327      	movs	r3, #39	@ 0x27
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d00c      	beq.n	8002466 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	2201      	movs	r2, #1
 8002450:	4313      	orrs	r3, r2
 8002452:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2280      	movs	r2, #128	@ 0x80
 800245a:	0052      	lsls	r2, r2, #1
 800245c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800245e:	2327      	movs	r3, #39	@ 0x27
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4013      	ands	r3, r2
 800246e:	d00c      	beq.n	800248a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	2208      	movs	r2, #8
 8002474:	4313      	orrs	r3, r2
 8002476:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2280      	movs	r2, #128	@ 0x80
 800247e:	00d2      	lsls	r2, r2, #3
 8002480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002482:	2327      	movs	r3, #39	@ 0x27
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d00c      	beq.n	80024ae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	2202      	movs	r2, #2
 8002498:	4313      	orrs	r3, r2
 800249a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2280      	movs	r2, #128	@ 0x80
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024a6:	2327      	movs	r3, #39	@ 0x27
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80024ae:	2327      	movs	r3, #39	@ 0x27
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01d      	beq.n	80024f4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7ff fe28 	bl	8002110 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	490e      	ldr	r1, [pc, #56]	@ (8002504 <I2C_IsErrorOccurred+0x1ec>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2241      	movs	r2, #65	@ 0x41
 80024e0:	2120      	movs	r1, #32
 80024e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2242      	movs	r2, #66	@ 0x42
 80024e8:	2100      	movs	r1, #0
 80024ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2240      	movs	r2, #64	@ 0x40
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80024f4:	2327      	movs	r3, #39	@ 0x27
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	781b      	ldrb	r3, [r3, #0]
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b00a      	add	sp, #40	@ 0x28
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	fe00e800 	.word	0xfe00e800

08002508 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	0008      	movs	r0, r1
 8002512:	0011      	movs	r1, r2
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	240a      	movs	r4, #10
 8002518:	193b      	adds	r3, r7, r4
 800251a:	1c02      	adds	r2, r0, #0
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	2009      	movs	r0, #9
 8002520:	183b      	adds	r3, r7, r0
 8002522:	1c0a      	adds	r2, r1, #0
 8002524:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002526:	193b      	adds	r3, r7, r4
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	059b      	lsls	r3, r3, #22
 800252c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800252e:	183b      	adds	r3, r7, r0
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	0419      	lsls	r1, r3, #16
 8002534:	23ff      	movs	r3, #255	@ 0xff
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800253a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	4313      	orrs	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002552:	0d51      	lsrs	r1, r2, #21
 8002554:	2280      	movs	r2, #128	@ 0x80
 8002556:	00d2      	lsls	r2, r2, #3
 8002558:	400a      	ands	r2, r1
 800255a:	4907      	ldr	r1, [pc, #28]	@ (8002578 <I2C_TransferConfig+0x70>)
 800255c:	430a      	orrs	r2, r1
 800255e:	43d2      	mvns	r2, r2
 8002560:	401a      	ands	r2, r3
 8002562:	0011      	movs	r1, r2
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b007      	add	sp, #28
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	03ff63ff 	.word	0x03ff63ff

0800257c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2241      	movs	r2, #65	@ 0x41
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b20      	cmp	r3, #32
 8002590:	d138      	bne.n	8002604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2240      	movs	r2, #64	@ 0x40
 8002596:	5c9b      	ldrb	r3, [r3, r2]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800259c:	2302      	movs	r3, #2
 800259e:	e032      	b.n	8002606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2240      	movs	r2, #64	@ 0x40
 80025a4:	2101      	movs	r1, #1
 80025a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2241      	movs	r2, #65	@ 0x41
 80025ac:	2124      	movs	r1, #36	@ 0x24
 80025ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2101      	movs	r1, #1
 80025bc:	438a      	bics	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4911      	ldr	r1, [pc, #68]	@ (8002610 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2241      	movs	r2, #65	@ 0x41
 80025f4:	2120      	movs	r1, #32
 80025f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b002      	add	sp, #8
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	ffffefff 	.word	0xffffefff

08002614 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2241      	movs	r2, #65	@ 0x41
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	d139      	bne.n	800269e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2240      	movs	r2, #64	@ 0x40
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002634:	2302      	movs	r3, #2
 8002636:	e033      	b.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2240      	movs	r2, #64	@ 0x40
 800263c:	2101      	movs	r1, #1
 800263e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2241      	movs	r2, #65	@ 0x41
 8002644:	2124      	movs	r1, #36	@ 0x24
 8002646:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2101      	movs	r1, #1
 8002654:	438a      	bics	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a11      	ldr	r2, [pc, #68]	@ (80026a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	430a      	orrs	r2, r1
 8002688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2241      	movs	r2, #65	@ 0x41
 800268e:	2120      	movs	r1, #32
 8002690:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2240      	movs	r2, #64	@ 0x40
 8002696:	2100      	movs	r1, #0
 8002698:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b004      	add	sp, #16
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	fffff0ff 	.word	0xfffff0ff

080026ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e301      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	4013      	ands	r3, r2
 80026c6:	d100      	bne.n	80026ca <HAL_RCC_OscConfig+0x1e>
 80026c8:	e08d      	b.n	80027e6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026ca:	4bc3      	ldr	r3, [pc, #780]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	220c      	movs	r2, #12
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d00e      	beq.n	80026f4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026d6:	4bc0      	ldr	r3, [pc, #768]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	220c      	movs	r2, #12
 80026dc:	4013      	ands	r3, r2
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d116      	bne.n	8002710 <HAL_RCC_OscConfig+0x64>
 80026e2:	4bbd      	ldr	r3, [pc, #756]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	2380      	movs	r3, #128	@ 0x80
 80026e8:	025b      	lsls	r3, r3, #9
 80026ea:	401a      	ands	r2, r3
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	4bb8      	ldr	r3, [pc, #736]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	029b      	lsls	r3, r3, #10
 80026fc:	4013      	ands	r3, r2
 80026fe:	d100      	bne.n	8002702 <HAL_RCC_OscConfig+0x56>
 8002700:	e070      	b.n	80027e4 <HAL_RCC_OscConfig+0x138>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d000      	beq.n	800270c <HAL_RCC_OscConfig+0x60>
 800270a:	e06b      	b.n	80027e4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e2d8      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x7c>
 8002718:	4baf      	ldr	r3, [pc, #700]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4bae      	ldr	r3, [pc, #696]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0249      	lsls	r1, r1, #9
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e02f      	b.n	8002788 <HAL_RCC_OscConfig+0xdc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x9e>
 8002730:	4ba9      	ldr	r3, [pc, #676]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4ba8      	ldr	r3, [pc, #672]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002736:	49a9      	ldr	r1, [pc, #676]	@ (80029dc <HAL_RCC_OscConfig+0x330>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	4ba6      	ldr	r3, [pc, #664]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4ba5      	ldr	r3, [pc, #660]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002742:	49a7      	ldr	r1, [pc, #668]	@ (80029e0 <HAL_RCC_OscConfig+0x334>)
 8002744:	400a      	ands	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e01e      	b.n	8002788 <HAL_RCC_OscConfig+0xdc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b05      	cmp	r3, #5
 8002750:	d10e      	bne.n	8002770 <HAL_RCC_OscConfig+0xc4>
 8002752:	4ba1      	ldr	r3, [pc, #644]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4ba0      	ldr	r3, [pc, #640]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002758:	2180      	movs	r1, #128	@ 0x80
 800275a:	02c9      	lsls	r1, r1, #11
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	4b9d      	ldr	r3, [pc, #628]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b9c      	ldr	r3, [pc, #624]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002766:	2180      	movs	r1, #128	@ 0x80
 8002768:	0249      	lsls	r1, r1, #9
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0xdc>
 8002770:	4b99      	ldr	r3, [pc, #612]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b98      	ldr	r3, [pc, #608]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002776:	4999      	ldr	r1, [pc, #612]	@ (80029dc <HAL_RCC_OscConfig+0x330>)
 8002778:	400a      	ands	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	4b96      	ldr	r3, [pc, #600]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b95      	ldr	r3, [pc, #596]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002782:	4997      	ldr	r1, [pc, #604]	@ (80029e0 <HAL_RCC_OscConfig+0x334>)
 8002784:	400a      	ands	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d014      	beq.n	80027ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fbca 	bl	8000f28 <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279a:	f7fe fbc5 	bl	8000f28 <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	@ 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e28a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ac:	4b8a      	ldr	r3, [pc, #552]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	4013      	ands	r3, r2
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0xee>
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fe fbb5 	bl	8000f28 <HAL_GetTick>
 80027be:	0003      	movs	r3, r0
 80027c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fbb0 	bl	8000f28 <HAL_GetTick>
 80027c8:	0002      	movs	r2, r0
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	@ 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e275      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b80      	ldr	r3, [pc, #512]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	@ 0x80
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	4013      	ands	r3, r2
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x118>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	d100      	bne.n	80027f2 <HAL_RCC_OscConfig+0x146>
 80027f0:	e069      	b.n	80028c6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027f2:	4b79      	ldr	r3, [pc, #484]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	220c      	movs	r2, #12
 80027f8:	4013      	ands	r3, r2
 80027fa:	d00b      	beq.n	8002814 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027fc:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	220c      	movs	r2, #12
 8002802:	4013      	ands	r3, r2
 8002804:	2b08      	cmp	r3, #8
 8002806:	d11c      	bne.n	8002842 <HAL_RCC_OscConfig+0x196>
 8002808:	4b73      	ldr	r3, [pc, #460]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	025b      	lsls	r3, r3, #9
 8002810:	4013      	ands	r3, r2
 8002812:	d116      	bne.n	8002842 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002814:	4b70      	ldr	r3, [pc, #448]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x17e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e24b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b6b      	ldr	r3, [pc, #428]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	22f8      	movs	r2, #248	@ 0xf8
 8002830:	4393      	bics	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	00da      	lsls	r2, r3, #3
 800283a:	4b67      	ldr	r3, [pc, #412]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002840:	e041      	b.n	80028c6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d024      	beq.n	8002894 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284a:	4b63      	ldr	r3, [pc, #396]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b62      	ldr	r3, [pc, #392]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fb67 	bl	8000f28 <HAL_GetTick>
 800285a:	0003      	movs	r3, r0
 800285c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe fb62 	bl	8000f28 <HAL_GetTick>
 8002864:	0002      	movs	r2, r0
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e227      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	4b59      	ldr	r3, [pc, #356]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2202      	movs	r2, #2
 8002878:	4013      	ands	r3, r2
 800287a:	d0f1      	beq.n	8002860 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b56      	ldr	r3, [pc, #344]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	22f8      	movs	r2, #248	@ 0xf8
 8002882:	4393      	bics	r3, r2
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00da      	lsls	r2, r3, #3
 800288c:	4b52      	ldr	r3, [pc, #328]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002894:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b4f      	ldr	r3, [pc, #316]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800289a:	2101      	movs	r1, #1
 800289c:	438a      	bics	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fb42 	bl	8000f28 <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fe fb3d 	bl	8000f28 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e202      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028bc:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2202      	movs	r2, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d1f1      	bne.n	80028aa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2208      	movs	r2, #8
 80028cc:	4013      	ands	r3, r2
 80028ce:	d036      	beq.n	800293e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d019      	beq.n	800290c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d8:	4b3f      	ldr	r3, [pc, #252]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028dc:	4b3e      	ldr	r3, [pc, #248]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028de:	2101      	movs	r1, #1
 80028e0:	430a      	orrs	r2, r1
 80028e2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7fe fb20 	bl	8000f28 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ee:	f7fe fb1b 	bl	8000f28 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1e0      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002900:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d0f1      	beq.n	80028ee <HAL_RCC_OscConfig+0x242>
 800290a:	e018      	b.n	800293e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290c:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800290e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002910:	4b31      	ldr	r3, [pc, #196]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002912:	2101      	movs	r1, #1
 8002914:	438a      	bics	r2, r1
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002918:	f7fe fb06 	bl	8000f28 <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002922:	f7fe fb01 	bl	8000f28 <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1c6      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	4b28      	ldr	r3, [pc, #160]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d1f1      	bne.n	8002922 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2204      	movs	r2, #4
 8002944:	4013      	ands	r3, r2
 8002946:	d100      	bne.n	800294a <HAL_RCC_OscConfig+0x29e>
 8002948:	e0b4      	b.n	8002ab4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	201f      	movs	r0, #31
 800294c:	183b      	adds	r3, r7, r0
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002952:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	055b      	lsls	r3, r3, #21
 800295a:	4013      	ands	r3, r2
 800295c:	d110      	bne.n	8002980 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002964:	2180      	movs	r1, #128	@ 0x80
 8002966:	0549      	lsls	r1, r1, #21
 8002968:	430a      	orrs	r2, r1
 800296a:	61da      	str	r2, [r3, #28]
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	055b      	lsls	r3, r3, #21
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800297a:	183b      	adds	r3, r7, r0
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_RCC_OscConfig+0x338>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4013      	ands	r3, r2
 800298a:	d11a      	bne.n	80029c2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_RCC_OscConfig+0x338>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <HAL_RCC_OscConfig+0x338>)
 8002992:	2180      	movs	r1, #128	@ 0x80
 8002994:	0049      	lsls	r1, r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7fe fac5 	bl	8000f28 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fac0 	bl	8000f28 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e185      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_OscConfig+0x338>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10e      	bne.n	80029e8 <HAL_RCC_OscConfig+0x33c>
 80029ca:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	4b02      	ldr	r3, [pc, #8]	@ (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80029d0:	2101      	movs	r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	621a      	str	r2, [r3, #32]
 80029d6:	e035      	b.n	8002a44 <HAL_RCC_OscConfig+0x398>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	fffeffff 	.word	0xfffeffff
 80029e0:	fffbffff 	.word	0xfffbffff
 80029e4:	40007000 	.word	0x40007000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x35e>
 80029f0:	4bb6      	ldr	r3, [pc, #728]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	4bb5      	ldr	r3, [pc, #724]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 80029f6:	2101      	movs	r1, #1
 80029f8:	438a      	bics	r2, r1
 80029fa:	621a      	str	r2, [r3, #32]
 80029fc:	4bb3      	ldr	r3, [pc, #716]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	4bb2      	ldr	r3, [pc, #712]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a02:	2104      	movs	r1, #4
 8002a04:	438a      	bics	r2, r1
 8002a06:	621a      	str	r2, [r3, #32]
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x398>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x380>
 8002a12:	4bae      	ldr	r3, [pc, #696]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	4bad      	ldr	r3, [pc, #692]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a18:	2104      	movs	r1, #4
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	621a      	str	r2, [r3, #32]
 8002a1e:	4bab      	ldr	r3, [pc, #684]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	4baa      	ldr	r3, [pc, #680]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	621a      	str	r2, [r3, #32]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0x398>
 8002a2c:	4ba7      	ldr	r3, [pc, #668]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	4ba6      	ldr	r3, [pc, #664]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	621a      	str	r2, [r3, #32]
 8002a38:	4ba4      	ldr	r3, [pc, #656]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	4ba3      	ldr	r3, [pc, #652]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a3e:	2104      	movs	r1, #4
 8002a40:	438a      	bics	r2, r1
 8002a42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d014      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fa6c 	bl	8000f28 <HAL_GetTick>
 8002a50:	0003      	movs	r3, r0
 8002a52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	e009      	b.n	8002a6a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fa67 	bl	8000f28 <HAL_GetTick>
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	4a9b      	ldr	r2, [pc, #620]	@ (8002cd0 <HAL_RCC_OscConfig+0x624>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e12b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	4b98      	ldr	r3, [pc, #608]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x3aa>
 8002a74:	e013      	b.n	8002a9e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fa57 	bl	8000f28 <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7e:	e009      	b.n	8002a94 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fa52 	bl	8000f28 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	4a91      	ldr	r2, [pc, #580]	@ (8002cd0 <HAL_RCC_OscConfig+0x624>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e116      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	4b8d      	ldr	r3, [pc, #564]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a9e:	231f      	movs	r3, #31
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b88      	ldr	r3, [pc, #544]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	4b87      	ldr	r3, [pc, #540]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002aae:	4989      	ldr	r1, [pc, #548]	@ (8002cd4 <HAL_RCC_OscConfig+0x628>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d12a      	bne.n	8002b1c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ac6:	4b81      	ldr	r3, [pc, #516]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aca:	4b80      	ldr	r3, [pc, #512]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002acc:	2104      	movs	r1, #4
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad6:	4b7d      	ldr	r3, [pc, #500]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002ad8:	2101      	movs	r1, #1
 8002ada:	430a      	orrs	r2, r1
 8002adc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fa23 	bl	8000f28 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ae8:	f7fe fa1e 	bl	8000f28 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0e3      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002afa:	4b74      	ldr	r3, [pc, #464]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	2202      	movs	r2, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	d0f1      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b04:	4b71      	ldr	r3, [pc, #452]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b08:	22f8      	movs	r2, #248	@ 0xf8
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	00da      	lsls	r2, r3, #3
 8002b14:	4b6d      	ldr	r3, [pc, #436]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b1a:	e034      	b.n	8002b86 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	3305      	adds	r3, #5
 8002b22:	d111      	bne.n	8002b48 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b24:	4b69      	ldr	r3, [pc, #420]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b28:	4b68      	ldr	r3, [pc, #416]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	438a      	bics	r2, r1
 8002b2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b30:	4b66      	ldr	r3, [pc, #408]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b34:	22f8      	movs	r2, #248	@ 0xf8
 8002b36:	4393      	bics	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	00da      	lsls	r2, r3, #3
 8002b40:	4b62      	ldr	r3, [pc, #392]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b42:	430a      	orrs	r2, r1
 8002b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b46:	e01e      	b.n	8002b86 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b48:	4b60      	ldr	r3, [pc, #384]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b4c:	4b5f      	ldr	r3, [pc, #380]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b4e:	2104      	movs	r1, #4
 8002b50:	430a      	orrs	r2, r1
 8002b52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b54:	4b5d      	ldr	r3, [pc, #372]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b58:	4b5c      	ldr	r3, [pc, #368]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe f9e2 	bl	8000f28 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b6a:	f7fe f9dd 	bl	8000f28 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0a2      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d1f1      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d100      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4e4>
 8002b8e:	e097      	b.n	8002cc0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b90:	4b4e      	ldr	r3, [pc, #312]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	220c      	movs	r2, #12
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d100      	bne.n	8002b9e <HAL_RCC_OscConfig+0x4f2>
 8002b9c:	e06b      	b.n	8002c76 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d14c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b48      	ldr	r3, [pc, #288]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002bac:	494a      	ldr	r1, [pc, #296]	@ (8002cd8 <HAL_RCC_OscConfig+0x62c>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe f9b9 	bl	8000f28 <HAL_GetTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe f9b4 	bl	8000f28 <HAL_GetTick>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e079      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	049b      	lsls	r3, r3, #18
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	220f      	movs	r2, #15
 8002be0:	4393      	bics	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be8:	4b38      	ldr	r3, [pc, #224]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8002cdc <HAL_RCC_OscConfig+0x630>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	431a      	orrs	r2, r3
 8002c02:	4b32      	ldr	r3, [pc, #200]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c0e:	2180      	movs	r1, #128	@ 0x80
 8002c10:	0449      	lsls	r1, r1, #17
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe f987 	bl	8000f28 <HAL_GetTick>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe f982 	bl	8000f28 <HAL_GetTick>
 8002c24:	0002      	movs	r2, r0
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e047      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c32:	4b26      	ldr	r3, [pc, #152]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	049b      	lsls	r3, r3, #18
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x574>
 8002c3e:	e03f      	b.n	8002cc0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b21      	ldr	r3, [pc, #132]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c46:	4924      	ldr	r1, [pc, #144]	@ (8002cd8 <HAL_RCC_OscConfig+0x62c>)
 8002c48:	400a      	ands	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f96c 	bl	8000f28 <HAL_GetTick>
 8002c50:	0003      	movs	r3, r0
 8002c52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe f967 	bl	8000f28 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e02c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c68:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	049b      	lsls	r3, r3, #18
 8002c70:	4013      	ands	r3, r2
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5aa>
 8002c74:	e024      	b.n	8002cc0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e01f      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002c88:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	025b      	lsls	r3, r3, #9
 8002c94:	401a      	ands	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d10e      	bne.n	8002cbc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	23f0      	movs	r3, #240	@ 0xf0
 8002cb0:	039b      	lsls	r3, r3, #14
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b008      	add	sp, #32
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	00001388 	.word	0x00001388
 8002cd4:	efffffff 	.word	0xefffffff
 8002cd8:	feffffff 	.word	0xfeffffff
 8002cdc:	ffc2ffff 	.word	0xffc2ffff

08002ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0b3      	b.n	8002e5c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8002e64 <HAL_RCC_ClockConfig+0x184>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d911      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b58      	ldr	r3, [pc, #352]	@ (8002e64 <HAL_RCC_ClockConfig+0x184>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4393      	bics	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	4b55      	ldr	r3, [pc, #340]	@ (8002e64 <HAL_RCC_ClockConfig+0x184>)
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d14:	4b53      	ldr	r3, [pc, #332]	@ (8002e64 <HAL_RCC_ClockConfig+0x184>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e09a      	b.n	8002e5c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2204      	movs	r2, #4
 8002d36:	4013      	ands	r3, r2
 8002d38:	d006      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002d40:	21e0      	movs	r1, #224	@ 0xe0
 8002d42:	00c9      	lsls	r1, r1, #3
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	22f0      	movs	r2, #240	@ 0xf0
 8002d4e:	4393      	bics	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	4b44      	ldr	r3, [pc, #272]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	d040      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	2380      	movs	r3, #128	@ 0x80
 8002d74:	029b      	lsls	r3, r3, #10
 8002d76:	4013      	ands	r3, r2
 8002d78:	d114      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06e      	b.n	8002e5c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	4b38      	ldr	r3, [pc, #224]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	2380      	movs	r3, #128	@ 0x80
 8002d8c:	049b      	lsls	r3, r3, #18
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e062      	b.n	8002e5c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e05b      	b.n	8002e5c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da4:	4b30      	ldr	r3, [pc, #192]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2203      	movs	r2, #3
 8002daa:	4393      	bics	r3, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db8:	f7fe f8b6 	bl	8000f28 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc0:	e009      	b.n	8002dd6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc2:	f7fe f8b1 	bl	8000f28 <HAL_GetTick>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	4a27      	ldr	r2, [pc, #156]	@ (8002e6c <HAL_RCC_ClockConfig+0x18c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e042      	b.n	8002e5c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	220c      	movs	r2, #12
 8002ddc:	401a      	ands	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1ec      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <HAL_RCC_ClockConfig+0x184>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d211      	bcs.n	8002e1a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_RCC_ClockConfig+0x184>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	4b18      	ldr	r3, [pc, #96]	@ (8002e64 <HAL_RCC_ClockConfig+0x184>)
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e08:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <HAL_RCC_ClockConfig+0x184>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4013      	ands	r3, r2
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e020      	b.n	8002e5c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	4013      	ands	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e24:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a11      	ldr	r2, [pc, #68]	@ (8002e70 <HAL_RCC_ClockConfig+0x190>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e38:	f000 f820 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e3c:	0001      	movs	r1, r0
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_RCC_ClockConfig+0x188>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	220f      	movs	r2, #15
 8002e46:	4013      	ands	r3, r2
 8002e48:	4a0a      	ldr	r2, [pc, #40]	@ (8002e74 <HAL_RCC_ClockConfig+0x194>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	40da      	lsrs	r2, r3
 8002e50:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <HAL_RCC_ClockConfig+0x198>)
 8002e52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fe f821 	bl	8000e9c <HAL_InitTick>
  
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40022000 	.word	0x40022000
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	00001388 	.word	0x00001388
 8002e70:	fffff8ff 	.word	0xfffff8ff
 8002e74:	08005238 	.word	0x08005238
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e96:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x30>
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eaa:	e02c      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eac:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eae:	613b      	str	r3, [r7, #16]
      break;
 8002eb0:	e02c      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0c9b      	lsrs	r3, r3, #18
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	4013      	ands	r3, r2
 8002eba:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ebc:	5cd3      	ldrb	r3, [r2, r3]
 8002ebe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	4a16      	ldr	r2, [pc, #88]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	025b      	lsls	r3, r3, #9
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4810      	ldr	r0, [pc, #64]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002edc:	f7fd f91e 	bl	800011c <__udivsi3>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4353      	muls	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e009      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	000a      	movs	r2, r1
 8002ef0:	0152      	lsls	r2, r2, #5
 8002ef2:	1a52      	subs	r2, r2, r1
 8002ef4:	0193      	lsls	r3, r2, #6
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	185b      	adds	r3, r3, r1
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	613b      	str	r3, [r7, #16]
      break;
 8002f04:	e002      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f08:	613b      	str	r3, [r7, #16]
      break;
 8002f0a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f0c:	693b      	ldr	r3, [r7, #16]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b006      	add	sp, #24
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	007a1200 	.word	0x007a1200
 8002f20:	08005250 	.word	0x08005250
 8002f24:	08005260 	.word	0x08005260

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b02      	ldr	r3, [pc, #8]	@ (8002f38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002f40:	f7ff fff2 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f44:	0001      	movs	r1, r0
 8002f46:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	4013      	ands	r3, r2
 8002f50:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	40d9      	lsrs	r1, r3
 8002f56:	000b      	movs	r3, r1
}    
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	40021000 	.word	0x40021000
 8002f64:	08005248 	.word	0x08005248

08002f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	@ 0x80
 8002f7e:	025b      	lsls	r3, r3, #9
 8002f80:	4013      	ands	r3, r2
 8002f82:	d100      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002f84:	e08e      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2017      	movs	r0, #23
 8002f88:	183b      	adds	r3, r7, r0
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b57      	ldr	r3, [pc, #348]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	055b      	lsls	r3, r3, #21
 8002f96:	4013      	ands	r3, r2
 8002f98:	d110      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4b54      	ldr	r3, [pc, #336]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	4b53      	ldr	r3, [pc, #332]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa0:	2180      	movs	r1, #128	@ 0x80
 8002fa2:	0549      	lsls	r1, r1, #21
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	61da      	str	r2, [r3, #28]
 8002fa8:	4b50      	ldr	r3, [pc, #320]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	055b      	lsls	r3, r3, #21
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	183b      	adds	r3, r7, r0
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d11a      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc8:	4b49      	ldr	r3, [pc, #292]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b48      	ldr	r3, [pc, #288]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002fce:	2180      	movs	r1, #128	@ 0x80
 8002fd0:	0049      	lsls	r1, r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd6:	f7fd ffa7 	bl	8000f28 <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	e008      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe0:	f7fd ffa2 	bl	8000f28 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	@ 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e077      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	23c0      	movs	r3, #192	@ 0xc0
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d034      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	23c0      	movs	r3, #192	@ 0xc0
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4013      	ands	r3, r2
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d02c      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003020:	4b32      	ldr	r3, [pc, #200]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4a33      	ldr	r2, [pc, #204]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800302a:	4b30      	ldr	r3, [pc, #192]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	4b2f      	ldr	r3, [pc, #188]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003030:	2180      	movs	r1, #128	@ 0x80
 8003032:	0249      	lsls	r1, r1, #9
 8003034:	430a      	orrs	r2, r1
 8003036:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003038:	4b2c      	ldr	r3, [pc, #176]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	4b2b      	ldr	r3, [pc, #172]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800303e:	492e      	ldr	r1, [pc, #184]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003040:	400a      	ands	r2, r1
 8003042:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003044:	4b29      	ldr	r3, [pc, #164]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fd ff69 	bl	8000f28 <HAL_GetTick>
 8003056:	0003      	movs	r3, r0
 8003058:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	e009      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fd ff64 	bl	8000f28 <HAL_GetTick>
 8003060:	0002      	movs	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	4a25      	ldr	r2, [pc, #148]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e038      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003070:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	2202      	movs	r2, #2
 8003076:	4013      	ands	r3, r2
 8003078:	d0f0      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800307a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4b18      	ldr	r3, [pc, #96]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800308a:	430a      	orrs	r2, r1
 800308c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800308e:	2317      	movs	r3, #23
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003098:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800309a:	69da      	ldr	r2, [r3, #28]
 800309c:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800309e:	4918      	ldr	r1, [pc, #96]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ae:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	2203      	movs	r2, #3
 80030b4:	4393      	bics	r3, r2
 80030b6:	0019      	movs	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030be:	430a      	orrs	r2, r1
 80030c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2220      	movs	r2, #32
 80030c8:	4013      	ands	r3, r2
 80030ca:	d009      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030cc:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	2210      	movs	r2, #16
 80030d2:	4393      	bics	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030dc:	430a      	orrs	r2, r1
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b006      	add	sp, #24
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40007000 	.word	0x40007000
 80030f4:	fffffcff 	.word	0xfffffcff
 80030f8:	fffeffff 	.word	0xfffeffff
 80030fc:	00001388 	.word	0x00001388
 8003100:	efffffff 	.word	0xefffffff

08003104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e044      	b.n	80031a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2278      	movs	r2, #120	@ 0x78
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f7fd fd35 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2224      	movs	r2, #36	@ 0x24
 8003132:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2101      	movs	r1, #1
 8003140:	438a      	bics	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 fa86 	bl	8003660 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	0018      	movs	r0, r3
 8003158:	f000 f942 	bl	80033e0 <UART_SetConfig>
 800315c:	0003      	movs	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e01c      	b.n	80031a0 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	490d      	ldr	r1, [pc, #52]	@ (80031a8 <HAL_UART_Init+0xa4>)
 8003172:	400a      	ands	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2108      	movs	r1, #8
 8003182:	438a      	bics	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 fb15 	bl	80037c8 <UART_CheckIdleState>
 800319e:	0003      	movs	r3, r0
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	fffff7ff 	.word	0xfffff7ff

080031ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	@ 0x28
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	1dbb      	adds	r3, r7, #6
 80031ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d000      	beq.n	80031c6 <HAL_UART_Transmit+0x1a>
 80031c4:	e08c      	b.n	80032e0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_UART_Transmit+0x28>
 80031cc:	1dbb      	adds	r3, r7, #6
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e084      	b.n	80032e2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	015b      	lsls	r3, r3, #5
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d109      	bne.n	80031f8 <HAL_UART_Transmit+0x4c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2201      	movs	r2, #1
 80031f0:	4013      	ands	r3, r2
 80031f2:	d001      	beq.n	80031f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e074      	b.n	80032e2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2284      	movs	r2, #132	@ 0x84
 80031fc:	2100      	movs	r1, #0
 80031fe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2221      	movs	r2, #33	@ 0x21
 8003204:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003206:	f7fd fe8f 	bl	8000f28 <HAL_GetTick>
 800320a:	0003      	movs	r3, r0
 800320c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1dba      	adds	r2, r7, #6
 8003212:	2150      	movs	r1, #80	@ 0x50
 8003214:	8812      	ldrh	r2, [r2, #0]
 8003216:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1dba      	adds	r2, r7, #6
 800321c:	2152      	movs	r1, #82	@ 0x52
 800321e:	8812      	ldrh	r2, [r2, #0]
 8003220:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	015b      	lsls	r3, r3, #5
 800322a:	429a      	cmp	r2, r3
 800322c:	d108      	bne.n	8003240 <HAL_UART_Transmit+0x94>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e003      	b.n	8003248 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003248:	e02f      	b.n	80032aa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	0013      	movs	r3, r2
 8003254:	2200      	movs	r2, #0
 8003256:	2180      	movs	r1, #128	@ 0x80
 8003258:	f000 fb5e 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 800325c:	1e03      	subs	r3, r0, #0
 800325e:	d004      	beq.n	800326a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e03b      	b.n	80032e2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	881a      	ldrh	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	05d2      	lsls	r2, r2, #23
 800327a:	0dd2      	lsrs	r2, r2, #23
 800327c:	b292      	uxth	r2, r2
 800327e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	3302      	adds	r3, #2
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e007      	b.n	8003298 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2252      	movs	r2, #82	@ 0x52
 800329c:	5a9b      	ldrh	r3, [r3, r2]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b299      	uxth	r1, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2252      	movs	r2, #82	@ 0x52
 80032a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2252      	movs	r2, #82	@ 0x52
 80032ae:	5a9b      	ldrh	r3, [r3, r2]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1c9      	bne.n	800324a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	0013      	movs	r3, r2
 80032c0:	2200      	movs	r2, #0
 80032c2:	2140      	movs	r1, #64	@ 0x40
 80032c4:	f000 fb28 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e005      	b.n	80032e2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b008      	add	sp, #32
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b088      	sub	sp, #32
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	1dbb      	adds	r3, r7, #6
 80032f6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	589b      	ldr	r3, [r3, r2]
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d145      	bne.n	800338e <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_UART_Receive_DMA+0x26>
 8003308:	1dbb      	adds	r3, r7, #6
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e03d      	b.n	8003390 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	2380      	movs	r3, #128	@ 0x80
 800331a:	015b      	lsls	r3, r3, #5
 800331c:	429a      	cmp	r2, r3
 800331e:	d109      	bne.n	8003334 <HAL_UART_Receive_DMA+0x4a>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	d001      	beq.n	8003334 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e02d      	b.n	8003390 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	041b      	lsls	r3, r3, #16
 8003344:	4013      	ands	r3, r2
 8003346:	d019      	beq.n	800337c <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003348:	f3ef 8310 	mrs	r3, PRIMASK
 800334c:	613b      	str	r3, [r7, #16]
  return(result);
 800334e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	2301      	movs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f383 8810 	msr	PRIMASK, r3
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2180      	movs	r1, #128	@ 0x80
 800336a:	04c9      	lsls	r1, r1, #19
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f383 8810 	msr	PRIMASK, r3
}
 800337a:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800337c:	1dbb      	adds	r3, r7, #6
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0018      	movs	r0, r3
 8003386:	f000 fb37 	bl	80039f8 <UART_Start_Receive_DMA>
 800338a:	0003      	movs	r3, r0
 800338c:	e000      	b.n	8003390 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b008      	add	sp, #32
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80033b0:	46c0      	nop			@ (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	000a      	movs	r2, r1
 80033d2:	1cbb      	adds	r3, r7, #2
 80033d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b002      	add	sp, #8
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033e8:	231e      	movs	r3, #30
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a8d      	ldr	r2, [pc, #564]	@ (8003644 <UART_SetConfig+0x264>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a88      	ldr	r2, [pc, #544]	@ (8003648 <UART_SetConfig+0x268>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a7f      	ldr	r2, [pc, #508]	@ (800364c <UART_SetConfig+0x26c>)
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a7b      	ldr	r2, [pc, #492]	@ (8003650 <UART_SetConfig+0x270>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d127      	bne.n	80034b6 <UART_SetConfig+0xd6>
 8003466:	4b7b      	ldr	r3, [pc, #492]	@ (8003654 <UART_SetConfig+0x274>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	2203      	movs	r2, #3
 800346c:	4013      	ands	r3, r2
 800346e:	2b03      	cmp	r3, #3
 8003470:	d00d      	beq.n	800348e <UART_SetConfig+0xae>
 8003472:	d81b      	bhi.n	80034ac <UART_SetConfig+0xcc>
 8003474:	2b02      	cmp	r3, #2
 8003476:	d014      	beq.n	80034a2 <UART_SetConfig+0xc2>
 8003478:	d818      	bhi.n	80034ac <UART_SetConfig+0xcc>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <UART_SetConfig+0xa4>
 800347e:	2b01      	cmp	r3, #1
 8003480:	d00a      	beq.n	8003498 <UART_SetConfig+0xb8>
 8003482:	e013      	b.n	80034ac <UART_SetConfig+0xcc>
 8003484:	231f      	movs	r3, #31
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e021      	b.n	80034d2 <UART_SetConfig+0xf2>
 800348e:	231f      	movs	r3, #31
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e01c      	b.n	80034d2 <UART_SetConfig+0xf2>
 8003498:	231f      	movs	r3, #31
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	2204      	movs	r2, #4
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e017      	b.n	80034d2 <UART_SetConfig+0xf2>
 80034a2:	231f      	movs	r3, #31
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2208      	movs	r2, #8
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e012      	b.n	80034d2 <UART_SetConfig+0xf2>
 80034ac:	231f      	movs	r3, #31
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2210      	movs	r2, #16
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e00d      	b.n	80034d2 <UART_SetConfig+0xf2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a67      	ldr	r2, [pc, #412]	@ (8003658 <UART_SetConfig+0x278>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d104      	bne.n	80034ca <UART_SetConfig+0xea>
 80034c0:	231f      	movs	r3, #31
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e003      	b.n	80034d2 <UART_SetConfig+0xf2>
 80034ca:	231f      	movs	r3, #31
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2210      	movs	r2, #16
 80034d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	429a      	cmp	r2, r3
 80034dc:	d15c      	bne.n	8003598 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80034de:	231f      	movs	r3, #31
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d015      	beq.n	8003514 <UART_SetConfig+0x134>
 80034e8:	dc18      	bgt.n	800351c <UART_SetConfig+0x13c>
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d00d      	beq.n	800350a <UART_SetConfig+0x12a>
 80034ee:	dc15      	bgt.n	800351c <UART_SetConfig+0x13c>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <UART_SetConfig+0x11a>
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d005      	beq.n	8003504 <UART_SetConfig+0x124>
 80034f8:	e010      	b.n	800351c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034fa:	f7ff fd1f 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 80034fe:	0003      	movs	r3, r0
 8003500:	61bb      	str	r3, [r7, #24]
        break;
 8003502:	e012      	b.n	800352a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003504:	4b55      	ldr	r3, [pc, #340]	@ (800365c <UART_SetConfig+0x27c>)
 8003506:	61bb      	str	r3, [r7, #24]
        break;
 8003508:	e00f      	b.n	800352a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800350a:	f7ff fcb7 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 800350e:	0003      	movs	r3, r0
 8003510:	61bb      	str	r3, [r7, #24]
        break;
 8003512:	e00a      	b.n	800352a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	61bb      	str	r3, [r7, #24]
        break;
 800351a:	e006      	b.n	800352a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003520:	231e      	movs	r3, #30
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
        break;
 8003528:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d100      	bne.n	8003532 <UART_SetConfig+0x152>
 8003530:	e07a      	b.n	8003628 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	005a      	lsls	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	18d2      	adds	r2, r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	0019      	movs	r1, r3
 8003544:	0010      	movs	r0, r2
 8003546:	f7fc fde9 	bl	800011c <__udivsi3>
 800354a:	0003      	movs	r3, r0
 800354c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b0f      	cmp	r3, #15
 8003552:	d91c      	bls.n	800358e <UART_SetConfig+0x1ae>
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	2380      	movs	r3, #128	@ 0x80
 8003558:	025b      	lsls	r3, r3, #9
 800355a:	429a      	cmp	r2, r3
 800355c:	d217      	bcs.n	800358e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	b29a      	uxth	r2, r3
 8003562:	200e      	movs	r0, #14
 8003564:	183b      	adds	r3, r7, r0
 8003566:	210f      	movs	r1, #15
 8003568:	438a      	bics	r2, r1
 800356a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	2207      	movs	r2, #7
 8003574:	4013      	ands	r3, r2
 8003576:	b299      	uxth	r1, r3
 8003578:	183b      	adds	r3, r7, r0
 800357a:	183a      	adds	r2, r7, r0
 800357c:	8812      	ldrh	r2, [r2, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	183a      	adds	r2, r7, r0
 8003588:	8812      	ldrh	r2, [r2, #0]
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	e04c      	b.n	8003628 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800358e:	231e      	movs	r3, #30
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e047      	b.n	8003628 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003598:	231f      	movs	r3, #31
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d015      	beq.n	80035ce <UART_SetConfig+0x1ee>
 80035a2:	dc18      	bgt.n	80035d6 <UART_SetConfig+0x1f6>
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d00d      	beq.n	80035c4 <UART_SetConfig+0x1e4>
 80035a8:	dc15      	bgt.n	80035d6 <UART_SetConfig+0x1f6>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <UART_SetConfig+0x1d4>
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d005      	beq.n	80035be <UART_SetConfig+0x1de>
 80035b2:	e010      	b.n	80035d6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b4:	f7ff fcc2 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 80035b8:	0003      	movs	r3, r0
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e012      	b.n	80035e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035be:	4b27      	ldr	r3, [pc, #156]	@ (800365c <UART_SetConfig+0x27c>)
 80035c0:	61bb      	str	r3, [r7, #24]
        break;
 80035c2:	e00f      	b.n	80035e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c4:	f7ff fc5a 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 80035c8:	0003      	movs	r3, r0
 80035ca:	61bb      	str	r3, [r7, #24]
        break;
 80035cc:	e00a      	b.n	80035e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	61bb      	str	r3, [r7, #24]
        break;
 80035d4:	e006      	b.n	80035e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035da:	231e      	movs	r3, #30
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
        break;
 80035e2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01e      	beq.n	8003628 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	085a      	lsrs	r2, r3, #1
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	18d2      	adds	r2, r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0019      	movs	r1, r3
 80035fa:	0010      	movs	r0, r2
 80035fc:	f7fc fd8e 	bl	800011c <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b0f      	cmp	r3, #15
 8003608:	d90a      	bls.n	8003620 <UART_SetConfig+0x240>
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	2380      	movs	r3, #128	@ 0x80
 800360e:	025b      	lsls	r3, r3, #9
 8003610:	429a      	cmp	r2, r3
 8003612:	d205      	bcs.n	8003620 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	e003      	b.n	8003628 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003620:	231e      	movs	r3, #30
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003634:	231e      	movs	r3, #30
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	781b      	ldrb	r3, [r3, #0]
}
 800363a:	0018      	movs	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	b008      	add	sp, #32
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	ffff69f3 	.word	0xffff69f3
 8003648:	ffffcfff 	.word	0xffffcfff
 800364c:	fffff4ff 	.word	0xfffff4ff
 8003650:	40013800 	.word	0x40013800
 8003654:	40021000 	.word	0x40021000
 8003658:	40004400 	.word	0x40004400
 800365c:	007a1200 	.word	0x007a1200

08003660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	2208      	movs	r2, #8
 800366e:	4013      	ands	r3, r2
 8003670:	d00b      	beq.n	800368a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4a4a      	ldr	r2, [pc, #296]	@ (80037a4 <UART_AdvFeatureConfig+0x144>)
 800367a:	4013      	ands	r3, r2
 800367c:	0019      	movs	r1, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	2201      	movs	r2, #1
 8003690:	4013      	ands	r3, r2
 8003692:	d00b      	beq.n	80036ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a43      	ldr	r2, [pc, #268]	@ (80037a8 <UART_AdvFeatureConfig+0x148>)
 800369c:	4013      	ands	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	2202      	movs	r2, #2
 80036b2:	4013      	ands	r3, r2
 80036b4:	d00b      	beq.n	80036ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4a3b      	ldr	r2, [pc, #236]	@ (80037ac <UART_AdvFeatureConfig+0x14c>)
 80036be:	4013      	ands	r3, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	2204      	movs	r2, #4
 80036d4:	4013      	ands	r3, r2
 80036d6:	d00b      	beq.n	80036f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a34      	ldr	r2, [pc, #208]	@ (80037b0 <UART_AdvFeatureConfig+0x150>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2210      	movs	r2, #16
 80036f6:	4013      	ands	r3, r2
 80036f8:	d00b      	beq.n	8003712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <UART_AdvFeatureConfig+0x154>)
 8003702:	4013      	ands	r3, r2
 8003704:	0019      	movs	r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2220      	movs	r2, #32
 8003718:	4013      	ands	r3, r2
 800371a:	d00b      	beq.n	8003734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4a25      	ldr	r2, [pc, #148]	@ (80037b8 <UART_AdvFeatureConfig+0x158>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	2240      	movs	r2, #64	@ 0x40
 800373a:	4013      	ands	r3, r2
 800373c:	d01d      	beq.n	800377a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a1d      	ldr	r2, [pc, #116]	@ (80037bc <UART_AdvFeatureConfig+0x15c>)
 8003746:	4013      	ands	r3, r2
 8003748:	0019      	movs	r1, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800375a:	2380      	movs	r3, #128	@ 0x80
 800375c:	035b      	lsls	r3, r3, #13
 800375e:	429a      	cmp	r2, r3
 8003760:	d10b      	bne.n	800377a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a15      	ldr	r2, [pc, #84]	@ (80037c0 <UART_AdvFeatureConfig+0x160>)
 800376a:	4013      	ands	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	2280      	movs	r2, #128	@ 0x80
 8003780:	4013      	ands	r3, r2
 8003782:	d00b      	beq.n	800379c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4a0e      	ldr	r2, [pc, #56]	@ (80037c4 <UART_AdvFeatureConfig+0x164>)
 800378c:	4013      	ands	r3, r2
 800378e:	0019      	movs	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
  }
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	ffff7fff 	.word	0xffff7fff
 80037a8:	fffdffff 	.word	0xfffdffff
 80037ac:	fffeffff 	.word	0xfffeffff
 80037b0:	fffbffff 	.word	0xfffbffff
 80037b4:	ffffefff 	.word	0xffffefff
 80037b8:	ffffdfff 	.word	0xffffdfff
 80037bc:	ffefffff 	.word	0xffefffff
 80037c0:	ff9fffff 	.word	0xff9fffff
 80037c4:	fff7ffff 	.word	0xfff7ffff

080037c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b092      	sub	sp, #72	@ 0x48
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2284      	movs	r2, #132	@ 0x84
 80037d4:	2100      	movs	r1, #0
 80037d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d8:	f7fd fba6 	bl	8000f28 <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2208      	movs	r2, #8
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d12c      	bne.n	8003848 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f0:	2280      	movs	r2, #128	@ 0x80
 80037f2:	0391      	lsls	r1, r2, #14
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4a46      	ldr	r2, [pc, #280]	@ (8003910 <UART_CheckIdleState+0x148>)
 80037f8:	9200      	str	r2, [sp, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f000 f88c 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d021      	beq.n	8003848 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003804:	f3ef 8310 	mrs	r3, PRIMASK
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800380c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800380e:	2301      	movs	r3, #1
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003814:	f383 8810 	msr	PRIMASK, r3
}
 8003818:	46c0      	nop			@ (mov r8, r8)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2180      	movs	r1, #128	@ 0x80
 8003826:	438a      	bics	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003830:	f383 8810 	msr	PRIMASK, r3
}
 8003834:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2278      	movs	r2, #120	@ 0x78
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e05f      	b.n	8003908 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2204      	movs	r2, #4
 8003850:	4013      	ands	r3, r2
 8003852:	2b04      	cmp	r3, #4
 8003854:	d146      	bne.n	80038e4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003858:	2280      	movs	r2, #128	@ 0x80
 800385a:	03d1      	lsls	r1, r2, #15
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4a2c      	ldr	r2, [pc, #176]	@ (8003910 <UART_CheckIdleState+0x148>)
 8003860:	9200      	str	r2, [sp, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	f000 f858 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 8003868:	1e03      	subs	r3, r0, #0
 800386a:	d03b      	beq.n	80038e4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	60fb      	str	r3, [r7, #12]
  return(result);
 8003872:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	637b      	str	r3, [r7, #52]	@ 0x34
 8003876:	2301      	movs	r3, #1
 8003878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4921      	ldr	r1, [pc, #132]	@ (8003914 <UART_CheckIdleState+0x14c>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8310 	mrs	r3, PRIMASK
 80038a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80038a4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a8:	2301      	movs	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	438a      	bics	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2280      	movs	r2, #128	@ 0x80
 80038d4:	2120      	movs	r1, #32
 80038d6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2278      	movs	r2, #120	@ 0x78
 80038dc:	2100      	movs	r1, #0
 80038de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e011      	b.n	8003908 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2280      	movs	r2, #128	@ 0x80
 80038ee:	2120      	movs	r1, #32
 80038f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2278      	movs	r2, #120	@ 0x78
 8003902:	2100      	movs	r1, #0
 8003904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b010      	add	sp, #64	@ 0x40
 800390e:	bd80      	pop	{r7, pc}
 8003910:	01ffffff 	.word	0x01ffffff
 8003914:	fffffedf 	.word	0xfffffedf

08003918 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003928:	e051      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	3301      	adds	r3, #1
 800392e:	d04e      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fd fafa 	bl	8000f28 <HAL_GetTick>
 8003934:	0002      	movs	r2, r0
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e051      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2204      	movs	r2, #4
 8003952:	4013      	ands	r3, r2
 8003954:	d03b      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b80      	cmp	r3, #128	@ 0x80
 800395a:	d038      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b40      	cmp	r3, #64	@ 0x40
 8003960:	d035      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2208      	movs	r2, #8
 800396a:	4013      	ands	r3, r2
 800396c:	2b08      	cmp	r3, #8
 800396e:	d111      	bne.n	8003994 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	0018      	movs	r0, r3
 800397c:	f000 f900 	bl	8003b80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2284      	movs	r2, #132	@ 0x84
 8003984:	2108      	movs	r1, #8
 8003986:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2278      	movs	r2, #120	@ 0x78
 800398c:	2100      	movs	r1, #0
 800398e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e02c      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	2380      	movs	r3, #128	@ 0x80
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	401a      	ands	r2, r3
 80039a0:	2380      	movs	r3, #128	@ 0x80
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d112      	bne.n	80039ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2280      	movs	r2, #128	@ 0x80
 80039ae:	0112      	lsls	r2, r2, #4
 80039b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f000 f8e3 	bl	8003b80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2284      	movs	r2, #132	@ 0x84
 80039be:	2120      	movs	r1, #32
 80039c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2278      	movs	r2, #120	@ 0x78
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e00f      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	425a      	negs	r2, r3
 80039de:	4153      	adcs	r3, r2
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	001a      	movs	r2, r3
 80039e4:	1dfb      	adds	r3, r7, #7
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d09e      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b004      	add	sp, #16
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b090      	sub	sp, #64	@ 0x40
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	1dbb      	adds	r3, r7, #6
 8003a04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1dba      	adds	r2, r7, #6
 8003a10:	2158      	movs	r1, #88	@ 0x58
 8003a12:	8812      	ldrh	r2, [r2, #0]
 8003a14:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2284      	movs	r2, #132	@ 0x84
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2280      	movs	r2, #128	@ 0x80
 8003a22:	2122      	movs	r1, #34	@ 0x22
 8003a24:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d028      	beq.n	8003a80 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a32:	4a3e      	ldr	r2, [pc, #248]	@ (8003b2c <UART_Start_Receive_DMA+0x134>)
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b30 <UART_Start_Receive_DMA+0x138>)
 8003a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a42:	4a3c      	ldr	r2, [pc, #240]	@ (8003b34 <UART_Start_Receive_DMA+0x13c>)
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3324      	adds	r3, #36	@ 0x24
 8003a58:	0019      	movs	r1, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	001a      	movs	r2, r3
 8003a60:	1dbb      	adds	r3, r7, #6
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	f7fd fb90 	bl	8001188 <HAL_DMA_Start_IT>
 8003a68:	1e03      	subs	r3, r0, #0
 8003a6a:	d009      	beq.n	8003a80 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2284      	movs	r2, #132	@ 0x84
 8003a70:	2110      	movs	r1, #16
 8003a72:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2280      	movs	r2, #128	@ 0x80
 8003a78:	2120      	movs	r1, #32
 8003a7a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e050      	b.n	8003b22 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d019      	beq.n	8003abc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a88:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a92:	2301      	movs	r3, #1
 8003a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2180      	movs	r1, #128	@ 0x80
 8003aaa:	0049      	lsls	r1, r1, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab6:	f383 8810 	msr	PRIMASK, r3
}
 8003aba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac0:	613b      	str	r3, [r7, #16]
  return(result);
 8003ac2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	61fb      	str	r3, [r7, #28]
  return(result);
 8003af4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af8:	2301      	movs	r3, #1
 8003afa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2140      	movs	r1, #64	@ 0x40
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b010      	add	sp, #64	@ 0x40
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	46c0      	nop			@ (mov r8, r8)
 8003b2c:	08003c49 	.word	0x08003c49
 8003b30:	08003d75 	.word	0x08003d75
 8003b34:	08003db7 	.word	0x08003db7

08003b38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b40:	f3ef 8310 	mrs	r3, PRIMASK
 8003b44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b46:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f383 8810 	msr	PRIMASK, r3
}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	21c0      	movs	r1, #192	@ 0xc0
 8003b62:	438a      	bics	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f383 8810 	msr	PRIMASK, r3
}
 8003b70:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b006      	add	sp, #24
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08e      	sub	sp, #56	@ 0x38
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b88:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b8e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b92:	2301      	movs	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4926      	ldr	r1, [pc, #152]	@ (8003c44 <UART_EndRxTransfer+0xc4>)
 8003baa:	400a      	ands	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bba:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbe:	623b      	str	r3, [r7, #32]
  return(result);
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	f383 8810 	msr	PRIMASK, r3
}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2101      	movs	r1, #1
 8003bdc:	438a      	bics	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d118      	bne.n	8003c26 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfe:	2301      	movs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			@ (mov r8, r8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2110      	movs	r1, #16
 8003c16:	438a      	bics	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2280      	movs	r2, #128	@ 0x80
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b00e      	add	sp, #56	@ 0x38
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	fffffedf 	.word	0xfffffedf

08003c48 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b094      	sub	sp, #80	@ 0x50
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d06f      	beq.n	8003d3e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c60:	225a      	movs	r2, #90	@ 0x5a
 8003c62:	2100      	movs	r1, #0
 8003c64:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c66:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c6c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c70:	2301      	movs	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	493a      	ldr	r1, [pc, #232]	@ (8003d70 <UART_DMAReceiveCplt+0x128>)
 8003c88:	400a      	ands	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c98:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	438a      	bics	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc4:	f383 8810 	msr	PRIMASK, r3
}
 8003cc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cca:	f3ef 8310 	mrs	r3, PRIMASK
 8003cce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2140      	movs	r1, #64	@ 0x40
 8003cec:	438a      	bics	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf6:	f383 8810 	msr	PRIMASK, r3
}
 8003cfa:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cfe:	2280      	movs	r2, #128	@ 0x80
 8003d00:	2120      	movs	r1, #32
 8003d02:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d118      	bne.n	8003d3e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d12:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d16:	2301      	movs	r3, #1
 8003d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
 8003d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2110      	movs	r1, #16
 8003d2e:	438a      	bics	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f383 8810 	msr	PRIMASK, r3
}
 8003d3c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d40:	2200      	movs	r2, #0
 8003d42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d108      	bne.n	8003d5e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d4e:	2258      	movs	r2, #88	@ 0x58
 8003d50:	5a9a      	ldrh	r2, [r3, r2]
 8003d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d54:	0011      	movs	r1, r2
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7ff fb36 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d5c:	e003      	b.n	8003d66 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff fb19 	bl	8003398 <HAL_UART_RxCpltCallback>
}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b014      	add	sp, #80	@ 0x50
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	fffffeff 	.word	0xfffffeff

08003d74 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10a      	bne.n	8003da6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2258      	movs	r2, #88	@ 0x58
 8003d94:	5a9b      	ldrh	r3, [r3, r2]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0011      	movs	r1, r2
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f7ff fb12 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003da4:	e003      	b.n	8003dae <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff fafd 	bl	80033a8 <HAL_UART_RxHalfCpltCallback>
}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2280      	movs	r2, #128	@ 0x80
 8003dce:	589b      	ldr	r3, [r3, r2]
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2280      	movs	r2, #128	@ 0x80
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b80      	cmp	r3, #128	@ 0x80
 8003dde:	d10a      	bne.n	8003df6 <UART_DMAError+0x40>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b21      	cmp	r3, #33	@ 0x21
 8003de4:	d107      	bne.n	8003df6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2252      	movs	r2, #82	@ 0x52
 8003dea:	2100      	movs	r1, #0
 8003dec:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff fea1 	bl	8003b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2240      	movs	r2, #64	@ 0x40
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b40      	cmp	r3, #64	@ 0x40
 8003e02:	d10a      	bne.n	8003e1a <UART_DMAError+0x64>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b22      	cmp	r3, #34	@ 0x22
 8003e08:	d107      	bne.n	8003e1a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	225a      	movs	r2, #90	@ 0x5a
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7ff feb3 	bl	8003b80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2284      	movs	r2, #132	@ 0x84
 8003e1e:	589b      	ldr	r3, [r3, r2]
 8003e20:	2210      	movs	r2, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2184      	movs	r1, #132	@ 0x84
 8003e28:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff fac3 	bl	80033b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b006      	add	sp, #24
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <atoi>:
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f000 f88c 	bl	8003f5c <strtol>
 8003e44:	bd10      	pop	{r4, pc}
	...

08003e48 <_strtol_l.constprop.0>:
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	0017      	movs	r7, r2
 8003e4e:	001e      	movs	r6, r3
 8003e50:	9003      	str	r0, [sp, #12]
 8003e52:	9101      	str	r1, [sp, #4]
 8003e54:	2b24      	cmp	r3, #36	@ 0x24
 8003e56:	d844      	bhi.n	8003ee2 <_strtol_l.constprop.0+0x9a>
 8003e58:	000c      	movs	r4, r1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d041      	beq.n	8003ee2 <_strtol_l.constprop.0+0x9a>
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <_strtol_l.constprop.0+0x10c>)
 8003e60:	2208      	movs	r2, #8
 8003e62:	469c      	mov	ip, r3
 8003e64:	0023      	movs	r3, r4
 8003e66:	4661      	mov	r1, ip
 8003e68:	781d      	ldrb	r5, [r3, #0]
 8003e6a:	3401      	adds	r4, #1
 8003e6c:	5d48      	ldrb	r0, [r1, r5]
 8003e6e:	0001      	movs	r1, r0
 8003e70:	4011      	ands	r1, r2
 8003e72:	4210      	tst	r0, r2
 8003e74:	d1f6      	bne.n	8003e64 <_strtol_l.constprop.0+0x1c>
 8003e76:	2d2d      	cmp	r5, #45	@ 0x2d
 8003e78:	d13a      	bne.n	8003ef0 <_strtol_l.constprop.0+0xa8>
 8003e7a:	7825      	ldrb	r5, [r4, #0]
 8003e7c:	1c9c      	adds	r4, r3, #2
 8003e7e:	2301      	movs	r3, #1
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	0033      	movs	r3, r6
 8003e86:	4393      	bics	r3, r2
 8003e88:	d109      	bne.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003e8a:	2d30      	cmp	r5, #48	@ 0x30
 8003e8c:	d136      	bne.n	8003efc <_strtol_l.constprop.0+0xb4>
 8003e8e:	2120      	movs	r1, #32
 8003e90:	7823      	ldrb	r3, [r4, #0]
 8003e92:	438b      	bics	r3, r1
 8003e94:	2b58      	cmp	r3, #88	@ 0x58
 8003e96:	d131      	bne.n	8003efc <_strtol_l.constprop.0+0xb4>
 8003e98:	0016      	movs	r6, r2
 8003e9a:	7865      	ldrb	r5, [r4, #1]
 8003e9c:	3402      	adds	r4, #2
 8003e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f58 <_strtol_l.constprop.0+0x110>)
 8003ea0:	9b00      	ldr	r3, [sp, #0]
 8003ea2:	4694      	mov	ip, r2
 8003ea4:	4463      	add	r3, ip
 8003ea6:	0031      	movs	r1, r6
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	f7fc f9bc 	bl	8000228 <__aeabi_uidivmod>
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4684      	mov	ip, r0
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	002b      	movs	r3, r5
 8003eb8:	3b30      	subs	r3, #48	@ 0x30
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d825      	bhi.n	8003f0a <_strtol_l.constprop.0+0xc2>
 8003ebe:	001d      	movs	r5, r3
 8003ec0:	42ae      	cmp	r6, r5
 8003ec2:	dd31      	ble.n	8003f28 <_strtol_l.constprop.0+0xe0>
 8003ec4:	1c53      	adds	r3, r2, #1
 8003ec6:	d009      	beq.n	8003edc <_strtol_l.constprop.0+0x94>
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4252      	negs	r2, r2
 8003ecc:	4584      	cmp	ip, r0
 8003ece:	d305      	bcc.n	8003edc <_strtol_l.constprop.0+0x94>
 8003ed0:	d101      	bne.n	8003ed6 <_strtol_l.constprop.0+0x8e>
 8003ed2:	42a9      	cmp	r1, r5
 8003ed4:	db25      	blt.n	8003f22 <_strtol_l.constprop.0+0xda>
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	4370      	muls	r0, r6
 8003eda:	1828      	adds	r0, r5, r0
 8003edc:	7825      	ldrb	r5, [r4, #0]
 8003ede:	3401      	adds	r4, #1
 8003ee0:	e7e9      	b.n	8003eb6 <_strtol_l.constprop.0+0x6e>
 8003ee2:	f000 fb41 	bl	8004568 <__errno>
 8003ee6:	2316      	movs	r3, #22
 8003ee8:	6003      	str	r3, [r0, #0]
 8003eea:	2000      	movs	r0, #0
 8003eec:	b005      	add	sp, #20
 8003eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef0:	9100      	str	r1, [sp, #0]
 8003ef2:	2d2b      	cmp	r5, #43	@ 0x2b
 8003ef4:	d1c5      	bne.n	8003e82 <_strtol_l.constprop.0+0x3a>
 8003ef6:	7825      	ldrb	r5, [r4, #0]
 8003ef8:	1c9c      	adds	r4, r3, #2
 8003efa:	e7c2      	b.n	8003e82 <_strtol_l.constprop.0+0x3a>
 8003efc:	2e00      	cmp	r6, #0
 8003efe:	d1ce      	bne.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003f00:	3608      	adds	r6, #8
 8003f02:	2d30      	cmp	r5, #48	@ 0x30
 8003f04:	d0cb      	beq.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003f06:	3602      	adds	r6, #2
 8003f08:	e7c9      	b.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003f0a:	002b      	movs	r3, r5
 8003f0c:	3b41      	subs	r3, #65	@ 0x41
 8003f0e:	2b19      	cmp	r3, #25
 8003f10:	d801      	bhi.n	8003f16 <_strtol_l.constprop.0+0xce>
 8003f12:	3d37      	subs	r5, #55	@ 0x37
 8003f14:	e7d4      	b.n	8003ec0 <_strtol_l.constprop.0+0x78>
 8003f16:	002b      	movs	r3, r5
 8003f18:	3b61      	subs	r3, #97	@ 0x61
 8003f1a:	2b19      	cmp	r3, #25
 8003f1c:	d804      	bhi.n	8003f28 <_strtol_l.constprop.0+0xe0>
 8003f1e:	3d57      	subs	r5, #87	@ 0x57
 8003f20:	e7ce      	b.n	8003ec0 <_strtol_l.constprop.0+0x78>
 8003f22:	2201      	movs	r2, #1
 8003f24:	4252      	negs	r2, r2
 8003f26:	e7d9      	b.n	8003edc <_strtol_l.constprop.0+0x94>
 8003f28:	1c53      	adds	r3, r2, #1
 8003f2a:	d108      	bne.n	8003f3e <_strtol_l.constprop.0+0xf6>
 8003f2c:	2322      	movs	r3, #34	@ 0x22
 8003f2e:	9a03      	ldr	r2, [sp, #12]
 8003f30:	9802      	ldr	r0, [sp, #8]
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	2f00      	cmp	r7, #0
 8003f36:	d0d9      	beq.n	8003eec <_strtol_l.constprop.0+0xa4>
 8003f38:	1e63      	subs	r3, r4, #1
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	e007      	b.n	8003f4e <_strtol_l.constprop.0+0x106>
 8003f3e:	9b00      	ldr	r3, [sp, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d000      	beq.n	8003f46 <_strtol_l.constprop.0+0xfe>
 8003f44:	4240      	negs	r0, r0
 8003f46:	2f00      	cmp	r7, #0
 8003f48:	d0d0      	beq.n	8003eec <_strtol_l.constprop.0+0xa4>
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	d1f4      	bne.n	8003f38 <_strtol_l.constprop.0+0xf0>
 8003f4e:	9b01      	ldr	r3, [sp, #4]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	e7cb      	b.n	8003eec <_strtol_l.constprop.0+0xa4>
 8003f54:	08005271 	.word	0x08005271
 8003f58:	7fffffff 	.word	0x7fffffff

08003f5c <strtol>:
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	4c04      	ldr	r4, [pc, #16]	@ (8003f70 <strtol+0x14>)
 8003f60:	0013      	movs	r3, r2
 8003f62:	000a      	movs	r2, r1
 8003f64:	0001      	movs	r1, r0
 8003f66:	6820      	ldr	r0, [r4, #0]
 8003f68:	f7ff ff6e 	bl	8003e48 <_strtol_l.constprop.0>
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	20000018 	.word	0x20000018

08003f74 <std>:
 8003f74:	2300      	movs	r3, #0
 8003f76:	b510      	push	{r4, lr}
 8003f78:	0004      	movs	r4, r0
 8003f7a:	6003      	str	r3, [r0, #0]
 8003f7c:	6043      	str	r3, [r0, #4]
 8003f7e:	6083      	str	r3, [r0, #8]
 8003f80:	8181      	strh	r1, [r0, #12]
 8003f82:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f84:	81c2      	strh	r2, [r0, #14]
 8003f86:	6103      	str	r3, [r0, #16]
 8003f88:	6143      	str	r3, [r0, #20]
 8003f8a:	6183      	str	r3, [r0, #24]
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	2208      	movs	r2, #8
 8003f90:	305c      	adds	r0, #92	@ 0x5c
 8003f92:	f000 fa19 	bl	80043c8 <memset>
 8003f96:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <std+0x50>)
 8003f98:	6224      	str	r4, [r4, #32]
 8003f9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <std+0x54>)
 8003f9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fcc <std+0x58>)
 8003fa2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <std+0x5c>)
 8003fa6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <std+0x60>)
 8003faa:	429c      	cmp	r4, r3
 8003fac:	d005      	beq.n	8003fba <std+0x46>
 8003fae:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <std+0x64>)
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d002      	beq.n	8003fba <std+0x46>
 8003fb4:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <std+0x68>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	d103      	bne.n	8003fc2 <std+0x4e>
 8003fba:	0020      	movs	r0, r4
 8003fbc:	3058      	adds	r0, #88	@ 0x58
 8003fbe:	f000 fafd 	bl	80045bc <__retarget_lock_init_recursive>
 8003fc2:	bd10      	pop	{r4, pc}
 8003fc4:	080041f1 	.word	0x080041f1
 8003fc8:	08004219 	.word	0x08004219
 8003fcc:	08004251 	.word	0x08004251
 8003fd0:	0800427d 	.word	0x0800427d
 8003fd4:	20000348 	.word	0x20000348
 8003fd8:	200003b0 	.word	0x200003b0
 8003fdc:	20000418 	.word	0x20000418

08003fe0 <stdio_exit_handler>:
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4a03      	ldr	r2, [pc, #12]	@ (8003ff0 <stdio_exit_handler+0x10>)
 8003fe4:	4903      	ldr	r1, [pc, #12]	@ (8003ff4 <stdio_exit_handler+0x14>)
 8003fe6:	4804      	ldr	r0, [pc, #16]	@ (8003ff8 <stdio_exit_handler+0x18>)
 8003fe8:	f000 f86c 	bl	80040c4 <_fwalk_sglue>
 8003fec:	bd10      	pop	{r4, pc}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	2000000c 	.word	0x2000000c
 8003ff4:	08004e9d 	.word	0x08004e9d
 8003ff8:	2000001c 	.word	0x2000001c

08003ffc <cleanup_stdio>:
 8003ffc:	6841      	ldr	r1, [r0, #4]
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <cleanup_stdio+0x30>)
 8004000:	b510      	push	{r4, lr}
 8004002:	0004      	movs	r4, r0
 8004004:	4299      	cmp	r1, r3
 8004006:	d001      	beq.n	800400c <cleanup_stdio+0x10>
 8004008:	f000 ff48 	bl	8004e9c <_fflush_r>
 800400c:	68a1      	ldr	r1, [r4, #8]
 800400e:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <cleanup_stdio+0x34>)
 8004010:	4299      	cmp	r1, r3
 8004012:	d002      	beq.n	800401a <cleanup_stdio+0x1e>
 8004014:	0020      	movs	r0, r4
 8004016:	f000 ff41 	bl	8004e9c <_fflush_r>
 800401a:	68e1      	ldr	r1, [r4, #12]
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <cleanup_stdio+0x38>)
 800401e:	4299      	cmp	r1, r3
 8004020:	d002      	beq.n	8004028 <cleanup_stdio+0x2c>
 8004022:	0020      	movs	r0, r4
 8004024:	f000 ff3a 	bl	8004e9c <_fflush_r>
 8004028:	bd10      	pop	{r4, pc}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	20000348 	.word	0x20000348
 8004030:	200003b0 	.word	0x200003b0
 8004034:	20000418 	.word	0x20000418

08004038 <global_stdio_init.part.0>:
 8004038:	b510      	push	{r4, lr}
 800403a:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <global_stdio_init.part.0+0x28>)
 800403c:	4a09      	ldr	r2, [pc, #36]	@ (8004064 <global_stdio_init.part.0+0x2c>)
 800403e:	2104      	movs	r1, #4
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	4809      	ldr	r0, [pc, #36]	@ (8004068 <global_stdio_init.part.0+0x30>)
 8004044:	2200      	movs	r2, #0
 8004046:	f7ff ff95 	bl	8003f74 <std>
 800404a:	2201      	movs	r2, #1
 800404c:	2109      	movs	r1, #9
 800404e:	4807      	ldr	r0, [pc, #28]	@ (800406c <global_stdio_init.part.0+0x34>)
 8004050:	f7ff ff90 	bl	8003f74 <std>
 8004054:	2202      	movs	r2, #2
 8004056:	2112      	movs	r1, #18
 8004058:	4805      	ldr	r0, [pc, #20]	@ (8004070 <global_stdio_init.part.0+0x38>)
 800405a:	f7ff ff8b 	bl	8003f74 <std>
 800405e:	bd10      	pop	{r4, pc}
 8004060:	20000480 	.word	0x20000480
 8004064:	08003fe1 	.word	0x08003fe1
 8004068:	20000348 	.word	0x20000348
 800406c:	200003b0 	.word	0x200003b0
 8004070:	20000418 	.word	0x20000418

08004074 <__sfp_lock_acquire>:
 8004074:	b510      	push	{r4, lr}
 8004076:	4802      	ldr	r0, [pc, #8]	@ (8004080 <__sfp_lock_acquire+0xc>)
 8004078:	f000 faa1 	bl	80045be <__retarget_lock_acquire_recursive>
 800407c:	bd10      	pop	{r4, pc}
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	20000489 	.word	0x20000489

08004084 <__sfp_lock_release>:
 8004084:	b510      	push	{r4, lr}
 8004086:	4802      	ldr	r0, [pc, #8]	@ (8004090 <__sfp_lock_release+0xc>)
 8004088:	f000 fa9a 	bl	80045c0 <__retarget_lock_release_recursive>
 800408c:	bd10      	pop	{r4, pc}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	20000489 	.word	0x20000489

08004094 <__sinit>:
 8004094:	b510      	push	{r4, lr}
 8004096:	0004      	movs	r4, r0
 8004098:	f7ff ffec 	bl	8004074 <__sfp_lock_acquire>
 800409c:	6a23      	ldr	r3, [r4, #32]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <__sinit+0x14>
 80040a2:	f7ff ffef 	bl	8004084 <__sfp_lock_release>
 80040a6:	bd10      	pop	{r4, pc}
 80040a8:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <__sinit+0x28>)
 80040aa:	6223      	str	r3, [r4, #32]
 80040ac:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <__sinit+0x2c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f6      	bne.n	80040a2 <__sinit+0xe>
 80040b4:	f7ff ffc0 	bl	8004038 <global_stdio_init.part.0>
 80040b8:	e7f3      	b.n	80040a2 <__sinit+0xe>
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	08003ffd 	.word	0x08003ffd
 80040c0:	20000480 	.word	0x20000480

080040c4 <_fwalk_sglue>:
 80040c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040c6:	0014      	movs	r4, r2
 80040c8:	2600      	movs	r6, #0
 80040ca:	9000      	str	r0, [sp, #0]
 80040cc:	9101      	str	r1, [sp, #4]
 80040ce:	68a5      	ldr	r5, [r4, #8]
 80040d0:	6867      	ldr	r7, [r4, #4]
 80040d2:	3f01      	subs	r7, #1
 80040d4:	d504      	bpl.n	80040e0 <_fwalk_sglue+0x1c>
 80040d6:	6824      	ldr	r4, [r4, #0]
 80040d8:	2c00      	cmp	r4, #0
 80040da:	d1f8      	bne.n	80040ce <_fwalk_sglue+0xa>
 80040dc:	0030      	movs	r0, r6
 80040de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040e0:	89ab      	ldrh	r3, [r5, #12]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d908      	bls.n	80040f8 <_fwalk_sglue+0x34>
 80040e6:	220e      	movs	r2, #14
 80040e8:	5eab      	ldrsh	r3, [r5, r2]
 80040ea:	3301      	adds	r3, #1
 80040ec:	d004      	beq.n	80040f8 <_fwalk_sglue+0x34>
 80040ee:	0029      	movs	r1, r5
 80040f0:	9800      	ldr	r0, [sp, #0]
 80040f2:	9b01      	ldr	r3, [sp, #4]
 80040f4:	4798      	blx	r3
 80040f6:	4306      	orrs	r6, r0
 80040f8:	3568      	adds	r5, #104	@ 0x68
 80040fa:	e7ea      	b.n	80040d2 <_fwalk_sglue+0xe>

080040fc <iprintf>:
 80040fc:	b40f      	push	{r0, r1, r2, r3}
 80040fe:	b507      	push	{r0, r1, r2, lr}
 8004100:	4905      	ldr	r1, [pc, #20]	@ (8004118 <iprintf+0x1c>)
 8004102:	ab04      	add	r3, sp, #16
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	cb04      	ldmia	r3!, {r2}
 8004108:	6881      	ldr	r1, [r0, #8]
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	f000 fba6 	bl	800485c <_vfiprintf_r>
 8004110:	b003      	add	sp, #12
 8004112:	bc08      	pop	{r3}
 8004114:	b004      	add	sp, #16
 8004116:	4718      	bx	r3
 8004118:	20000018 	.word	0x20000018

0800411c <putchar>:
 800411c:	b510      	push	{r4, lr}
 800411e:	4b03      	ldr	r3, [pc, #12]	@ (800412c <putchar+0x10>)
 8004120:	0001      	movs	r1, r0
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	6882      	ldr	r2, [r0, #8]
 8004126:	f000 ff60 	bl	8004fea <_putc_r>
 800412a:	bd10      	pop	{r4, pc}
 800412c:	20000018 	.word	0x20000018

08004130 <_puts_r>:
 8004130:	6a03      	ldr	r3, [r0, #32]
 8004132:	b570      	push	{r4, r5, r6, lr}
 8004134:	0005      	movs	r5, r0
 8004136:	000e      	movs	r6, r1
 8004138:	6884      	ldr	r4, [r0, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <_puts_r+0x12>
 800413e:	f7ff ffa9 	bl	8004094 <__sinit>
 8004142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004144:	07db      	lsls	r3, r3, #31
 8004146:	d405      	bmi.n	8004154 <_puts_r+0x24>
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	059b      	lsls	r3, r3, #22
 800414c:	d402      	bmi.n	8004154 <_puts_r+0x24>
 800414e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004150:	f000 fa35 	bl	80045be <__retarget_lock_acquire_recursive>
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	071b      	lsls	r3, r3, #28
 8004158:	d502      	bpl.n	8004160 <_puts_r+0x30>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11f      	bne.n	80041a0 <_puts_r+0x70>
 8004160:	0021      	movs	r1, r4
 8004162:	0028      	movs	r0, r5
 8004164:	f000 f8d2 	bl	800430c <__swsetup_r>
 8004168:	2800      	cmp	r0, #0
 800416a:	d019      	beq.n	80041a0 <_puts_r+0x70>
 800416c:	2501      	movs	r5, #1
 800416e:	426d      	negs	r5, r5
 8004170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004172:	07db      	lsls	r3, r3, #31
 8004174:	d405      	bmi.n	8004182 <_puts_r+0x52>
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	059b      	lsls	r3, r3, #22
 800417a:	d402      	bmi.n	8004182 <_puts_r+0x52>
 800417c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800417e:	f000 fa1f 	bl	80045c0 <__retarget_lock_release_recursive>
 8004182:	0028      	movs	r0, r5
 8004184:	bd70      	pop	{r4, r5, r6, pc}
 8004186:	3601      	adds	r6, #1
 8004188:	60a3      	str	r3, [r4, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	da04      	bge.n	8004198 <_puts_r+0x68>
 800418e:	69a2      	ldr	r2, [r4, #24]
 8004190:	429a      	cmp	r2, r3
 8004192:	dc16      	bgt.n	80041c2 <_puts_r+0x92>
 8004194:	290a      	cmp	r1, #10
 8004196:	d014      	beq.n	80041c2 <_puts_r+0x92>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	6022      	str	r2, [r4, #0]
 800419e:	7019      	strb	r1, [r3, #0]
 80041a0:	68a3      	ldr	r3, [r4, #8]
 80041a2:	7831      	ldrb	r1, [r6, #0]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	2900      	cmp	r1, #0
 80041a8:	d1ed      	bne.n	8004186 <_puts_r+0x56>
 80041aa:	60a3      	str	r3, [r4, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	da0f      	bge.n	80041d0 <_puts_r+0xa0>
 80041b0:	0022      	movs	r2, r4
 80041b2:	0028      	movs	r0, r5
 80041b4:	310a      	adds	r1, #10
 80041b6:	f000 f867 	bl	8004288 <__swbuf_r>
 80041ba:	3001      	adds	r0, #1
 80041bc:	d0d6      	beq.n	800416c <_puts_r+0x3c>
 80041be:	250a      	movs	r5, #10
 80041c0:	e7d6      	b.n	8004170 <_puts_r+0x40>
 80041c2:	0022      	movs	r2, r4
 80041c4:	0028      	movs	r0, r5
 80041c6:	f000 f85f 	bl	8004288 <__swbuf_r>
 80041ca:	3001      	adds	r0, #1
 80041cc:	d1e8      	bne.n	80041a0 <_puts_r+0x70>
 80041ce:	e7cd      	b.n	800416c <_puts_r+0x3c>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	6022      	str	r2, [r4, #0]
 80041d6:	220a      	movs	r2, #10
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e7f0      	b.n	80041be <_puts_r+0x8e>

080041dc <puts>:
 80041dc:	b510      	push	{r4, lr}
 80041de:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <puts+0x10>)
 80041e0:	0001      	movs	r1, r0
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	f7ff ffa4 	bl	8004130 <_puts_r>
 80041e8:	bd10      	pop	{r4, pc}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	20000018 	.word	0x20000018

080041f0 <__sread>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	000c      	movs	r4, r1
 80041f4:	250e      	movs	r5, #14
 80041f6:	5f49      	ldrsh	r1, [r1, r5]
 80041f8:	f000 f98e 	bl	8004518 <_read_r>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	db03      	blt.n	8004208 <__sread+0x18>
 8004200:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004202:	181b      	adds	r3, r3, r0
 8004204:	6563      	str	r3, [r4, #84]	@ 0x54
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	4a02      	ldr	r2, [pc, #8]	@ (8004214 <__sread+0x24>)
 800420c:	4013      	ands	r3, r2
 800420e:	81a3      	strh	r3, [r4, #12]
 8004210:	e7f9      	b.n	8004206 <__sread+0x16>
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	ffffefff 	.word	0xffffefff

08004218 <__swrite>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	001f      	movs	r7, r3
 800421c:	898b      	ldrh	r3, [r1, #12]
 800421e:	0005      	movs	r5, r0
 8004220:	000c      	movs	r4, r1
 8004222:	0016      	movs	r6, r2
 8004224:	05db      	lsls	r3, r3, #23
 8004226:	d505      	bpl.n	8004234 <__swrite+0x1c>
 8004228:	230e      	movs	r3, #14
 800422a:	5ec9      	ldrsh	r1, [r1, r3]
 800422c:	2200      	movs	r2, #0
 800422e:	2302      	movs	r3, #2
 8004230:	f000 f95e 	bl	80044f0 <_lseek_r>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	4a05      	ldr	r2, [pc, #20]	@ (800424c <__swrite+0x34>)
 8004238:	0028      	movs	r0, r5
 800423a:	4013      	ands	r3, r2
 800423c:	81a3      	strh	r3, [r4, #12]
 800423e:	0032      	movs	r2, r6
 8004240:	230e      	movs	r3, #14
 8004242:	5ee1      	ldrsh	r1, [r4, r3]
 8004244:	003b      	movs	r3, r7
 8004246:	f000 f97b 	bl	8004540 <_write_r>
 800424a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800424c:	ffffefff 	.word	0xffffefff

08004250 <__sseek>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	000c      	movs	r4, r1
 8004254:	250e      	movs	r5, #14
 8004256:	5f49      	ldrsh	r1, [r1, r5]
 8004258:	f000 f94a 	bl	80044f0 <_lseek_r>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	1c42      	adds	r2, r0, #1
 8004260:	d103      	bne.n	800426a <__sseek+0x1a>
 8004262:	4a05      	ldr	r2, [pc, #20]	@ (8004278 <__sseek+0x28>)
 8004264:	4013      	ands	r3, r2
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	bd70      	pop	{r4, r5, r6, pc}
 800426a:	2280      	movs	r2, #128	@ 0x80
 800426c:	0152      	lsls	r2, r2, #5
 800426e:	4313      	orrs	r3, r2
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	6560      	str	r0, [r4, #84]	@ 0x54
 8004274:	e7f8      	b.n	8004268 <__sseek+0x18>
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	ffffefff 	.word	0xffffefff

0800427c <__sclose>:
 800427c:	b510      	push	{r4, lr}
 800427e:	230e      	movs	r3, #14
 8004280:	5ec9      	ldrsh	r1, [r1, r3]
 8004282:	f000 f923 	bl	80044cc <_close_r>
 8004286:	bd10      	pop	{r4, pc}

08004288 <__swbuf_r>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	0006      	movs	r6, r0
 800428c:	000d      	movs	r5, r1
 800428e:	0014      	movs	r4, r2
 8004290:	2800      	cmp	r0, #0
 8004292:	d004      	beq.n	800429e <__swbuf_r+0x16>
 8004294:	6a03      	ldr	r3, [r0, #32]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <__swbuf_r+0x16>
 800429a:	f7ff fefb 	bl	8004094 <__sinit>
 800429e:	69a3      	ldr	r3, [r4, #24]
 80042a0:	60a3      	str	r3, [r4, #8]
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	071b      	lsls	r3, r3, #28
 80042a6:	d502      	bpl.n	80042ae <__swbuf_r+0x26>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <__swbuf_r+0x3a>
 80042ae:	0021      	movs	r1, r4
 80042b0:	0030      	movs	r0, r6
 80042b2:	f000 f82b 	bl	800430c <__swsetup_r>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d003      	beq.n	80042c2 <__swbuf_r+0x3a>
 80042ba:	2501      	movs	r5, #1
 80042bc:	426d      	negs	r5, r5
 80042be:	0028      	movs	r0, r5
 80042c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	6820      	ldr	r0, [r4, #0]
 80042c6:	b2ef      	uxtb	r7, r5
 80042c8:	1ac0      	subs	r0, r0, r3
 80042ca:	6963      	ldr	r3, [r4, #20]
 80042cc:	b2ed      	uxtb	r5, r5
 80042ce:	4283      	cmp	r3, r0
 80042d0:	dc05      	bgt.n	80042de <__swbuf_r+0x56>
 80042d2:	0021      	movs	r1, r4
 80042d4:	0030      	movs	r0, r6
 80042d6:	f000 fde1 	bl	8004e9c <_fflush_r>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d1ed      	bne.n	80042ba <__swbuf_r+0x32>
 80042de:	68a3      	ldr	r3, [r4, #8]
 80042e0:	3001      	adds	r0, #1
 80042e2:	3b01      	subs	r3, #1
 80042e4:	60a3      	str	r3, [r4, #8]
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	6022      	str	r2, [r4, #0]
 80042ec:	701f      	strb	r7, [r3, #0]
 80042ee:	6963      	ldr	r3, [r4, #20]
 80042f0:	4283      	cmp	r3, r0
 80042f2:	d004      	beq.n	80042fe <__swbuf_r+0x76>
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	07db      	lsls	r3, r3, #31
 80042f8:	d5e1      	bpl.n	80042be <__swbuf_r+0x36>
 80042fa:	2d0a      	cmp	r5, #10
 80042fc:	d1df      	bne.n	80042be <__swbuf_r+0x36>
 80042fe:	0021      	movs	r1, r4
 8004300:	0030      	movs	r0, r6
 8004302:	f000 fdcb 	bl	8004e9c <_fflush_r>
 8004306:	2800      	cmp	r0, #0
 8004308:	d0d9      	beq.n	80042be <__swbuf_r+0x36>
 800430a:	e7d6      	b.n	80042ba <__swbuf_r+0x32>

0800430c <__swsetup_r>:
 800430c:	4b2d      	ldr	r3, [pc, #180]	@ (80043c4 <__swsetup_r+0xb8>)
 800430e:	b570      	push	{r4, r5, r6, lr}
 8004310:	0005      	movs	r5, r0
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	000c      	movs	r4, r1
 8004316:	2800      	cmp	r0, #0
 8004318:	d004      	beq.n	8004324 <__swsetup_r+0x18>
 800431a:	6a03      	ldr	r3, [r0, #32]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <__swsetup_r+0x18>
 8004320:	f7ff feb8 	bl	8004094 <__sinit>
 8004324:	230c      	movs	r3, #12
 8004326:	5ee2      	ldrsh	r2, [r4, r3]
 8004328:	0713      	lsls	r3, r2, #28
 800432a:	d423      	bmi.n	8004374 <__swsetup_r+0x68>
 800432c:	06d3      	lsls	r3, r2, #27
 800432e:	d407      	bmi.n	8004340 <__swsetup_r+0x34>
 8004330:	2309      	movs	r3, #9
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	2340      	movs	r3, #64	@ 0x40
 8004336:	2001      	movs	r0, #1
 8004338:	4313      	orrs	r3, r2
 800433a:	81a3      	strh	r3, [r4, #12]
 800433c:	4240      	negs	r0, r0
 800433e:	e03a      	b.n	80043b6 <__swsetup_r+0xaa>
 8004340:	0752      	lsls	r2, r2, #29
 8004342:	d513      	bpl.n	800436c <__swsetup_r+0x60>
 8004344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004346:	2900      	cmp	r1, #0
 8004348:	d008      	beq.n	800435c <__swsetup_r+0x50>
 800434a:	0023      	movs	r3, r4
 800434c:	3344      	adds	r3, #68	@ 0x44
 800434e:	4299      	cmp	r1, r3
 8004350:	d002      	beq.n	8004358 <__swsetup_r+0x4c>
 8004352:	0028      	movs	r0, r5
 8004354:	f000 f954 	bl	8004600 <_free_r>
 8004358:	2300      	movs	r3, #0
 800435a:	6363      	str	r3, [r4, #52]	@ 0x34
 800435c:	2224      	movs	r2, #36	@ 0x24
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	4393      	bics	r3, r2
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	2300      	movs	r3, #0
 8004366:	6063      	str	r3, [r4, #4]
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	2308      	movs	r3, #8
 800436e:	89a2      	ldrh	r2, [r4, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	81a3      	strh	r3, [r4, #12]
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <__swsetup_r+0x86>
 800437a:	21a0      	movs	r1, #160	@ 0xa0
 800437c:	2280      	movs	r2, #128	@ 0x80
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	0089      	lsls	r1, r1, #2
 8004382:	0092      	lsls	r2, r2, #2
 8004384:	400b      	ands	r3, r1
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <__swsetup_r+0x86>
 800438a:	0021      	movs	r1, r4
 800438c:	0028      	movs	r0, r5
 800438e:	f000 fdeb 	bl	8004f68 <__smakebuf_r>
 8004392:	230c      	movs	r3, #12
 8004394:	5ee2      	ldrsh	r2, [r4, r3]
 8004396:	2101      	movs	r1, #1
 8004398:	0013      	movs	r3, r2
 800439a:	400b      	ands	r3, r1
 800439c:	420a      	tst	r2, r1
 800439e:	d00b      	beq.n	80043b8 <__swsetup_r+0xac>
 80043a0:	2300      	movs	r3, #0
 80043a2:	60a3      	str	r3, [r4, #8]
 80043a4:	6963      	ldr	r3, [r4, #20]
 80043a6:	425b      	negs	r3, r3
 80043a8:	61a3      	str	r3, [r4, #24]
 80043aa:	2000      	movs	r0, #0
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	4283      	cmp	r3, r0
 80043b0:	d101      	bne.n	80043b6 <__swsetup_r+0xaa>
 80043b2:	0613      	lsls	r3, r2, #24
 80043b4:	d4be      	bmi.n	8004334 <__swsetup_r+0x28>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	0791      	lsls	r1, r2, #30
 80043ba:	d400      	bmi.n	80043be <__swsetup_r+0xb2>
 80043bc:	6963      	ldr	r3, [r4, #20]
 80043be:	60a3      	str	r3, [r4, #8]
 80043c0:	e7f3      	b.n	80043aa <__swsetup_r+0x9e>
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	20000018 	.word	0x20000018

080043c8 <memset>:
 80043c8:	0003      	movs	r3, r0
 80043ca:	1882      	adds	r2, r0, r2
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d100      	bne.n	80043d2 <memset+0xa>
 80043d0:	4770      	bx	lr
 80043d2:	7019      	strb	r1, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	e7f9      	b.n	80043cc <memset+0x4>

080043d8 <strcasecmp>:
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043da:	0005      	movs	r5, r0
 80043dc:	2400      	movs	r4, #0
 80043de:	2703      	movs	r7, #3
 80043e0:	4e09      	ldr	r6, [pc, #36]	@ (8004408 <strcasecmp+0x30>)
 80043e2:	5d2a      	ldrb	r2, [r5, r4]
 80043e4:	5cb3      	ldrb	r3, [r6, r2]
 80043e6:	403b      	ands	r3, r7
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d100      	bne.n	80043ee <strcasecmp+0x16>
 80043ec:	3220      	adds	r2, #32
 80043ee:	5d0b      	ldrb	r3, [r1, r4]
 80043f0:	5cf0      	ldrb	r0, [r6, r3]
 80043f2:	4038      	ands	r0, r7
 80043f4:	2801      	cmp	r0, #1
 80043f6:	d100      	bne.n	80043fa <strcasecmp+0x22>
 80043f8:	3320      	adds	r3, #32
 80043fa:	1ad0      	subs	r0, r2, r3
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d102      	bne.n	8004406 <strcasecmp+0x2e>
 8004400:	3401      	adds	r4, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ed      	bne.n	80043e2 <strcasecmp+0xa>
 8004406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004408:	08005271 	.word	0x08005271

0800440c <strtok>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	4b16      	ldr	r3, [pc, #88]	@ (8004468 <strtok+0x5c>)
 8004410:	0005      	movs	r5, r0
 8004412:	681f      	ldr	r7, [r3, #0]
 8004414:	000e      	movs	r6, r1
 8004416:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004418:	2c00      	cmp	r4, #0
 800441a:	d11d      	bne.n	8004458 <strtok+0x4c>
 800441c:	2050      	movs	r0, #80	@ 0x50
 800441e:	f000 f939 	bl	8004694 <malloc>
 8004422:	1e02      	subs	r2, r0, #0
 8004424:	6478      	str	r0, [r7, #68]	@ 0x44
 8004426:	d104      	bne.n	8004432 <strtok+0x26>
 8004428:	215b      	movs	r1, #91	@ 0x5b
 800442a:	4b10      	ldr	r3, [pc, #64]	@ (800446c <strtok+0x60>)
 800442c:	4810      	ldr	r0, [pc, #64]	@ (8004470 <strtok+0x64>)
 800442e:	f000 f8c9 	bl	80045c4 <__assert_func>
 8004432:	6004      	str	r4, [r0, #0]
 8004434:	6044      	str	r4, [r0, #4]
 8004436:	6084      	str	r4, [r0, #8]
 8004438:	60c4      	str	r4, [r0, #12]
 800443a:	6104      	str	r4, [r0, #16]
 800443c:	6144      	str	r4, [r0, #20]
 800443e:	6184      	str	r4, [r0, #24]
 8004440:	6284      	str	r4, [r0, #40]	@ 0x28
 8004442:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8004444:	6304      	str	r4, [r0, #48]	@ 0x30
 8004446:	6344      	str	r4, [r0, #52]	@ 0x34
 8004448:	6384      	str	r4, [r0, #56]	@ 0x38
 800444a:	63c4      	str	r4, [r0, #60]	@ 0x3c
 800444c:	6404      	str	r4, [r0, #64]	@ 0x40
 800444e:	6444      	str	r4, [r0, #68]	@ 0x44
 8004450:	6484      	str	r4, [r0, #72]	@ 0x48
 8004452:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8004454:	7704      	strb	r4, [r0, #28]
 8004456:	6244      	str	r4, [r0, #36]	@ 0x24
 8004458:	0031      	movs	r1, r6
 800445a:	0028      	movs	r0, r5
 800445c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800445e:	2301      	movs	r3, #1
 8004460:	f000 f808 	bl	8004474 <__strtok_r>
 8004464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	20000018 	.word	0x20000018
 800446c:	08005371 	.word	0x08005371
 8004470:	08005388 	.word	0x08005388

08004474 <__strtok_r>:
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004476:	1e04      	subs	r4, r0, #0
 8004478:	d102      	bne.n	8004480 <__strtok_r+0xc>
 800447a:	6814      	ldr	r4, [r2, #0]
 800447c:	2c00      	cmp	r4, #0
 800447e:	d009      	beq.n	8004494 <__strtok_r+0x20>
 8004480:	0020      	movs	r0, r4
 8004482:	000e      	movs	r6, r1
 8004484:	7805      	ldrb	r5, [r0, #0]
 8004486:	3401      	adds	r4, #1
 8004488:	7837      	ldrb	r7, [r6, #0]
 800448a:	2f00      	cmp	r7, #0
 800448c:	d104      	bne.n	8004498 <__strtok_r+0x24>
 800448e:	2d00      	cmp	r5, #0
 8004490:	d10d      	bne.n	80044ae <__strtok_r+0x3a>
 8004492:	6015      	str	r5, [r2, #0]
 8004494:	2000      	movs	r0, #0
 8004496:	e006      	b.n	80044a6 <__strtok_r+0x32>
 8004498:	3601      	adds	r6, #1
 800449a:	42bd      	cmp	r5, r7
 800449c:	d1f4      	bne.n	8004488 <__strtok_r+0x14>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ee      	bne.n	8004480 <__strtok_r+0xc>
 80044a2:	6014      	str	r4, [r2, #0]
 80044a4:	7003      	strb	r3, [r0, #0]
 80044a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a8:	3301      	adds	r3, #1
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	d102      	bne.n	80044b4 <__strtok_r+0x40>
 80044ae:	000b      	movs	r3, r1
 80044b0:	7826      	ldrb	r6, [r4, #0]
 80044b2:	3401      	adds	r4, #1
 80044b4:	781d      	ldrb	r5, [r3, #0]
 80044b6:	42ae      	cmp	r6, r5
 80044b8:	d1f6      	bne.n	80044a8 <__strtok_r+0x34>
 80044ba:	2300      	movs	r3, #0
 80044bc:	001d      	movs	r5, r3
 80044be:	429e      	cmp	r6, r3
 80044c0:	d002      	beq.n	80044c8 <__strtok_r+0x54>
 80044c2:	0023      	movs	r3, r4
 80044c4:	1e61      	subs	r1, r4, #1
 80044c6:	700d      	strb	r5, [r1, #0]
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e7ec      	b.n	80044a6 <__strtok_r+0x32>

080044cc <_close_r>:
 80044cc:	2300      	movs	r3, #0
 80044ce:	b570      	push	{r4, r5, r6, lr}
 80044d0:	4d06      	ldr	r5, [pc, #24]	@ (80044ec <_close_r+0x20>)
 80044d2:	0004      	movs	r4, r0
 80044d4:	0008      	movs	r0, r1
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	f7fc fc3a 	bl	8000d50 <_close>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d103      	bne.n	80044e8 <_close_r+0x1c>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d000      	beq.n	80044e8 <_close_r+0x1c>
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	20000484 	.word	0x20000484

080044f0 <_lseek_r>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	0004      	movs	r4, r0
 80044f4:	0008      	movs	r0, r1
 80044f6:	0011      	movs	r1, r2
 80044f8:	001a      	movs	r2, r3
 80044fa:	2300      	movs	r3, #0
 80044fc:	4d05      	ldr	r5, [pc, #20]	@ (8004514 <_lseek_r+0x24>)
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	f7fc fc47 	bl	8000d92 <_lseek>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d103      	bne.n	8004510 <_lseek_r+0x20>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d000      	beq.n	8004510 <_lseek_r+0x20>
 800450e:	6023      	str	r3, [r4, #0]
 8004510:	bd70      	pop	{r4, r5, r6, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	20000484 	.word	0x20000484

08004518 <_read_r>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	0004      	movs	r4, r0
 800451c:	0008      	movs	r0, r1
 800451e:	0011      	movs	r1, r2
 8004520:	001a      	movs	r2, r3
 8004522:	2300      	movs	r3, #0
 8004524:	4d05      	ldr	r5, [pc, #20]	@ (800453c <_read_r+0x24>)
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	f7fc fbf5 	bl	8000d16 <_read>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d103      	bne.n	8004538 <_read_r+0x20>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d000      	beq.n	8004538 <_read_r+0x20>
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	20000484 	.word	0x20000484

08004540 <_write_r>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	0004      	movs	r4, r0
 8004544:	0008      	movs	r0, r1
 8004546:	0011      	movs	r1, r2
 8004548:	001a      	movs	r2, r3
 800454a:	2300      	movs	r3, #0
 800454c:	4d05      	ldr	r5, [pc, #20]	@ (8004564 <_write_r+0x24>)
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	f7fc f812 	bl	8000578 <_write>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d103      	bne.n	8004560 <_write_r+0x20>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d000      	beq.n	8004560 <_write_r+0x20>
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	20000484 	.word	0x20000484

08004568 <__errno>:
 8004568:	4b01      	ldr	r3, [pc, #4]	@ (8004570 <__errno+0x8>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	4770      	bx	lr
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	20000018 	.word	0x20000018

08004574 <__libc_init_array>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	2600      	movs	r6, #0
 8004578:	4c0c      	ldr	r4, [pc, #48]	@ (80045ac <__libc_init_array+0x38>)
 800457a:	4d0d      	ldr	r5, [pc, #52]	@ (80045b0 <__libc_init_array+0x3c>)
 800457c:	1b64      	subs	r4, r4, r5
 800457e:	10a4      	asrs	r4, r4, #2
 8004580:	42a6      	cmp	r6, r4
 8004582:	d109      	bne.n	8004598 <__libc_init_array+0x24>
 8004584:	2600      	movs	r6, #0
 8004586:	f000 fdf9 	bl	800517c <_init>
 800458a:	4c0a      	ldr	r4, [pc, #40]	@ (80045b4 <__libc_init_array+0x40>)
 800458c:	4d0a      	ldr	r5, [pc, #40]	@ (80045b8 <__libc_init_array+0x44>)
 800458e:	1b64      	subs	r4, r4, r5
 8004590:	10a4      	asrs	r4, r4, #2
 8004592:	42a6      	cmp	r6, r4
 8004594:	d105      	bne.n	80045a2 <__libc_init_array+0x2e>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	00b3      	lsls	r3, r6, #2
 800459a:	58eb      	ldr	r3, [r5, r3]
 800459c:	4798      	blx	r3
 800459e:	3601      	adds	r6, #1
 80045a0:	e7ee      	b.n	8004580 <__libc_init_array+0xc>
 80045a2:	00b3      	lsls	r3, r6, #2
 80045a4:	58eb      	ldr	r3, [r5, r3]
 80045a6:	4798      	blx	r3
 80045a8:	3601      	adds	r6, #1
 80045aa:	e7f2      	b.n	8004592 <__libc_init_array+0x1e>
 80045ac:	08005454 	.word	0x08005454
 80045b0:	08005454 	.word	0x08005454
 80045b4:	08005458 	.word	0x08005458
 80045b8:	08005454 	.word	0x08005454

080045bc <__retarget_lock_init_recursive>:
 80045bc:	4770      	bx	lr

080045be <__retarget_lock_acquire_recursive>:
 80045be:	4770      	bx	lr

080045c0 <__retarget_lock_release_recursive>:
 80045c0:	4770      	bx	lr
	...

080045c4 <__assert_func>:
 80045c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80045c6:	0014      	movs	r4, r2
 80045c8:	001a      	movs	r2, r3
 80045ca:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <__assert_func+0x2c>)
 80045cc:	0005      	movs	r5, r0
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	000e      	movs	r6, r1
 80045d2:	68d8      	ldr	r0, [r3, #12]
 80045d4:	4b07      	ldr	r3, [pc, #28]	@ (80045f4 <__assert_func+0x30>)
 80045d6:	2c00      	cmp	r4, #0
 80045d8:	d101      	bne.n	80045de <__assert_func+0x1a>
 80045da:	4b07      	ldr	r3, [pc, #28]	@ (80045f8 <__assert_func+0x34>)
 80045dc:	001c      	movs	r4, r3
 80045de:	4907      	ldr	r1, [pc, #28]	@ (80045fc <__assert_func+0x38>)
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	9402      	str	r4, [sp, #8]
 80045e4:	002b      	movs	r3, r5
 80045e6:	9600      	str	r6, [sp, #0]
 80045e8:	f000 fc84 	bl	8004ef4 <fiprintf>
 80045ec:	f000 fd75 	bl	80050da <abort>
 80045f0:	20000018 	.word	0x20000018
 80045f4:	080053e2 	.word	0x080053e2
 80045f8:	0800541d 	.word	0x0800541d
 80045fc:	080053ef 	.word	0x080053ef

08004600 <_free_r>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	0005      	movs	r5, r0
 8004604:	1e0c      	subs	r4, r1, #0
 8004606:	d010      	beq.n	800462a <_free_r+0x2a>
 8004608:	3c04      	subs	r4, #4
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	da00      	bge.n	8004612 <_free_r+0x12>
 8004610:	18e4      	adds	r4, r4, r3
 8004612:	0028      	movs	r0, r5
 8004614:	f000 f8ea 	bl	80047ec <__malloc_lock>
 8004618:	4a1d      	ldr	r2, [pc, #116]	@ (8004690 <_free_r+0x90>)
 800461a:	6813      	ldr	r3, [r2, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <_free_r+0x2c>
 8004620:	6063      	str	r3, [r4, #4]
 8004622:	6014      	str	r4, [r2, #0]
 8004624:	0028      	movs	r0, r5
 8004626:	f000 f8e9 	bl	80047fc <__malloc_unlock>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	42a3      	cmp	r3, r4
 800462e:	d908      	bls.n	8004642 <_free_r+0x42>
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	1821      	adds	r1, r4, r0
 8004634:	428b      	cmp	r3, r1
 8004636:	d1f3      	bne.n	8004620 <_free_r+0x20>
 8004638:	6819      	ldr	r1, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	1809      	adds	r1, r1, r0
 800463e:	6021      	str	r1, [r4, #0]
 8004640:	e7ee      	b.n	8004620 <_free_r+0x20>
 8004642:	001a      	movs	r2, r3
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <_free_r+0x4e>
 800464a:	42a3      	cmp	r3, r4
 800464c:	d9f9      	bls.n	8004642 <_free_r+0x42>
 800464e:	6811      	ldr	r1, [r2, #0]
 8004650:	1850      	adds	r0, r2, r1
 8004652:	42a0      	cmp	r0, r4
 8004654:	d10b      	bne.n	800466e <_free_r+0x6e>
 8004656:	6820      	ldr	r0, [r4, #0]
 8004658:	1809      	adds	r1, r1, r0
 800465a:	1850      	adds	r0, r2, r1
 800465c:	6011      	str	r1, [r2, #0]
 800465e:	4283      	cmp	r3, r0
 8004660:	d1e0      	bne.n	8004624 <_free_r+0x24>
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	1841      	adds	r1, r0, r1
 8004668:	6011      	str	r1, [r2, #0]
 800466a:	6053      	str	r3, [r2, #4]
 800466c:	e7da      	b.n	8004624 <_free_r+0x24>
 800466e:	42a0      	cmp	r0, r4
 8004670:	d902      	bls.n	8004678 <_free_r+0x78>
 8004672:	230c      	movs	r3, #12
 8004674:	602b      	str	r3, [r5, #0]
 8004676:	e7d5      	b.n	8004624 <_free_r+0x24>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	1821      	adds	r1, r4, r0
 800467c:	428b      	cmp	r3, r1
 800467e:	d103      	bne.n	8004688 <_free_r+0x88>
 8004680:	6819      	ldr	r1, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	1809      	adds	r1, r1, r0
 8004686:	6021      	str	r1, [r4, #0]
 8004688:	6063      	str	r3, [r4, #4]
 800468a:	6054      	str	r4, [r2, #4]
 800468c:	e7ca      	b.n	8004624 <_free_r+0x24>
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	20000490 	.word	0x20000490

08004694 <malloc>:
 8004694:	b510      	push	{r4, lr}
 8004696:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <malloc+0x10>)
 8004698:	0001      	movs	r1, r0
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	f000 f826 	bl	80046ec <_malloc_r>
 80046a0:	bd10      	pop	{r4, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	20000018 	.word	0x20000018

080046a8 <sbrk_aligned>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4e0f      	ldr	r6, [pc, #60]	@ (80046e8 <sbrk_aligned+0x40>)
 80046ac:	000d      	movs	r5, r1
 80046ae:	6831      	ldr	r1, [r6, #0]
 80046b0:	0004      	movs	r4, r0
 80046b2:	2900      	cmp	r1, #0
 80046b4:	d102      	bne.n	80046bc <sbrk_aligned+0x14>
 80046b6:	f000 fcf3 	bl	80050a0 <_sbrk_r>
 80046ba:	6030      	str	r0, [r6, #0]
 80046bc:	0029      	movs	r1, r5
 80046be:	0020      	movs	r0, r4
 80046c0:	f000 fcee 	bl	80050a0 <_sbrk_r>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d103      	bne.n	80046d0 <sbrk_aligned+0x28>
 80046c8:	2501      	movs	r5, #1
 80046ca:	426d      	negs	r5, r5
 80046cc:	0028      	movs	r0, r5
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	2303      	movs	r3, #3
 80046d2:	1cc5      	adds	r5, r0, #3
 80046d4:	439d      	bics	r5, r3
 80046d6:	42a8      	cmp	r0, r5
 80046d8:	d0f8      	beq.n	80046cc <sbrk_aligned+0x24>
 80046da:	1a29      	subs	r1, r5, r0
 80046dc:	0020      	movs	r0, r4
 80046de:	f000 fcdf 	bl	80050a0 <_sbrk_r>
 80046e2:	3001      	adds	r0, #1
 80046e4:	d1f2      	bne.n	80046cc <sbrk_aligned+0x24>
 80046e6:	e7ef      	b.n	80046c8 <sbrk_aligned+0x20>
 80046e8:	2000048c 	.word	0x2000048c

080046ec <_malloc_r>:
 80046ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ee:	2203      	movs	r2, #3
 80046f0:	1ccb      	adds	r3, r1, #3
 80046f2:	4393      	bics	r3, r2
 80046f4:	3308      	adds	r3, #8
 80046f6:	0005      	movs	r5, r0
 80046f8:	001f      	movs	r7, r3
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d234      	bcs.n	8004768 <_malloc_r+0x7c>
 80046fe:	270c      	movs	r7, #12
 8004700:	42b9      	cmp	r1, r7
 8004702:	d833      	bhi.n	800476c <_malloc_r+0x80>
 8004704:	0028      	movs	r0, r5
 8004706:	f000 f871 	bl	80047ec <__malloc_lock>
 800470a:	4e37      	ldr	r6, [pc, #220]	@ (80047e8 <_malloc_r+0xfc>)
 800470c:	6833      	ldr	r3, [r6, #0]
 800470e:	001c      	movs	r4, r3
 8004710:	2c00      	cmp	r4, #0
 8004712:	d12f      	bne.n	8004774 <_malloc_r+0x88>
 8004714:	0039      	movs	r1, r7
 8004716:	0028      	movs	r0, r5
 8004718:	f7ff ffc6 	bl	80046a8 <sbrk_aligned>
 800471c:	0004      	movs	r4, r0
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	d15f      	bne.n	80047e2 <_malloc_r+0xf6>
 8004722:	6834      	ldr	r4, [r6, #0]
 8004724:	9400      	str	r4, [sp, #0]
 8004726:	9b00      	ldr	r3, [sp, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d14a      	bne.n	80047c2 <_malloc_r+0xd6>
 800472c:	2c00      	cmp	r4, #0
 800472e:	d052      	beq.n	80047d6 <_malloc_r+0xea>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	0028      	movs	r0, r5
 8004734:	18e3      	adds	r3, r4, r3
 8004736:	9900      	ldr	r1, [sp, #0]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	f000 fcb1 	bl	80050a0 <_sbrk_r>
 800473e:	9b01      	ldr	r3, [sp, #4]
 8004740:	4283      	cmp	r3, r0
 8004742:	d148      	bne.n	80047d6 <_malloc_r+0xea>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	0028      	movs	r0, r5
 8004748:	1aff      	subs	r7, r7, r3
 800474a:	0039      	movs	r1, r7
 800474c:	f7ff ffac 	bl	80046a8 <sbrk_aligned>
 8004750:	3001      	adds	r0, #1
 8004752:	d040      	beq.n	80047d6 <_malloc_r+0xea>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	19db      	adds	r3, r3, r7
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	6833      	ldr	r3, [r6, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	2a00      	cmp	r2, #0
 8004760:	d133      	bne.n	80047ca <_malloc_r+0xde>
 8004762:	9b00      	ldr	r3, [sp, #0]
 8004764:	6033      	str	r3, [r6, #0]
 8004766:	e019      	b.n	800479c <_malloc_r+0xb0>
 8004768:	2b00      	cmp	r3, #0
 800476a:	dac9      	bge.n	8004700 <_malloc_r+0x14>
 800476c:	230c      	movs	r3, #12
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	2000      	movs	r0, #0
 8004772:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004774:	6821      	ldr	r1, [r4, #0]
 8004776:	1bc9      	subs	r1, r1, r7
 8004778:	d420      	bmi.n	80047bc <_malloc_r+0xd0>
 800477a:	290b      	cmp	r1, #11
 800477c:	d90a      	bls.n	8004794 <_malloc_r+0xa8>
 800477e:	19e2      	adds	r2, r4, r7
 8004780:	6027      	str	r7, [r4, #0]
 8004782:	42a3      	cmp	r3, r4
 8004784:	d104      	bne.n	8004790 <_malloc_r+0xa4>
 8004786:	6032      	str	r2, [r6, #0]
 8004788:	6863      	ldr	r3, [r4, #4]
 800478a:	6011      	str	r1, [r2, #0]
 800478c:	6053      	str	r3, [r2, #4]
 800478e:	e005      	b.n	800479c <_malloc_r+0xb0>
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	e7f9      	b.n	8004788 <_malloc_r+0x9c>
 8004794:	6862      	ldr	r2, [r4, #4]
 8004796:	42a3      	cmp	r3, r4
 8004798:	d10e      	bne.n	80047b8 <_malloc_r+0xcc>
 800479a:	6032      	str	r2, [r6, #0]
 800479c:	0028      	movs	r0, r5
 800479e:	f000 f82d 	bl	80047fc <__malloc_unlock>
 80047a2:	0020      	movs	r0, r4
 80047a4:	2207      	movs	r2, #7
 80047a6:	300b      	adds	r0, #11
 80047a8:	1d23      	adds	r3, r4, #4
 80047aa:	4390      	bics	r0, r2
 80047ac:	1ac2      	subs	r2, r0, r3
 80047ae:	4298      	cmp	r0, r3
 80047b0:	d0df      	beq.n	8004772 <_malloc_r+0x86>
 80047b2:	1a1b      	subs	r3, r3, r0
 80047b4:	50a3      	str	r3, [r4, r2]
 80047b6:	e7dc      	b.n	8004772 <_malloc_r+0x86>
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	e7ef      	b.n	800479c <_malloc_r+0xb0>
 80047bc:	0023      	movs	r3, r4
 80047be:	6864      	ldr	r4, [r4, #4]
 80047c0:	e7a6      	b.n	8004710 <_malloc_r+0x24>
 80047c2:	9c00      	ldr	r4, [sp, #0]
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	e7ad      	b.n	8004726 <_malloc_r+0x3a>
 80047ca:	001a      	movs	r2, r3
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	d1fb      	bne.n	80047ca <_malloc_r+0xde>
 80047d2:	2300      	movs	r3, #0
 80047d4:	e7da      	b.n	800478c <_malloc_r+0xa0>
 80047d6:	230c      	movs	r3, #12
 80047d8:	0028      	movs	r0, r5
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	f000 f80e 	bl	80047fc <__malloc_unlock>
 80047e0:	e7c6      	b.n	8004770 <_malloc_r+0x84>
 80047e2:	6007      	str	r7, [r0, #0]
 80047e4:	e7da      	b.n	800479c <_malloc_r+0xb0>
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	20000490 	.word	0x20000490

080047ec <__malloc_lock>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4802      	ldr	r0, [pc, #8]	@ (80047f8 <__malloc_lock+0xc>)
 80047f0:	f7ff fee5 	bl	80045be <__retarget_lock_acquire_recursive>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	20000488 	.word	0x20000488

080047fc <__malloc_unlock>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4802      	ldr	r0, [pc, #8]	@ (8004808 <__malloc_unlock+0xc>)
 8004800:	f7ff fede 	bl	80045c0 <__retarget_lock_release_recursive>
 8004804:	bd10      	pop	{r4, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	20000488 	.word	0x20000488

0800480c <__sfputc_r>:
 800480c:	6893      	ldr	r3, [r2, #8]
 800480e:	b510      	push	{r4, lr}
 8004810:	3b01      	subs	r3, #1
 8004812:	6093      	str	r3, [r2, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da04      	bge.n	8004822 <__sfputc_r+0x16>
 8004818:	6994      	ldr	r4, [r2, #24]
 800481a:	42a3      	cmp	r3, r4
 800481c:	db07      	blt.n	800482e <__sfputc_r+0x22>
 800481e:	290a      	cmp	r1, #10
 8004820:	d005      	beq.n	800482e <__sfputc_r+0x22>
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	1c58      	adds	r0, r3, #1
 8004826:	6010      	str	r0, [r2, #0]
 8004828:	7019      	strb	r1, [r3, #0]
 800482a:	0008      	movs	r0, r1
 800482c:	bd10      	pop	{r4, pc}
 800482e:	f7ff fd2b 	bl	8004288 <__swbuf_r>
 8004832:	0001      	movs	r1, r0
 8004834:	e7f9      	b.n	800482a <__sfputc_r+0x1e>

08004836 <__sfputs_r>:
 8004836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004838:	0006      	movs	r6, r0
 800483a:	000f      	movs	r7, r1
 800483c:	0014      	movs	r4, r2
 800483e:	18d5      	adds	r5, r2, r3
 8004840:	42ac      	cmp	r4, r5
 8004842:	d101      	bne.n	8004848 <__sfputs_r+0x12>
 8004844:	2000      	movs	r0, #0
 8004846:	e007      	b.n	8004858 <__sfputs_r+0x22>
 8004848:	7821      	ldrb	r1, [r4, #0]
 800484a:	003a      	movs	r2, r7
 800484c:	0030      	movs	r0, r6
 800484e:	f7ff ffdd 	bl	800480c <__sfputc_r>
 8004852:	3401      	adds	r4, #1
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d1f3      	bne.n	8004840 <__sfputs_r+0xa>
 8004858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800485c <_vfiprintf_r>:
 800485c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485e:	b0a1      	sub	sp, #132	@ 0x84
 8004860:	000f      	movs	r7, r1
 8004862:	0015      	movs	r5, r2
 8004864:	001e      	movs	r6, r3
 8004866:	9003      	str	r0, [sp, #12]
 8004868:	2800      	cmp	r0, #0
 800486a:	d004      	beq.n	8004876 <_vfiprintf_r+0x1a>
 800486c:	6a03      	ldr	r3, [r0, #32]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <_vfiprintf_r+0x1a>
 8004872:	f7ff fc0f 	bl	8004094 <__sinit>
 8004876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004878:	07db      	lsls	r3, r3, #31
 800487a:	d405      	bmi.n	8004888 <_vfiprintf_r+0x2c>
 800487c:	89bb      	ldrh	r3, [r7, #12]
 800487e:	059b      	lsls	r3, r3, #22
 8004880:	d402      	bmi.n	8004888 <_vfiprintf_r+0x2c>
 8004882:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004884:	f7ff fe9b 	bl	80045be <__retarget_lock_acquire_recursive>
 8004888:	89bb      	ldrh	r3, [r7, #12]
 800488a:	071b      	lsls	r3, r3, #28
 800488c:	d502      	bpl.n	8004894 <_vfiprintf_r+0x38>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d113      	bne.n	80048bc <_vfiprintf_r+0x60>
 8004894:	0039      	movs	r1, r7
 8004896:	9803      	ldr	r0, [sp, #12]
 8004898:	f7ff fd38 	bl	800430c <__swsetup_r>
 800489c:	2800      	cmp	r0, #0
 800489e:	d00d      	beq.n	80048bc <_vfiprintf_r+0x60>
 80048a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048a2:	07db      	lsls	r3, r3, #31
 80048a4:	d503      	bpl.n	80048ae <_vfiprintf_r+0x52>
 80048a6:	2001      	movs	r0, #1
 80048a8:	4240      	negs	r0, r0
 80048aa:	b021      	add	sp, #132	@ 0x84
 80048ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ae:	89bb      	ldrh	r3, [r7, #12]
 80048b0:	059b      	lsls	r3, r3, #22
 80048b2:	d4f8      	bmi.n	80048a6 <_vfiprintf_r+0x4a>
 80048b4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80048b6:	f7ff fe83 	bl	80045c0 <__retarget_lock_release_recursive>
 80048ba:	e7f4      	b.n	80048a6 <_vfiprintf_r+0x4a>
 80048bc:	2300      	movs	r3, #0
 80048be:	ac08      	add	r4, sp, #32
 80048c0:	6163      	str	r3, [r4, #20]
 80048c2:	3320      	adds	r3, #32
 80048c4:	7663      	strb	r3, [r4, #25]
 80048c6:	3310      	adds	r3, #16
 80048c8:	76a3      	strb	r3, [r4, #26]
 80048ca:	9607      	str	r6, [sp, #28]
 80048cc:	002e      	movs	r6, r5
 80048ce:	7833      	ldrb	r3, [r6, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <_vfiprintf_r+0x7c>
 80048d4:	2b25      	cmp	r3, #37	@ 0x25
 80048d6:	d148      	bne.n	800496a <_vfiprintf_r+0x10e>
 80048d8:	1b73      	subs	r3, r6, r5
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	42ae      	cmp	r6, r5
 80048de:	d00b      	beq.n	80048f8 <_vfiprintf_r+0x9c>
 80048e0:	002a      	movs	r2, r5
 80048e2:	0039      	movs	r1, r7
 80048e4:	9803      	ldr	r0, [sp, #12]
 80048e6:	f7ff ffa6 	bl	8004836 <__sfputs_r>
 80048ea:	3001      	adds	r0, #1
 80048ec:	d100      	bne.n	80048f0 <_vfiprintf_r+0x94>
 80048ee:	e0ae      	b.n	8004a4e <_vfiprintf_r+0x1f2>
 80048f0:	6963      	ldr	r3, [r4, #20]
 80048f2:	9a05      	ldr	r2, [sp, #20]
 80048f4:	189b      	adds	r3, r3, r2
 80048f6:	6163      	str	r3, [r4, #20]
 80048f8:	7833      	ldrb	r3, [r6, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d100      	bne.n	8004900 <_vfiprintf_r+0xa4>
 80048fe:	e0a6      	b.n	8004a4e <_vfiprintf_r+0x1f2>
 8004900:	2201      	movs	r2, #1
 8004902:	2300      	movs	r3, #0
 8004904:	4252      	negs	r2, r2
 8004906:	6062      	str	r2, [r4, #4]
 8004908:	a904      	add	r1, sp, #16
 800490a:	3254      	adds	r2, #84	@ 0x54
 800490c:	1852      	adds	r2, r2, r1
 800490e:	1c75      	adds	r5, r6, #1
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	60e3      	str	r3, [r4, #12]
 8004914:	60a3      	str	r3, [r4, #8]
 8004916:	7013      	strb	r3, [r2, #0]
 8004918:	65a3      	str	r3, [r4, #88]	@ 0x58
 800491a:	4b59      	ldr	r3, [pc, #356]	@ (8004a80 <_vfiprintf_r+0x224>)
 800491c:	2205      	movs	r2, #5
 800491e:	0018      	movs	r0, r3
 8004920:	7829      	ldrb	r1, [r5, #0]
 8004922:	9305      	str	r3, [sp, #20]
 8004924:	f000 fbce 	bl	80050c4 <memchr>
 8004928:	1c6e      	adds	r6, r5, #1
 800492a:	2800      	cmp	r0, #0
 800492c:	d11f      	bne.n	800496e <_vfiprintf_r+0x112>
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	06d3      	lsls	r3, r2, #27
 8004932:	d504      	bpl.n	800493e <_vfiprintf_r+0xe2>
 8004934:	2353      	movs	r3, #83	@ 0x53
 8004936:	a904      	add	r1, sp, #16
 8004938:	185b      	adds	r3, r3, r1
 800493a:	2120      	movs	r1, #32
 800493c:	7019      	strb	r1, [r3, #0]
 800493e:	0713      	lsls	r3, r2, #28
 8004940:	d504      	bpl.n	800494c <_vfiprintf_r+0xf0>
 8004942:	2353      	movs	r3, #83	@ 0x53
 8004944:	a904      	add	r1, sp, #16
 8004946:	185b      	adds	r3, r3, r1
 8004948:	212b      	movs	r1, #43	@ 0x2b
 800494a:	7019      	strb	r1, [r3, #0]
 800494c:	782b      	ldrb	r3, [r5, #0]
 800494e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004950:	d016      	beq.n	8004980 <_vfiprintf_r+0x124>
 8004952:	002e      	movs	r6, r5
 8004954:	2100      	movs	r1, #0
 8004956:	200a      	movs	r0, #10
 8004958:	68e3      	ldr	r3, [r4, #12]
 800495a:	7832      	ldrb	r2, [r6, #0]
 800495c:	1c75      	adds	r5, r6, #1
 800495e:	3a30      	subs	r2, #48	@ 0x30
 8004960:	2a09      	cmp	r2, #9
 8004962:	d950      	bls.n	8004a06 <_vfiprintf_r+0x1aa>
 8004964:	2900      	cmp	r1, #0
 8004966:	d111      	bne.n	800498c <_vfiprintf_r+0x130>
 8004968:	e017      	b.n	800499a <_vfiprintf_r+0x13e>
 800496a:	3601      	adds	r6, #1
 800496c:	e7af      	b.n	80048ce <_vfiprintf_r+0x72>
 800496e:	9b05      	ldr	r3, [sp, #20]
 8004970:	6822      	ldr	r2, [r4, #0]
 8004972:	1ac0      	subs	r0, r0, r3
 8004974:	2301      	movs	r3, #1
 8004976:	4083      	lsls	r3, r0
 8004978:	4313      	orrs	r3, r2
 800497a:	0035      	movs	r5, r6
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	e7cc      	b.n	800491a <_vfiprintf_r+0xbe>
 8004980:	9b07      	ldr	r3, [sp, #28]
 8004982:	1d19      	adds	r1, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9107      	str	r1, [sp, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	db01      	blt.n	8004990 <_vfiprintf_r+0x134>
 800498c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800498e:	e004      	b.n	800499a <_vfiprintf_r+0x13e>
 8004990:	425b      	negs	r3, r3
 8004992:	60e3      	str	r3, [r4, #12]
 8004994:	2302      	movs	r3, #2
 8004996:	4313      	orrs	r3, r2
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	7833      	ldrb	r3, [r6, #0]
 800499c:	2b2e      	cmp	r3, #46	@ 0x2e
 800499e:	d10c      	bne.n	80049ba <_vfiprintf_r+0x15e>
 80049a0:	7873      	ldrb	r3, [r6, #1]
 80049a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a4:	d134      	bne.n	8004a10 <_vfiprintf_r+0x1b4>
 80049a6:	9b07      	ldr	r3, [sp, #28]
 80049a8:	3602      	adds	r6, #2
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	9207      	str	r2, [sp, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da01      	bge.n	80049b8 <_vfiprintf_r+0x15c>
 80049b4:	2301      	movs	r3, #1
 80049b6:	425b      	negs	r3, r3
 80049b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ba:	4d32      	ldr	r5, [pc, #200]	@ (8004a84 <_vfiprintf_r+0x228>)
 80049bc:	2203      	movs	r2, #3
 80049be:	0028      	movs	r0, r5
 80049c0:	7831      	ldrb	r1, [r6, #0]
 80049c2:	f000 fb7f 	bl	80050c4 <memchr>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d006      	beq.n	80049d8 <_vfiprintf_r+0x17c>
 80049ca:	2340      	movs	r3, #64	@ 0x40
 80049cc:	1b40      	subs	r0, r0, r5
 80049ce:	4083      	lsls	r3, r0
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	3601      	adds	r6, #1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	7831      	ldrb	r1, [r6, #0]
 80049da:	2206      	movs	r2, #6
 80049dc:	482a      	ldr	r0, [pc, #168]	@ (8004a88 <_vfiprintf_r+0x22c>)
 80049de:	1c75      	adds	r5, r6, #1
 80049e0:	7621      	strb	r1, [r4, #24]
 80049e2:	f000 fb6f 	bl	80050c4 <memchr>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d040      	beq.n	8004a6c <_vfiprintf_r+0x210>
 80049ea:	4b28      	ldr	r3, [pc, #160]	@ (8004a8c <_vfiprintf_r+0x230>)
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d122      	bne.n	8004a36 <_vfiprintf_r+0x1da>
 80049f0:	2207      	movs	r2, #7
 80049f2:	9b07      	ldr	r3, [sp, #28]
 80049f4:	3307      	adds	r3, #7
 80049f6:	4393      	bics	r3, r2
 80049f8:	3308      	adds	r3, #8
 80049fa:	9307      	str	r3, [sp, #28]
 80049fc:	6963      	ldr	r3, [r4, #20]
 80049fe:	9a04      	ldr	r2, [sp, #16]
 8004a00:	189b      	adds	r3, r3, r2
 8004a02:	6163      	str	r3, [r4, #20]
 8004a04:	e762      	b.n	80048cc <_vfiprintf_r+0x70>
 8004a06:	4343      	muls	r3, r0
 8004a08:	002e      	movs	r6, r5
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	189b      	adds	r3, r3, r2
 8004a0e:	e7a4      	b.n	800495a <_vfiprintf_r+0xfe>
 8004a10:	2300      	movs	r3, #0
 8004a12:	200a      	movs	r0, #10
 8004a14:	0019      	movs	r1, r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	7832      	ldrb	r2, [r6, #0]
 8004a1c:	1c75      	adds	r5, r6, #1
 8004a1e:	3a30      	subs	r2, #48	@ 0x30
 8004a20:	2a09      	cmp	r2, #9
 8004a22:	d903      	bls.n	8004a2c <_vfiprintf_r+0x1d0>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0c8      	beq.n	80049ba <_vfiprintf_r+0x15e>
 8004a28:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a2a:	e7c6      	b.n	80049ba <_vfiprintf_r+0x15e>
 8004a2c:	4341      	muls	r1, r0
 8004a2e:	002e      	movs	r6, r5
 8004a30:	2301      	movs	r3, #1
 8004a32:	1889      	adds	r1, r1, r2
 8004a34:	e7f1      	b.n	8004a1a <_vfiprintf_r+0x1be>
 8004a36:	aa07      	add	r2, sp, #28
 8004a38:	9200      	str	r2, [sp, #0]
 8004a3a:	0021      	movs	r1, r4
 8004a3c:	003a      	movs	r2, r7
 8004a3e:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <_vfiprintf_r+0x234>)
 8004a40:	9803      	ldr	r0, [sp, #12]
 8004a42:	e000      	b.n	8004a46 <_vfiprintf_r+0x1ea>
 8004a44:	bf00      	nop
 8004a46:	9004      	str	r0, [sp, #16]
 8004a48:	9b04      	ldr	r3, [sp, #16]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	d1d6      	bne.n	80049fc <_vfiprintf_r+0x1a0>
 8004a4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a50:	07db      	lsls	r3, r3, #31
 8004a52:	d405      	bmi.n	8004a60 <_vfiprintf_r+0x204>
 8004a54:	89bb      	ldrh	r3, [r7, #12]
 8004a56:	059b      	lsls	r3, r3, #22
 8004a58:	d402      	bmi.n	8004a60 <_vfiprintf_r+0x204>
 8004a5a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a5c:	f7ff fdb0 	bl	80045c0 <__retarget_lock_release_recursive>
 8004a60:	89bb      	ldrh	r3, [r7, #12]
 8004a62:	065b      	lsls	r3, r3, #25
 8004a64:	d500      	bpl.n	8004a68 <_vfiprintf_r+0x20c>
 8004a66:	e71e      	b.n	80048a6 <_vfiprintf_r+0x4a>
 8004a68:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004a6a:	e71e      	b.n	80048aa <_vfiprintf_r+0x4e>
 8004a6c:	aa07      	add	r2, sp, #28
 8004a6e:	9200      	str	r2, [sp, #0]
 8004a70:	0021      	movs	r1, r4
 8004a72:	003a      	movs	r2, r7
 8004a74:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <_vfiprintf_r+0x234>)
 8004a76:	9803      	ldr	r0, [sp, #12]
 8004a78:	f000 f87c 	bl	8004b74 <_printf_i>
 8004a7c:	e7e3      	b.n	8004a46 <_vfiprintf_r+0x1ea>
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	0800541e 	.word	0x0800541e
 8004a84:	08005424 	.word	0x08005424
 8004a88:	08005428 	.word	0x08005428
 8004a8c:	00000000 	.word	0x00000000
 8004a90:	08004837 	.word	0x08004837

08004a94 <_printf_common>:
 8004a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a96:	0016      	movs	r6, r2
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	688a      	ldr	r2, [r1, #8]
 8004a9c:	690b      	ldr	r3, [r1, #16]
 8004a9e:	000c      	movs	r4, r1
 8004aa0:	9000      	str	r0, [sp, #0]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	da00      	bge.n	8004aa8 <_printf_common+0x14>
 8004aa6:	0013      	movs	r3, r2
 8004aa8:	0022      	movs	r2, r4
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	3243      	adds	r2, #67	@ 0x43
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	d001      	beq.n	8004ab8 <_printf_common+0x24>
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	6033      	str	r3, [r6, #0]
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	069b      	lsls	r3, r3, #26
 8004abc:	d502      	bpl.n	8004ac4 <_printf_common+0x30>
 8004abe:	6833      	ldr	r3, [r6, #0]
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	6033      	str	r3, [r6, #0]
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	2306      	movs	r3, #6
 8004ac8:	0015      	movs	r5, r2
 8004aca:	401d      	ands	r5, r3
 8004acc:	421a      	tst	r2, r3
 8004ace:	d027      	beq.n	8004b20 <_printf_common+0x8c>
 8004ad0:	0023      	movs	r3, r4
 8004ad2:	3343      	adds	r3, #67	@ 0x43
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	1e5a      	subs	r2, r3, #1
 8004ad8:	4193      	sbcs	r3, r2
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	0692      	lsls	r2, r2, #26
 8004ade:	d430      	bmi.n	8004b42 <_printf_common+0xae>
 8004ae0:	0022      	movs	r2, r4
 8004ae2:	9901      	ldr	r1, [sp, #4]
 8004ae4:	9800      	ldr	r0, [sp, #0]
 8004ae6:	9d08      	ldr	r5, [sp, #32]
 8004ae8:	3243      	adds	r2, #67	@ 0x43
 8004aea:	47a8      	blx	r5
 8004aec:	3001      	adds	r0, #1
 8004aee:	d025      	beq.n	8004b3c <_printf_common+0xa8>
 8004af0:	2206      	movs	r2, #6
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	2500      	movs	r5, #0
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d105      	bne.n	8004b08 <_printf_common+0x74>
 8004afc:	6833      	ldr	r3, [r6, #0]
 8004afe:	68e5      	ldr	r5, [r4, #12]
 8004b00:	1aed      	subs	r5, r5, r3
 8004b02:	43eb      	mvns	r3, r5
 8004b04:	17db      	asrs	r3, r3, #31
 8004b06:	401d      	ands	r5, r3
 8004b08:	68a3      	ldr	r3, [r4, #8]
 8004b0a:	6922      	ldr	r2, [r4, #16]
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	dd01      	ble.n	8004b14 <_printf_common+0x80>
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	18ed      	adds	r5, r5, r3
 8004b14:	2600      	movs	r6, #0
 8004b16:	42b5      	cmp	r5, r6
 8004b18:	d120      	bne.n	8004b5c <_printf_common+0xc8>
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e010      	b.n	8004b40 <_printf_common+0xac>
 8004b1e:	3501      	adds	r5, #1
 8004b20:	68e3      	ldr	r3, [r4, #12]
 8004b22:	6832      	ldr	r2, [r6, #0]
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	42ab      	cmp	r3, r5
 8004b28:	ddd2      	ble.n	8004ad0 <_printf_common+0x3c>
 8004b2a:	0022      	movs	r2, r4
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	9901      	ldr	r1, [sp, #4]
 8004b30:	9800      	ldr	r0, [sp, #0]
 8004b32:	9f08      	ldr	r7, [sp, #32]
 8004b34:	3219      	adds	r2, #25
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1f0      	bne.n	8004b1e <_printf_common+0x8a>
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	4240      	negs	r0, r0
 8004b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b42:	2030      	movs	r0, #48	@ 0x30
 8004b44:	18e1      	adds	r1, r4, r3
 8004b46:	3143      	adds	r1, #67	@ 0x43
 8004b48:	7008      	strb	r0, [r1, #0]
 8004b4a:	0021      	movs	r1, r4
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	3145      	adds	r1, #69	@ 0x45
 8004b50:	7809      	ldrb	r1, [r1, #0]
 8004b52:	18a2      	adds	r2, r4, r2
 8004b54:	3243      	adds	r2, #67	@ 0x43
 8004b56:	3302      	adds	r3, #2
 8004b58:	7011      	strb	r1, [r2, #0]
 8004b5a:	e7c1      	b.n	8004ae0 <_printf_common+0x4c>
 8004b5c:	0022      	movs	r2, r4
 8004b5e:	2301      	movs	r3, #1
 8004b60:	9901      	ldr	r1, [sp, #4]
 8004b62:	9800      	ldr	r0, [sp, #0]
 8004b64:	9f08      	ldr	r7, [sp, #32]
 8004b66:	321a      	adds	r2, #26
 8004b68:	47b8      	blx	r7
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d0e6      	beq.n	8004b3c <_printf_common+0xa8>
 8004b6e:	3601      	adds	r6, #1
 8004b70:	e7d1      	b.n	8004b16 <_printf_common+0x82>
	...

08004b74 <_printf_i>:
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	b08b      	sub	sp, #44	@ 0x2c
 8004b78:	9206      	str	r2, [sp, #24]
 8004b7a:	000a      	movs	r2, r1
 8004b7c:	3243      	adds	r2, #67	@ 0x43
 8004b7e:	9307      	str	r3, [sp, #28]
 8004b80:	9005      	str	r0, [sp, #20]
 8004b82:	9203      	str	r2, [sp, #12]
 8004b84:	7e0a      	ldrb	r2, [r1, #24]
 8004b86:	000c      	movs	r4, r1
 8004b88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b8a:	2a78      	cmp	r2, #120	@ 0x78
 8004b8c:	d809      	bhi.n	8004ba2 <_printf_i+0x2e>
 8004b8e:	2a62      	cmp	r2, #98	@ 0x62
 8004b90:	d80b      	bhi.n	8004baa <_printf_i+0x36>
 8004b92:	2a00      	cmp	r2, #0
 8004b94:	d100      	bne.n	8004b98 <_printf_i+0x24>
 8004b96:	e0bc      	b.n	8004d12 <_printf_i+0x19e>
 8004b98:	497b      	ldr	r1, [pc, #492]	@ (8004d88 <_printf_i+0x214>)
 8004b9a:	9104      	str	r1, [sp, #16]
 8004b9c:	2a58      	cmp	r2, #88	@ 0x58
 8004b9e:	d100      	bne.n	8004ba2 <_printf_i+0x2e>
 8004ba0:	e090      	b.n	8004cc4 <_printf_i+0x150>
 8004ba2:	0025      	movs	r5, r4
 8004ba4:	3542      	adds	r5, #66	@ 0x42
 8004ba6:	702a      	strb	r2, [r5, #0]
 8004ba8:	e022      	b.n	8004bf0 <_printf_i+0x7c>
 8004baa:	0010      	movs	r0, r2
 8004bac:	3863      	subs	r0, #99	@ 0x63
 8004bae:	2815      	cmp	r0, #21
 8004bb0:	d8f7      	bhi.n	8004ba2 <_printf_i+0x2e>
 8004bb2:	f7fb faa9 	bl	8000108 <__gnu_thumb1_case_shi>
 8004bb6:	0016      	.short	0x0016
 8004bb8:	fff6001f 	.word	0xfff6001f
 8004bbc:	fff6fff6 	.word	0xfff6fff6
 8004bc0:	001ffff6 	.word	0x001ffff6
 8004bc4:	fff6fff6 	.word	0xfff6fff6
 8004bc8:	fff6fff6 	.word	0xfff6fff6
 8004bcc:	003600a1 	.word	0x003600a1
 8004bd0:	fff60080 	.word	0xfff60080
 8004bd4:	00b2fff6 	.word	0x00b2fff6
 8004bd8:	0036fff6 	.word	0x0036fff6
 8004bdc:	fff6fff6 	.word	0xfff6fff6
 8004be0:	0084      	.short	0x0084
 8004be2:	0025      	movs	r5, r4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	3542      	adds	r5, #66	@ 0x42
 8004be8:	1d11      	adds	r1, r2, #4
 8004bea:	6019      	str	r1, [r3, #0]
 8004bec:	6813      	ldr	r3, [r2, #0]
 8004bee:	702b      	strb	r3, [r5, #0]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0a0      	b.n	8004d36 <_printf_i+0x1c2>
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	6809      	ldr	r1, [r1, #0]
 8004bf8:	1d02      	adds	r2, r0, #4
 8004bfa:	060d      	lsls	r5, r1, #24
 8004bfc:	d50b      	bpl.n	8004c16 <_printf_i+0xa2>
 8004bfe:	6806      	ldr	r6, [r0, #0]
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	2e00      	cmp	r6, #0
 8004c04:	da03      	bge.n	8004c0e <_printf_i+0x9a>
 8004c06:	232d      	movs	r3, #45	@ 0x2d
 8004c08:	9a03      	ldr	r2, [sp, #12]
 8004c0a:	4276      	negs	r6, r6
 8004c0c:	7013      	strb	r3, [r2, #0]
 8004c0e:	4b5e      	ldr	r3, [pc, #376]	@ (8004d88 <_printf_i+0x214>)
 8004c10:	270a      	movs	r7, #10
 8004c12:	9304      	str	r3, [sp, #16]
 8004c14:	e018      	b.n	8004c48 <_printf_i+0xd4>
 8004c16:	6806      	ldr	r6, [r0, #0]
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	0649      	lsls	r1, r1, #25
 8004c1c:	d5f1      	bpl.n	8004c02 <_printf_i+0x8e>
 8004c1e:	b236      	sxth	r6, r6
 8004c20:	e7ef      	b.n	8004c02 <_printf_i+0x8e>
 8004c22:	6808      	ldr	r0, [r1, #0]
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	c940      	ldmia	r1!, {r6}
 8004c28:	0605      	lsls	r5, r0, #24
 8004c2a:	d402      	bmi.n	8004c32 <_printf_i+0xbe>
 8004c2c:	0640      	lsls	r0, r0, #25
 8004c2e:	d500      	bpl.n	8004c32 <_printf_i+0xbe>
 8004c30:	b2b6      	uxth	r6, r6
 8004c32:	6019      	str	r1, [r3, #0]
 8004c34:	4b54      	ldr	r3, [pc, #336]	@ (8004d88 <_printf_i+0x214>)
 8004c36:	270a      	movs	r7, #10
 8004c38:	9304      	str	r3, [sp, #16]
 8004c3a:	2a6f      	cmp	r2, #111	@ 0x6f
 8004c3c:	d100      	bne.n	8004c40 <_printf_i+0xcc>
 8004c3e:	3f02      	subs	r7, #2
 8004c40:	0023      	movs	r3, r4
 8004c42:	2200      	movs	r2, #0
 8004c44:	3343      	adds	r3, #67	@ 0x43
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	6863      	ldr	r3, [r4, #4]
 8004c4a:	60a3      	str	r3, [r4, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	db03      	blt.n	8004c58 <_printf_i+0xe4>
 8004c50:	2104      	movs	r1, #4
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	438a      	bics	r2, r1
 8004c56:	6022      	str	r2, [r4, #0]
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	d102      	bne.n	8004c62 <_printf_i+0xee>
 8004c5c:	9d03      	ldr	r5, [sp, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <_printf_i+0x108>
 8004c62:	9d03      	ldr	r5, [sp, #12]
 8004c64:	0030      	movs	r0, r6
 8004c66:	0039      	movs	r1, r7
 8004c68:	f7fb fade 	bl	8000228 <__aeabi_uidivmod>
 8004c6c:	9b04      	ldr	r3, [sp, #16]
 8004c6e:	3d01      	subs	r5, #1
 8004c70:	5c5b      	ldrb	r3, [r3, r1]
 8004c72:	702b      	strb	r3, [r5, #0]
 8004c74:	0033      	movs	r3, r6
 8004c76:	0006      	movs	r6, r0
 8004c78:	429f      	cmp	r7, r3
 8004c7a:	d9f3      	bls.n	8004c64 <_printf_i+0xf0>
 8004c7c:	2f08      	cmp	r7, #8
 8004c7e:	d109      	bne.n	8004c94 <_printf_i+0x120>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	07db      	lsls	r3, r3, #31
 8004c84:	d506      	bpl.n	8004c94 <_printf_i+0x120>
 8004c86:	6862      	ldr	r2, [r4, #4]
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	dc02      	bgt.n	8004c94 <_printf_i+0x120>
 8004c8e:	2330      	movs	r3, #48	@ 0x30
 8004c90:	3d01      	subs	r5, #1
 8004c92:	702b      	strb	r3, [r5, #0]
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	1b5b      	subs	r3, r3, r5
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	9b07      	ldr	r3, [sp, #28]
 8004c9c:	0021      	movs	r1, r4
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	9805      	ldr	r0, [sp, #20]
 8004ca2:	9b06      	ldr	r3, [sp, #24]
 8004ca4:	aa09      	add	r2, sp, #36	@ 0x24
 8004ca6:	f7ff fef5 	bl	8004a94 <_printf_common>
 8004caa:	3001      	adds	r0, #1
 8004cac:	d148      	bne.n	8004d40 <_printf_i+0x1cc>
 8004cae:	2001      	movs	r0, #1
 8004cb0:	4240      	negs	r0, r0
 8004cb2:	b00b      	add	sp, #44	@ 0x2c
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	6809      	ldr	r1, [r1, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	6022      	str	r2, [r4, #0]
 8004cbe:	2278      	movs	r2, #120	@ 0x78
 8004cc0:	4932      	ldr	r1, [pc, #200]	@ (8004d8c <_printf_i+0x218>)
 8004cc2:	9104      	str	r1, [sp, #16]
 8004cc4:	0021      	movs	r1, r4
 8004cc6:	3145      	adds	r1, #69	@ 0x45
 8004cc8:	700a      	strb	r2, [r1, #0]
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	6822      	ldr	r2, [r4, #0]
 8004cce:	c940      	ldmia	r1!, {r6}
 8004cd0:	0610      	lsls	r0, r2, #24
 8004cd2:	d402      	bmi.n	8004cda <_printf_i+0x166>
 8004cd4:	0650      	lsls	r0, r2, #25
 8004cd6:	d500      	bpl.n	8004cda <_printf_i+0x166>
 8004cd8:	b2b6      	uxth	r6, r6
 8004cda:	6019      	str	r1, [r3, #0]
 8004cdc:	07d3      	lsls	r3, r2, #31
 8004cde:	d502      	bpl.n	8004ce6 <_printf_i+0x172>
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	d001      	beq.n	8004cee <_printf_i+0x17a>
 8004cea:	2710      	movs	r7, #16
 8004cec:	e7a8      	b.n	8004c40 <_printf_i+0xcc>
 8004cee:	2220      	movs	r2, #32
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	4393      	bics	r3, r2
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	e7f8      	b.n	8004cea <_printf_i+0x176>
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	680d      	ldr	r5, [r1, #0]
 8004cfc:	1d10      	adds	r0, r2, #4
 8004cfe:	6949      	ldr	r1, [r1, #20]
 8004d00:	6018      	str	r0, [r3, #0]
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	062e      	lsls	r6, r5, #24
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0x198>
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0x19e>
 8004d0c:	066d      	lsls	r5, r5, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0x194>
 8004d10:	8019      	strh	r1, [r3, #0]
 8004d12:	2300      	movs	r3, #0
 8004d14:	9d03      	ldr	r5, [sp, #12]
 8004d16:	6123      	str	r3, [r4, #16]
 8004d18:	e7bf      	b.n	8004c9a <_printf_i+0x126>
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	1d11      	adds	r1, r2, #4
 8004d1e:	6019      	str	r1, [r3, #0]
 8004d20:	6815      	ldr	r5, [r2, #0]
 8004d22:	2100      	movs	r1, #0
 8004d24:	0028      	movs	r0, r5
 8004d26:	6862      	ldr	r2, [r4, #4]
 8004d28:	f000 f9cc 	bl	80050c4 <memchr>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d001      	beq.n	8004d34 <_printf_i+0x1c0>
 8004d30:	1b40      	subs	r0, r0, r5
 8004d32:	6060      	str	r0, [r4, #4]
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9a03      	ldr	r2, [sp, #12]
 8004d3c:	7013      	strb	r3, [r2, #0]
 8004d3e:	e7ac      	b.n	8004c9a <_printf_i+0x126>
 8004d40:	002a      	movs	r2, r5
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	9906      	ldr	r1, [sp, #24]
 8004d46:	9805      	ldr	r0, [sp, #20]
 8004d48:	9d07      	ldr	r5, [sp, #28]
 8004d4a:	47a8      	blx	r5
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d0ae      	beq.n	8004cae <_printf_i+0x13a>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	079b      	lsls	r3, r3, #30
 8004d54:	d415      	bmi.n	8004d82 <_printf_i+0x20e>
 8004d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d58:	68e0      	ldr	r0, [r4, #12]
 8004d5a:	4298      	cmp	r0, r3
 8004d5c:	daa9      	bge.n	8004cb2 <_printf_i+0x13e>
 8004d5e:	0018      	movs	r0, r3
 8004d60:	e7a7      	b.n	8004cb2 <_printf_i+0x13e>
 8004d62:	0022      	movs	r2, r4
 8004d64:	2301      	movs	r3, #1
 8004d66:	9906      	ldr	r1, [sp, #24]
 8004d68:	9805      	ldr	r0, [sp, #20]
 8004d6a:	9e07      	ldr	r6, [sp, #28]
 8004d6c:	3219      	adds	r2, #25
 8004d6e:	47b0      	blx	r6
 8004d70:	3001      	adds	r0, #1
 8004d72:	d09c      	beq.n	8004cae <_printf_i+0x13a>
 8004d74:	3501      	adds	r5, #1
 8004d76:	68e3      	ldr	r3, [r4, #12]
 8004d78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	42ab      	cmp	r3, r5
 8004d7e:	dcf0      	bgt.n	8004d62 <_printf_i+0x1ee>
 8004d80:	e7e9      	b.n	8004d56 <_printf_i+0x1e2>
 8004d82:	2500      	movs	r5, #0
 8004d84:	e7f7      	b.n	8004d76 <_printf_i+0x202>
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	0800542f 	.word	0x0800542f
 8004d8c:	08005440 	.word	0x08005440

08004d90 <__sflush_r>:
 8004d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d92:	220c      	movs	r2, #12
 8004d94:	5e8b      	ldrsh	r3, [r1, r2]
 8004d96:	0005      	movs	r5, r0
 8004d98:	000c      	movs	r4, r1
 8004d9a:	071a      	lsls	r2, r3, #28
 8004d9c:	d456      	bmi.n	8004e4c <__sflush_r+0xbc>
 8004d9e:	684a      	ldr	r2, [r1, #4]
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	dc02      	bgt.n	8004daa <__sflush_r+0x1a>
 8004da4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	dd4e      	ble.n	8004e48 <__sflush_r+0xb8>
 8004daa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004dac:	2f00      	cmp	r7, #0
 8004dae:	d04b      	beq.n	8004e48 <__sflush_r+0xb8>
 8004db0:	2200      	movs	r2, #0
 8004db2:	2080      	movs	r0, #128	@ 0x80
 8004db4:	682e      	ldr	r6, [r5, #0]
 8004db6:	602a      	str	r2, [r5, #0]
 8004db8:	001a      	movs	r2, r3
 8004dba:	0140      	lsls	r0, r0, #5
 8004dbc:	6a21      	ldr	r1, [r4, #32]
 8004dbe:	4002      	ands	r2, r0
 8004dc0:	4203      	tst	r3, r0
 8004dc2:	d033      	beq.n	8004e2c <__sflush_r+0x9c>
 8004dc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dc6:	89a3      	ldrh	r3, [r4, #12]
 8004dc8:	075b      	lsls	r3, r3, #29
 8004dca:	d506      	bpl.n	8004dda <__sflush_r+0x4a>
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <__sflush_r+0x4a>
 8004dd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dd8:	1ad2      	subs	r2, r2, r3
 8004dda:	2300      	movs	r3, #0
 8004ddc:	0028      	movs	r0, r5
 8004dde:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004de0:	6a21      	ldr	r1, [r4, #32]
 8004de2:	47b8      	blx	r7
 8004de4:	89a2      	ldrh	r2, [r4, #12]
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	d106      	bne.n	8004df8 <__sflush_r+0x68>
 8004dea:	6829      	ldr	r1, [r5, #0]
 8004dec:	291d      	cmp	r1, #29
 8004dee:	d846      	bhi.n	8004e7e <__sflush_r+0xee>
 8004df0:	4b29      	ldr	r3, [pc, #164]	@ (8004e98 <__sflush_r+0x108>)
 8004df2:	410b      	asrs	r3, r1
 8004df4:	07db      	lsls	r3, r3, #31
 8004df6:	d442      	bmi.n	8004e7e <__sflush_r+0xee>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	6923      	ldr	r3, [r4, #16]
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	04d2      	lsls	r2, r2, #19
 8004e02:	d505      	bpl.n	8004e10 <__sflush_r+0x80>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <__sflush_r+0x7e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d100      	bne.n	8004e10 <__sflush_r+0x80>
 8004e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e12:	602e      	str	r6, [r5, #0]
 8004e14:	2900      	cmp	r1, #0
 8004e16:	d017      	beq.n	8004e48 <__sflush_r+0xb8>
 8004e18:	0023      	movs	r3, r4
 8004e1a:	3344      	adds	r3, #68	@ 0x44
 8004e1c:	4299      	cmp	r1, r3
 8004e1e:	d002      	beq.n	8004e26 <__sflush_r+0x96>
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7ff fbed 	bl	8004600 <_free_r>
 8004e26:	2300      	movs	r3, #0
 8004e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e2a:	e00d      	b.n	8004e48 <__sflush_r+0xb8>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	0028      	movs	r0, r5
 8004e30:	47b8      	blx	r7
 8004e32:	0002      	movs	r2, r0
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d1c6      	bne.n	8004dc6 <__sflush_r+0x36>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0c3      	beq.n	8004dc6 <__sflush_r+0x36>
 8004e3e:	2b1d      	cmp	r3, #29
 8004e40:	d001      	beq.n	8004e46 <__sflush_r+0xb6>
 8004e42:	2b16      	cmp	r3, #22
 8004e44:	d11a      	bne.n	8004e7c <__sflush_r+0xec>
 8004e46:	602e      	str	r6, [r5, #0]
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e01e      	b.n	8004e8a <__sflush_r+0xfa>
 8004e4c:	690e      	ldr	r6, [r1, #16]
 8004e4e:	2e00      	cmp	r6, #0
 8004e50:	d0fa      	beq.n	8004e48 <__sflush_r+0xb8>
 8004e52:	680f      	ldr	r7, [r1, #0]
 8004e54:	600e      	str	r6, [r1, #0]
 8004e56:	1bba      	subs	r2, r7, r6
 8004e58:	9201      	str	r2, [sp, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	079b      	lsls	r3, r3, #30
 8004e5e:	d100      	bne.n	8004e62 <__sflush_r+0xd2>
 8004e60:	694a      	ldr	r2, [r1, #20]
 8004e62:	60a2      	str	r2, [r4, #8]
 8004e64:	9b01      	ldr	r3, [sp, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	ddee      	ble.n	8004e48 <__sflush_r+0xb8>
 8004e6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004e6c:	0032      	movs	r2, r6
 8004e6e:	001f      	movs	r7, r3
 8004e70:	0028      	movs	r0, r5
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	6a21      	ldr	r1, [r4, #32]
 8004e76:	47b8      	blx	r7
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	dc07      	bgt.n	8004e8c <__sflush_r+0xfc>
 8004e7c:	89a2      	ldrh	r2, [r4, #12]
 8004e7e:	2340      	movs	r3, #64	@ 0x40
 8004e80:	2001      	movs	r0, #1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	b21b      	sxth	r3, r3
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	4240      	negs	r0, r0
 8004e8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	1836      	adds	r6, r6, r0
 8004e90:	1a1b      	subs	r3, r3, r0
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	e7e6      	b.n	8004e64 <__sflush_r+0xd4>
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	dfbffffe 	.word	0xdfbffffe

08004e9c <_fflush_r>:
 8004e9c:	690b      	ldr	r3, [r1, #16]
 8004e9e:	b570      	push	{r4, r5, r6, lr}
 8004ea0:	0005      	movs	r5, r0
 8004ea2:	000c      	movs	r4, r1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <_fflush_r+0x12>
 8004ea8:	2500      	movs	r5, #0
 8004eaa:	0028      	movs	r0, r5
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d004      	beq.n	8004ebc <_fflush_r+0x20>
 8004eb2:	6a03      	ldr	r3, [r0, #32]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <_fflush_r+0x20>
 8004eb8:	f7ff f8ec 	bl	8004094 <__sinit>
 8004ebc:	220c      	movs	r2, #12
 8004ebe:	5ea3      	ldrsh	r3, [r4, r2]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f1      	beq.n	8004ea8 <_fflush_r+0xc>
 8004ec4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ec6:	07d2      	lsls	r2, r2, #31
 8004ec8:	d404      	bmi.n	8004ed4 <_fflush_r+0x38>
 8004eca:	059b      	lsls	r3, r3, #22
 8004ecc:	d402      	bmi.n	8004ed4 <_fflush_r+0x38>
 8004ece:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ed0:	f7ff fb75 	bl	80045be <__retarget_lock_acquire_recursive>
 8004ed4:	0028      	movs	r0, r5
 8004ed6:	0021      	movs	r1, r4
 8004ed8:	f7ff ff5a 	bl	8004d90 <__sflush_r>
 8004edc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ede:	0005      	movs	r5, r0
 8004ee0:	07db      	lsls	r3, r3, #31
 8004ee2:	d4e2      	bmi.n	8004eaa <_fflush_r+0xe>
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	059b      	lsls	r3, r3, #22
 8004ee8:	d4df      	bmi.n	8004eaa <_fflush_r+0xe>
 8004eea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eec:	f7ff fb68 	bl	80045c0 <__retarget_lock_release_recursive>
 8004ef0:	e7db      	b.n	8004eaa <_fflush_r+0xe>
	...

08004ef4 <fiprintf>:
 8004ef4:	b40e      	push	{r1, r2, r3}
 8004ef6:	b517      	push	{r0, r1, r2, r4, lr}
 8004ef8:	4c05      	ldr	r4, [pc, #20]	@ (8004f10 <fiprintf+0x1c>)
 8004efa:	ab05      	add	r3, sp, #20
 8004efc:	cb04      	ldmia	r3!, {r2}
 8004efe:	0001      	movs	r1, r0
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	f7ff fcaa 	bl	800485c <_vfiprintf_r>
 8004f08:	bc1e      	pop	{r1, r2, r3, r4}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	b003      	add	sp, #12
 8004f0e:	4718      	bx	r3
 8004f10:	20000018 	.word	0x20000018

08004f14 <__swhatbuf_r>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	000e      	movs	r6, r1
 8004f18:	001d      	movs	r5, r3
 8004f1a:	230e      	movs	r3, #14
 8004f1c:	5ec9      	ldrsh	r1, [r1, r3]
 8004f1e:	0014      	movs	r4, r2
 8004f20:	b096      	sub	sp, #88	@ 0x58
 8004f22:	2900      	cmp	r1, #0
 8004f24:	da0c      	bge.n	8004f40 <__swhatbuf_r+0x2c>
 8004f26:	89b2      	ldrh	r2, [r6, #12]
 8004f28:	2380      	movs	r3, #128	@ 0x80
 8004f2a:	0011      	movs	r1, r2
 8004f2c:	4019      	ands	r1, r3
 8004f2e:	421a      	tst	r2, r3
 8004f30:	d114      	bne.n	8004f5c <__swhatbuf_r+0x48>
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	2000      	movs	r0, #0
 8004f38:	6029      	str	r1, [r5, #0]
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	b016      	add	sp, #88	@ 0x58
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	466a      	mov	r2, sp
 8004f42:	f000 f889 	bl	8005058 <_fstat_r>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	dbed      	blt.n	8004f26 <__swhatbuf_r+0x12>
 8004f4a:	23f0      	movs	r3, #240	@ 0xf0
 8004f4c:	9901      	ldr	r1, [sp, #4]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	4019      	ands	r1, r3
 8004f52:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <__swhatbuf_r+0x50>)
 8004f54:	18c9      	adds	r1, r1, r3
 8004f56:	424b      	negs	r3, r1
 8004f58:	4159      	adcs	r1, r3
 8004f5a:	e7ea      	b.n	8004f32 <__swhatbuf_r+0x1e>
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2340      	movs	r3, #64	@ 0x40
 8004f60:	e7e9      	b.n	8004f36 <__swhatbuf_r+0x22>
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	ffffe000 	.word	0xffffe000

08004f68 <__smakebuf_r>:
 8004f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6a:	2602      	movs	r6, #2
 8004f6c:	898b      	ldrh	r3, [r1, #12]
 8004f6e:	0005      	movs	r5, r0
 8004f70:	000c      	movs	r4, r1
 8004f72:	b085      	sub	sp, #20
 8004f74:	4233      	tst	r3, r6
 8004f76:	d007      	beq.n	8004f88 <__smakebuf_r+0x20>
 8004f78:	0023      	movs	r3, r4
 8004f7a:	3347      	adds	r3, #71	@ 0x47
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	2301      	movs	r3, #1
 8004f82:	6163      	str	r3, [r4, #20]
 8004f84:	b005      	add	sp, #20
 8004f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f88:	ab03      	add	r3, sp, #12
 8004f8a:	aa02      	add	r2, sp, #8
 8004f8c:	f7ff ffc2 	bl	8004f14 <__swhatbuf_r>
 8004f90:	9f02      	ldr	r7, [sp, #8]
 8004f92:	9001      	str	r0, [sp, #4]
 8004f94:	0039      	movs	r1, r7
 8004f96:	0028      	movs	r0, r5
 8004f98:	f7ff fba8 	bl	80046ec <_malloc_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d108      	bne.n	8004fb2 <__smakebuf_r+0x4a>
 8004fa0:	220c      	movs	r2, #12
 8004fa2:	5ea3      	ldrsh	r3, [r4, r2]
 8004fa4:	059a      	lsls	r2, r3, #22
 8004fa6:	d4ed      	bmi.n	8004f84 <__smakebuf_r+0x1c>
 8004fa8:	2203      	movs	r2, #3
 8004faa:	4393      	bics	r3, r2
 8004fac:	431e      	orrs	r6, r3
 8004fae:	81a6      	strh	r6, [r4, #12]
 8004fb0:	e7e2      	b.n	8004f78 <__smakebuf_r+0x10>
 8004fb2:	2380      	movs	r3, #128	@ 0x80
 8004fb4:	89a2      	ldrh	r2, [r4, #12]
 8004fb6:	6020      	str	r0, [r4, #0]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	6120      	str	r0, [r4, #16]
 8004fc0:	6167      	str	r7, [r4, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <__smakebuf_r+0x78>
 8004fc6:	0028      	movs	r0, r5
 8004fc8:	230e      	movs	r3, #14
 8004fca:	5ee1      	ldrsh	r1, [r4, r3]
 8004fcc:	f000 f856 	bl	800507c <_isatty_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d005      	beq.n	8004fe0 <__smakebuf_r+0x78>
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	89a2      	ldrh	r2, [r4, #12]
 8004fd8:	439a      	bics	r2, r3
 8004fda:	3b02      	subs	r3, #2
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	9a01      	ldr	r2, [sp, #4]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	e7cc      	b.n	8004f84 <__smakebuf_r+0x1c>

08004fea <_putc_r>:
 8004fea:	b570      	push	{r4, r5, r6, lr}
 8004fec:	0006      	movs	r6, r0
 8004fee:	000d      	movs	r5, r1
 8004ff0:	0014      	movs	r4, r2
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d004      	beq.n	8005000 <_putc_r+0x16>
 8004ff6:	6a03      	ldr	r3, [r0, #32]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <_putc_r+0x16>
 8004ffc:	f7ff f84a 	bl	8004094 <__sinit>
 8005000:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005002:	07db      	lsls	r3, r3, #31
 8005004:	d405      	bmi.n	8005012 <_putc_r+0x28>
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	059b      	lsls	r3, r3, #22
 800500a:	d402      	bmi.n	8005012 <_putc_r+0x28>
 800500c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800500e:	f7ff fad6 	bl	80045be <__retarget_lock_acquire_recursive>
 8005012:	68a3      	ldr	r3, [r4, #8]
 8005014:	3b01      	subs	r3, #1
 8005016:	60a3      	str	r3, [r4, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	da05      	bge.n	8005028 <_putc_r+0x3e>
 800501c:	69a2      	ldr	r2, [r4, #24]
 800501e:	4293      	cmp	r3, r2
 8005020:	db12      	blt.n	8005048 <_putc_r+0x5e>
 8005022:	b2eb      	uxtb	r3, r5
 8005024:	2b0a      	cmp	r3, #10
 8005026:	d00f      	beq.n	8005048 <_putc_r+0x5e>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	6022      	str	r2, [r4, #0]
 800502e:	701d      	strb	r5, [r3, #0]
 8005030:	b2ed      	uxtb	r5, r5
 8005032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005034:	07db      	lsls	r3, r3, #31
 8005036:	d405      	bmi.n	8005044 <_putc_r+0x5a>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	059b      	lsls	r3, r3, #22
 800503c:	d402      	bmi.n	8005044 <_putc_r+0x5a>
 800503e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005040:	f7ff fabe 	bl	80045c0 <__retarget_lock_release_recursive>
 8005044:	0028      	movs	r0, r5
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	0029      	movs	r1, r5
 800504a:	0022      	movs	r2, r4
 800504c:	0030      	movs	r0, r6
 800504e:	f7ff f91b 	bl	8004288 <__swbuf_r>
 8005052:	0005      	movs	r5, r0
 8005054:	e7ed      	b.n	8005032 <_putc_r+0x48>
	...

08005058 <_fstat_r>:
 8005058:	2300      	movs	r3, #0
 800505a:	b570      	push	{r4, r5, r6, lr}
 800505c:	4d06      	ldr	r5, [pc, #24]	@ (8005078 <_fstat_r+0x20>)
 800505e:	0004      	movs	r4, r0
 8005060:	0008      	movs	r0, r1
 8005062:	0011      	movs	r1, r2
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	f7fb fe7d 	bl	8000d64 <_fstat>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d103      	bne.n	8005076 <_fstat_r+0x1e>
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d000      	beq.n	8005076 <_fstat_r+0x1e>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	20000484 	.word	0x20000484

0800507c <_isatty_r>:
 800507c:	2300      	movs	r3, #0
 800507e:	b570      	push	{r4, r5, r6, lr}
 8005080:	4d06      	ldr	r5, [pc, #24]	@ (800509c <_isatty_r+0x20>)
 8005082:	0004      	movs	r4, r0
 8005084:	0008      	movs	r0, r1
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	f7fb fe7a 	bl	8000d80 <_isatty>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d103      	bne.n	8005098 <_isatty_r+0x1c>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d000      	beq.n	8005098 <_isatty_r+0x1c>
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	bd70      	pop	{r4, r5, r6, pc}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	20000484 	.word	0x20000484

080050a0 <_sbrk_r>:
 80050a0:	2300      	movs	r3, #0
 80050a2:	b570      	push	{r4, r5, r6, lr}
 80050a4:	4d06      	ldr	r5, [pc, #24]	@ (80050c0 <_sbrk_r+0x20>)
 80050a6:	0004      	movs	r4, r0
 80050a8:	0008      	movs	r0, r1
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	f7fb fe7c 	bl	8000da8 <_sbrk>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d103      	bne.n	80050bc <_sbrk_r+0x1c>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d000      	beq.n	80050bc <_sbrk_r+0x1c>
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	20000484 	.word	0x20000484

080050c4 <memchr>:
 80050c4:	b2c9      	uxtb	r1, r1
 80050c6:	1882      	adds	r2, r0, r2
 80050c8:	4290      	cmp	r0, r2
 80050ca:	d101      	bne.n	80050d0 <memchr+0xc>
 80050cc:	2000      	movs	r0, #0
 80050ce:	4770      	bx	lr
 80050d0:	7803      	ldrb	r3, [r0, #0]
 80050d2:	428b      	cmp	r3, r1
 80050d4:	d0fb      	beq.n	80050ce <memchr+0xa>
 80050d6:	3001      	adds	r0, #1
 80050d8:	e7f6      	b.n	80050c8 <memchr+0x4>

080050da <abort>:
 80050da:	2006      	movs	r0, #6
 80050dc:	b510      	push	{r4, lr}
 80050de:	f000 f82d 	bl	800513c <raise>
 80050e2:	2001      	movs	r0, #1
 80050e4:	f7fb fe0a 	bl	8000cfc <_exit>

080050e8 <_raise_r>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	0004      	movs	r4, r0
 80050ec:	000d      	movs	r5, r1
 80050ee:	291f      	cmp	r1, #31
 80050f0:	d904      	bls.n	80050fc <_raise_r+0x14>
 80050f2:	2316      	movs	r3, #22
 80050f4:	6003      	str	r3, [r0, #0]
 80050f6:	2001      	movs	r0, #1
 80050f8:	4240      	negs	r0, r0
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <_raise_r+0x24>
 8005102:	008a      	lsls	r2, r1, #2
 8005104:	189b      	adds	r3, r3, r2
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	2a00      	cmp	r2, #0
 800510a:	d108      	bne.n	800511e <_raise_r+0x36>
 800510c:	0020      	movs	r0, r4
 800510e:	f000 f831 	bl	8005174 <_getpid_r>
 8005112:	002a      	movs	r2, r5
 8005114:	0001      	movs	r1, r0
 8005116:	0020      	movs	r0, r4
 8005118:	f000 f81a 	bl	8005150 <_kill_r>
 800511c:	e7ed      	b.n	80050fa <_raise_r+0x12>
 800511e:	2a01      	cmp	r2, #1
 8005120:	d009      	beq.n	8005136 <_raise_r+0x4e>
 8005122:	1c51      	adds	r1, r2, #1
 8005124:	d103      	bne.n	800512e <_raise_r+0x46>
 8005126:	2316      	movs	r3, #22
 8005128:	6003      	str	r3, [r0, #0]
 800512a:	2001      	movs	r0, #1
 800512c:	e7e5      	b.n	80050fa <_raise_r+0x12>
 800512e:	2100      	movs	r1, #0
 8005130:	0028      	movs	r0, r5
 8005132:	6019      	str	r1, [r3, #0]
 8005134:	4790      	blx	r2
 8005136:	2000      	movs	r0, #0
 8005138:	e7df      	b.n	80050fa <_raise_r+0x12>
	...

0800513c <raise>:
 800513c:	b510      	push	{r4, lr}
 800513e:	4b03      	ldr	r3, [pc, #12]	@ (800514c <raise+0x10>)
 8005140:	0001      	movs	r1, r0
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	f7ff ffd0 	bl	80050e8 <_raise_r>
 8005148:	bd10      	pop	{r4, pc}
 800514a:	46c0      	nop			@ (mov r8, r8)
 800514c:	20000018 	.word	0x20000018

08005150 <_kill_r>:
 8005150:	2300      	movs	r3, #0
 8005152:	b570      	push	{r4, r5, r6, lr}
 8005154:	4d06      	ldr	r5, [pc, #24]	@ (8005170 <_kill_r+0x20>)
 8005156:	0004      	movs	r4, r0
 8005158:	0008      	movs	r0, r1
 800515a:	0011      	movs	r1, r2
 800515c:	602b      	str	r3, [r5, #0]
 800515e:	f7fb fdbd 	bl	8000cdc <_kill>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	d103      	bne.n	800516e <_kill_r+0x1e>
 8005166:	682b      	ldr	r3, [r5, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d000      	beq.n	800516e <_kill_r+0x1e>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	20000484 	.word	0x20000484

08005174 <_getpid_r>:
 8005174:	b510      	push	{r4, lr}
 8005176:	f7fb fdab 	bl	8000cd0 <_getpid>
 800517a:	bd10      	pop	{r4, pc}

0800517c <_init>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	46c0      	nop			@ (mov r8, r8)
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr

08005188 <_fini>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr
